 s = input() n = len(s) ind = -1 f = False for i in range(n):     if s[i] == '[':         f = True     elif s[i] == ':':         if f:             ind = i             break bind = -1 f = False for i in range(n-1,-1,-1):     if s[i] == ']':         f = True     elif s[i] == ':':         if f:             bind = i             break # print(ind,bind) if ind == -1 or bind == -1:     print(-1) elif ind >= bind:     print(-1) else:     ans = 4     for i in range(ind+1,bind):         if s[i] == '|':             ans += 1     print(ans) 
num = list(map(int, input())) best = num[:] for i in range(-1, -len(num) - 1, -1):     if num[i] == 0:         continue     num[i] -= 1     for j in range(i + 1, 0):         num[j] = 9     if sum(num) > sum(best):         best = num[:] s = ''.join(map(str, best)).lstrip('0') print(s) 
def main():     s = input()     n = len(s)     t = int(str(int(s[0]) + 1) + '0' * (n - 1))      print(t - int(s))  main() 
from collections import defaultdict as dd import math def nn(): return int(input())  def li(): return list(input())  def mi(): return list(map(int, input().split()))  def lm(): return list(map(int, input().split()))   n, q=mi()  ints=[]   for _ in range(q): st, end=mi() ints.append((st,end))   coverage=[10]+[0]*n  for st, end in ints: for i in range(st,end+1): coverage[i]+=1  total=-1  for val in coverage: if not val==0: total+=1  singlecount=0 doublecount=0  singles=[0]*(n+1) #print(total) doubles=[0]*(n+1) for i in range(len(coverage)): #print(i,singles) if coverage[i]==1: singlecount+=1 if coverage[i]==2: doublecount+=1 singles[i]=singlecount doubles[i]=doublecount maxtotal=0 for i in range(len(ints)): for j in range(i+1, len(ints)): st1=min(ints[i][0],ints[j][0]) end1=min(ints[i][1],ints[j][1]) st2, end2=max(ints[i][0],ints[j][0]), max(ints[i][1],ints[j][1]) #assume st1<=st2 if end1<st2: curtotal=total-(singles[end1]-singles[st1-1])-(singles[end2]-singles[st2-1]) elif end1<end2: curtotal=total-(singles[st2-1]-singles[st1-1])-(doubles[end1]-doubles[st2-1])-(singles[end2]-singles[end1]) else: curtotal=total-(singles[st2-1]-singles[st1-1])-(doubles[end2]-doubles[st2-1])-(singles[end1]-singles[end2]) maxtotal=max(maxtotal,curtotal)  print(maxtotal)         
x=int(input()) h,m=list(map(int,input().split())) def ok(mm):   while mm<0: mm+=1440   hh=mm//60   mm=mm%60   return hh%10==7 or hh//10==7 or mm%10==7 or mm//10==7 for y in range(999):   if ok(h*60+m-y*x):     print(y)     return 
n, pos, l, r = map(int, input().split())  if l > 1 and r < n:     if l <= pos and pos <= r:         if pos - l < r - pos:             print(pos - l + 1 + r - l + 1)         else:             print(r - pos + 1 + r - l + 1)     elif pos > r:         print(pos - r + 1 + r - l + 1)     else:         print(l - pos + 1 + r - l + 1) elif l == 1 and r < n:     print(int(abs(pos - r)) + 1) elif l > 1 and r == n:     print(int(abs(pos - l)) + 1) else:     print(0)
for _ in range(int(input())):     n, x = list(map(int, input().split()))     A = []     for _1 in range(n):        d, h = list(map(int, input().split()))        A.append([d, h])     A.sort(reverse=True)     if A[0][0] >= x:         print(1)     else:         x -= A[0][0]         mz = 0         for d, h in A:             mz = max(mz, d - h)         if mz:             print((x + mz - 1) // mz + 1)         else:             print(-1) 
n, m = map(int, input().split()) if (m >= n): print(n) else:     c = n - m     l = 0     r = 10 ** 18     while r - l > 1:         md = (r + l) // 2         if (1 + md) * md // 2 < c:             l = md         else:             r = md     print(r + m)
cards=list(input().split()) lm=[0]*9 lp=[0]*9 ls=[0]*9 for item in cards:     if item[1]=='m':         lm[int(item[0])-1]+=1     elif item[1]=='p':         lp[int(item[0])-1]+=1     else :         ls[int(item[0])-1]+=1 if max(lm)==3 or max(lp)==3 or max(ls)==3:     print(0) else :     flag=0     def seq_checker(li):         flag=0         for i in range(9):             if flag==0:                 if lm[i]==1:                     flag=1             else :                 if lm[i]==1:                     flag+=1                 else :                     break         return flag     if seq_checker(lm)==3 or seq_checker(lp)==3 or seq_checker(ls)==3:         print(0)     elif max(lm)==2 or max(lp)==2 or max(ls)==2:         print(1)     else :         m=0         for i in range(0,7):             m=max(sum(lm[i:i+3]),sum(lp[i:i+3]),sum(ls[i:i+3]),m)         print(3-m)
from sys import stdin, stdout  k = int(stdin.readline()) n, m = map(int, stdin.readline().split()) left, right, down, up = [], [], [], [] coordinates = []  for i in range(k):     x1, y1, x2, y2 = map(int, stdin.readline().split())          if x1 == x2:         if y1 < y2:             coordinates.append((x1, y1, x2, y2, i))         else:             coordinates.append((x2, y2, x1, y1, i))     else:         if x1 < x2:             coordinates.append((x1, y1, x2, y2, i))         else:             coordinates.append((x2, y2, x1, y1, i))          left.append(coordinates[-1])     right.append(coordinates[-1])     up.append(coordinates[-1])     down.append(coordinates[-1])  left.sort(key = lambda x: (x[0], x[2])) down.sort(key = lambda x: (x[1], x[3]))  challengers = [[], [], [], []] cntl, cntr, cntd, cntu = map(int, stdin.readline().split()) label = 1  if cntl or not cntl:     for i in range(cntl, -1, -1):         if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):             challengers[0].append(left[i][-1])           else:             break              for i in range(cntl + 1, k):         if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:             label = 0                  if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):             challengers[0].append(left[i][-1])           else:             break  if cntr or not cntr:     for i in range(k - 1 - cntr, k):         if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):             challengers[1].append(left[i][-1])         else:             break          for i in range(k - 2 - cntr, -1, -1):         if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]) and left[i][2] > left[i][0]:             label = 0                  if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):             challengers[1].append(left[i][-1])         else:             break  #!!!!!!!!!!!  if cntd or not cntd:     for i in range(cntd, -1, -1):         if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):             challengers[2].append(down[i][-1])         else:             break              for i in range(cntd + 1, k):         if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:             label = 0                      if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):             challengers[2].append(down[i][-1])           else:             break          if cntu or not cntu:     for i in range(k - 1 - cntu, k):         if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):             challengers[3].append(down[i][-1])         else:             break          for i in range(k - 2 - cntu, -1, -1):         if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:             label = 0                  if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):             challengers[3].append(down[i][-1])         else:             break  ans = set(challengers[0]) & set(challengers[1]) & set(challengers[2]) & set(challengers[3])  if not len(ans) or not label:     stdout.write('-1') else:     stdout.write(str(list(ans)[0] + 1))
n=int(input()) r=n%7 d=n//7 print(2*d+max(0,r-5),2*d+min(r,2)) 
from fractions import gcd def lcm(a, b):     return a*b//gcd(a, b) n, a, b, p, q = list(map(int, input().split(' '))) red = n//a blue = n//b if (p<q):     red -= n//lcm(a, b) else:     blue -= n//lcm(a, b)  print(p*red+q*blue) 
n = int(input()) A = input() x = A.count('G') num_1 = 0 num_2 = 0 max_num = 0 flag = 0 for i in range(n):     if A[i] == 'G' and flag == 0:         num_1 += 1     elif A[i] == 'G' and flag == 1:         num_2 += 1     elif A[i] == 'S' and flag == 0:         flag = 1     else:         if num_1 + num_2 + 1 <= x:             if num_1 + num_2 + 1 > max_num:                 max_num = num_1 + num_2 + 1             num_1 = num_2             num_2 = 0             flag = 1         else:             if num_2 + num_1 > max_num:                 max_num = num_1 + num_2             num_1 = num_2             num_2 = 0             flag = 1 if num_1 + num_2 + 1 <= x:     if num_1 + num_2 + 1 > max_num:         max_num = num_1 + num_2 + 1 else:     if num_2 + num_1 > max_num:         max_num = num_1 + num_2 print(max_num) 
#This code is dedicated to Vlada S.  class Course: def __init__(self, reqs, number): self.reqs = list(map(int, reqs.split()[1:])) self.available = False self.in_stack = False self.number = number  n, k = list(map(int, input().split())) requirements = list(map(int, input().split())) courses = {}  answer = ""  for i in range(n): courses[i + 1]= Course(input(), i + 1)  for i in range(len(requirements)): requirements[i] = courses[requirements[i]]  while requirements: data = {}  course = requirements.pop()  if not course.available: requirements.append(course)  done = True  for c in course.reqs: c = courses[c]  if not c.available: requirements.append(c) done = False  if done: answer += " " + str(course.number) course.available = True else: if course.in_stack: print(-1) break  course.in_stack = True else: print(answer.count(" ")) print(answer[1:])
import sys  #f = open('input', 'r') f = sys.stdin n,k = list(map(int, f.readline().split())) a = list(map(int, f.readline().split())) aset = set(a) st = [] failed = False ai = 0 app = [] for p in range(1, n+1):   if p in aset:     while ai < k and (len(st)==0 or st[-1]!=p):       st.append(a[ai])       ai += 1     if len(st) == 0 or st[-1] != p:       failed = True       break     st.pop(-1)     a += app[::-1]     app = []   else:     if ai != k:       st += a[ai:k]       ai = k     app.append(p)  if failed:   print(-1) else:   print(' '.join(map(str, a + app[::-1]))) 
import sys a,b,c=map(int,input().split()) if c==0:     if a==b:         print('YES')     else:         print('NO')     return if (b-a)%c==0 and (b-a)//c>=0:     print('YES') else:     print('NO')
cnt1 = int(input()) cnt2 = int(input()) cnt3 = int(input()) cnt4 = int(input()) if cnt1 != cnt4: print(0) return  if (cnt3 != 0 and cnt1 == 0): print(0) return  print(1)
def read_ints(): return [int(i) for i in input().split()]  n, k, t = read_ints() if t <= k: print(t) elif t > n: print(k + n - t) else: print(k)
from collections import deque S = input() mn = [ 300 for i in range( len( S ) ) ] for i in range( len( S ) - 1, -1, -1 ):   if i == len( S ) - 1:     mn[ i ] = ord( S[ i ] )   else:     mn[ i ] = min( mn[ i + 1 ], ord( S[ i ] ) ) ans = "" dq = deque() for i in range( len( S ) ):   dq.append( ord( S[ i ] ) )   while len( dq ) and ( i + 1 == len( S ) or dq[ len( dq ) - 1 ] <= mn[ i + 1 ] ):     ans += chr( dq[ len( dq ) - 1 ] )     dq.pop() print( ans ) 
import sys input = sys.stdin.readline  T = int(input()) for _ in range(T):     n = int(input())     lastP = 0     lastC = 0     works = True     for _ in range(n):         p, c = list(map(int, input().split()))         pDiff = p-lastP         cDiff = c-lastC         if 0 <= cDiff <= pDiff:             pass         else:             works = False         lastP = p         lastC = c     if works:         print('YES')     else:         print('NO') 
s = input() h = int(s[:2]) m = int(s[3:])  def ispalin(h, m):     s = "%02d:%02d"%(h,m)     return s == s[::-1]  for d in range(999999):     if ispalin(h, m):         print(d)         break     m+= 1     if m == 60:         h = (h+1)%24         m = 0 
read = lambda: list(map(int, input().split())) n = int(input()) a = list(read()) x, y = a.index(1), a.index(n) ans = max(x, y, n - x - 1, n - y - 1) print(ans) 
import sys, math s=input() pal='AHIMOoTUVvWwXxY' n=len(s) l=0 r=n-1 flag=True fir='pq' sec='bd' while l<=r:     if s[l]==s[r] and s[l] in pal:         l+=1         r-=1         continue     elif s[l]==s[r]:         flag=False         break     elif (s[l] in fir) and (s[r] in fir):         l+=1         r-=1         continue     elif (s[l] in sec) and (s[r] in sec):         l+=1         r-=1         continue     else:         flag=False         break if flag:     print('TAK') else:     print('NIE')      
a = list(input()) b = int(input()) a.sort() a = a[::-1] prefix = "" while(len(a) > 0): for i in range(len(a)): num = prefix + a[i] + "".join(sorted(a[:i] + a[i + 1:])) if (int(num) <= b): prefix += a[i] a = a[:i] + a[i+1:] break print(prefix) 
s = [ [ c for c in input() ] for i in range(10) ] def win():   for i in range(10):     for j in range(10):       ok = True       for k in range(5):         if j+k>9: ok = False         elif s[i][j+k] != 'X': ok = False       if ok: return True       ok = True       for k in range(5):         if i+k>9: ok = False         elif s[i+k][j] != 'X': ok = False       if ok: return True       ok = True       for k in range(5):         if j+k>9 or i+k>9: ok = False         elif s[i+k][j+k] != 'X': ok = False       if ok: return True       ok = True       for k in range(5):         if i-k<0 or j+k>9: ok = False         elif s[i-k][j+k] != 'X': ok = False       if ok: return True   return False for i in range(10):   for j in range(10):     if s[i][j]=='.':       s[i][j] = 'X'       if win():         print('YES')         return       s[i][j] = '.' print('NO') 
#!/usr/bin/env python3  def main():     import sys      readln = sys.stdin.readline     try:         while True:             n, k = list(map(int, input().split()))             a = [['0'] * n for i in range(n)]             i = j = 0             while k > 0:                 if i == j:                     a[i][j] = '1'                     k -= 1                     j += 1                 elif k >= 2:                     a[i][j] = a[j][i] = '1'                     k -= 2                     j += 1                 elif i != n - 1:                     a[i + 1][i + 1] = '1'                     k = 0                 else:                     assert a[i][i] == '1'                     a[i][i] = '0'                     a[i][j] = a[j][i] = '1'                     k = 0                  if j == n:                     i += 1                     if i == n and k > 0:                         print(-1)                         break                     j = i             else:                 for row in a:                     print(' '.join(row))      except EOFError:         pass  main() 
from math import log from decimal import Decimal  s = ['x^y^z', 'x^z^y', '(x^y)^z', 'y^x^z', 'y^z^x', '(y^x)^z', 'z^x^y', 'z^y^x', '(z^x)^y']  x, y, z = list(map(Decimal, input().split()))  f = [] f += [(Decimal(log(x)) * (y ** z),  0)] f += [(Decimal(log(x)) * (z ** y), -1)] f += [(Decimal(log(x)) * (y *  z), -2)] f += [(Decimal(log(y)) * (x ** z), -3)] f += [(Decimal(log(y)) * (z ** x), -4)] f += [(Decimal(log(y)) * (x *  z), -5)] f += [(Decimal(log(z)) * (x ** y), -6)] f += [(Decimal(log(z)) * (y ** x), -7)] f += [(Decimal(log(z)) * (x *  y), -8)]  f.sort()  print(s[-f[-1][1]]) 
n = int(input()) st = input() ans = n now = '' ma = 0 for i in range(n // 2):     now += st[i]     t = ''     for j in range(i + 1, 2 * i + 2):         t += st[j]     if t == now:         ma = i print(ans - ma) 
n = int(input()) t = [1] + [0] * n b, a = d = [], [] h, s = [], []  for i in range(n):     f, k = input().split()     d[int(k)].append(f)  m = len(a) for i in a:     if i.isdigit() and i[0] != '0':         j = int(i)         if 0 < j <= m:             t[j] = 1         elif m < j <= n:             t[j] = -1         else:             s.append(i)     else:         s.append(i) for i in b:     if i.isdigit() and i[0] != '0':         j = int(i)         if m < j <= n:             t[j] = 1         elif 0 < j <= m:             t[j] = -1         else:             s.append(i)     else:         s.append(i)  x = [j for j in range(1, m + 1) if t[j] < 0] y = [j for j in range(m + 1, n + 1) if t[j] < 0]  u = [j for j in range(1, m + 1) if not t[j]] v = [j for j in range(m + 1, n + 1) if not t[j]]  if not s and (x or y):     s = ['0']     if y:         i = y.pop()         v.append(i)     else:         i = x.pop()         u.append(i)     h.append(str(i) + ' 0')     t[i] = 0  while x or y:     if v and x:         i = x.pop()         j = v.pop()         t[j] = 1         h.append(str(i) + ' ' + str(j))         u.append(i)     else:         u, v, x, y = v, u, y, x  k = 1 for j in s:     while t[k] == 1: k += 1     h.append(j + ' ' + str(k))     k += 1  d = '\nmove ' print(str(len(h)) + d + d.join(h) if h else 0)
x=int(input()) def s(a):   r=0   while a>0:     r+=a%10     a//=10   return r def d(a,b):   r=0   for i in range(6):     if a%10!=b%10:       r += 1     a//=10     b//=10   return r c=6 for i in range(1000000):   if s(i%1000)==s(i//1000):     c=min(c,d(x,i)) print(c) 
from math import gcd def powmod(a,b,m):  a%=m  r=1  while b:   if b&1:r=r*a%m   a=a*a%m   b>>=1  return r  def f(n):  r=[]  if (n&1)==0:   e=0   while (n&1)==0:n>>=1;e+=1   yield (2,e)  p=3  while n>1:   if p*p>n:p=n   if n%p:    p+=2    continue   e=1;n//=p   while n%p==0:n//=p;e+=1   yield (p,e)   p+=2  return r m,x=map(int,input().split()) p=2 r=[(1,1)] for p,e in f(m):  assert e>=1  ord=p-1  assert powmod(x,ord,p)==1  for pi,ei in f(p-1):   while ord % pi == 0 and powmod(x,ord//pi,p)==1: ord//=pi  ords=[(1,1),(ord,p-1)]  q=p  for v in range(2,e+1):   q*=p   if powmod(x,ord,q)!=1:ord*=p   assert powmod(x,ord,q)==1   ords.append((ord,q//p*(p-1)))  r=[(a//gcd(a,c)*c,b*d) for a,b in r for c,d in ords] print(sum(y//x for x,y in r))
m = 10** 6 + 3  n, k = list(map(int, input().split())) p = 1 for i in range(n):     p *= 2     if p > k:         break if p < k:     print('1 1')     return  gcd = tmp = k - 1 while tmp:     gcd -= tmp % 2     tmp //= 2 b = pow(2, (k - 1) * n - gcd, m) a = 1 mem = [-1]*100 for i in range(1, k):     cnt = 0     while i % 2 == 0:         i //= 2         cnt += 1     if mem[cnt] == -1:         mem[cnt] = pow(2, n - cnt, m)     a = a * (mem[cnt] - i + m) % m     if a == 0:         break print((b - a + m) % m, b) 
""" Codeforces Good Bye 2016 Contest Problem B  Author  : chaotic_iak Language: Python 3.5.2 """  ################################################### SOLUTION  def main():     latitude = 0     n, = read()     for i in range(n):         l, d = read(str)         l = int(l)         if latitude == 0:             if d != "South":                 return "NO"         if latitude == 20000:             if d != "North":                 return "NO"         if d == "South":             latitude += l         elif d == "North":             latitude -= l         if not (0 <= latitude <= 20000):             return "NO"     if latitude != 0:         return "NO"     return "YES"  #################################################### HELPERS  def read(callback=int):     return list(map(callback, input().strip().split()))  def write(value, end="\n"):     if value is None: return     try:         if not isinstance(value, str):             value = " ".join(map(str, value))     except:         pass     print(value, end=end)  write(main()) 
import sys, collections  def gcd(a, b):     if b == 0: return a     return gcd(b, a % b)  def lcm(a, b):     return a // gcd(a, b) * b  def extgcd(a, b):     if b == 0: return 1, 0     x, y = extgcd(b, a % b)     return y, x - a // b * y  def prime_factor(n):     res = collections.defaultdict(int)      i = 2     while i * i <= n:         cnt = 0         while n % i == 0:             n //= i             cnt += 1         if cnt > 0: res[i] = cnt         i += 1     if n != 1: res[n] = 1      return res  def modinv(a, mod):     if a == 0: return -1     if gcd(a, mod) != 1: return -1     return extgcd(a, mod)[0] % mod  def normalize(a1, a2):     p1 = prime_factor(a1)     p2 = prime_factor(a2)      keys = list(set(p1.keys()) | set(p2.keys()))      r1 = 1     r2 = 1     for k in keys:         if p1[k] >= p2[k]:             r1 *= k ** p1[k]         else:             r2 *= k ** p2[k]     return r1, r2  def solve(a1, b1, a2, b2):     g = gcd(a1, a2)     if (b1 - b2) % g != 0: return -1      a1, a2 = normalize(a1, a2)     u = b1 % a1     inv = modinv(a1, a2)     v = (b2 - u) * inv % a2     return u + v * a1  def f(x0, T, v):     ok = 10 ** 36     ng = -1      while ok - ng > 1:         mid = (ok + ng) // 2          if x0 + T * mid >= v:             ok = mid         else:             ng = mid      return ok  a1, b1, a2, b2, L, R = map(int, input().split())  T = lcm(a1, a2) x0 = solve(a1, b1, a2, b2)  if x0 == -1:     print(0)     return  x0 -= T * 10 ** 36  ok = 10 ** 60 ng = -1  while ok - ng > 1:     mid = (ok + ng) // 2      val = x0 + T * mid     k = (val - b1) // a1     l = (val - b2) // a2     if k >= 0 and l >= 0:         ok = mid     else:         ng = mid  x0 += ok * T  # L <= x0 + kT < R + 1 ans = f(x0, T, R + 1) - f(x0, T, L)  print(ans)
n, a, b = map(int, input().split()) ans = 0 for i in range(1, n):     ans = max(ans, min(a // i, b // (n - i))) print(ans)
n,m=list(map(int,input().split())) f=[input() for _ in range(n)] def clr(ss):     cc = None     for s in ss:         for c in s:             if cc is None:                 cc = c             elif cc != c:                 return None     return cc if n%3 == 0:     s = set()     for i in range(0,n,n//3):         ret = clr(f[i:i+n//3])         if ret is None:             continue         s.add(ret)     if len(s) == 3:         print('YES')         return if m%3 == 0:     s = set()     for j in range(0,m,m//3):         ff = []         for i in f:             ff.append(i[j:j+m//3])         ret = clr(ff)         if ret is None:             continue         s.add(ret)     if len(s) == 3:         print('YES')         return print('NO') 
def f(n): left, right = -1, n + 1 while right - left > 1: mid = (left + right) // 2 x = 6 * mid * (mid + 1) // 2 + 5 * (mid + 1) if x > n: right = mid else: left = mid if left >= 0: mid = left x = 6 * mid * (mid + 1) // 2 + 5 * (mid + 1) n -= x return (n, left + 1)  def main(): n = int(input()) n, k = f(n) x = k y = -2 * k  d = [k + 1] * 6 d[1] -= 1 dx = [1, -1, -2, -1,  1, 2] dy = [2,  2,  0, -2, -2, 0]  for i in range(6): x += min(d[i], n) * dx[i] y += min(d[i], n) * dy[i] n = max(0, n - d[i])  print(x, y)   main() 
a, b, c = list(map(int, input().split())) p = [0] * 100000 p[0] = 1 p[a] = 1 p[b] = 1 for i in range(c + 1):     if p[i]:         p[i + a] = 1         p[i + b] = 1 if p[c]:     print('Yes') else:     print('No') 
def main(): n, l = map(int, input().split())  x = list(map(int, input().split())) y = list(map(int, input().split()))  x.append(x[0] + l) y.append(y[0] + l)  a = [x[i + 1] - x[i] for i in range(n)] b = [y[i + 1] - y[i] for i in range(n)]  for i in range(n): if (a == b[i:] + b[:i]): print("YES") return print("NO")   main()
s = input() mx = 0 n = len(s) for l in range(n):     for r in range(l, n):         if s[l:r+1] != s[l:r+1][::-1]:             mx = max(mx, r - l + 1) print(mx)
'''input 5 3123 3123 2777 2777 2246 2246 2246 2246 1699 1699 ''' n = int(input()) x = [] f = 0 for _ in range(n): a, b = list(map(int, input().split())) if a != b: f = 1 x.append(a) if f == 1: print("rated") elif sorted(x)[::-1] == x: print("maybe") else: print("unrated")        
inf = 10 ** 6 n = int(input()) a = list(map(int, input().split())) dist = [inf] * n for i in range(len(a)):     if not a[i]:         dist[i] = 0         cur = 1         i1 = i         while i1 - 1 > - 1 and a[i1 - 1] != 0:             dist[i1 - 1] = min(dist[i1 - 1], cur)             i1 -= 1             cur += 1         i1 = i         cur = 1         while i1 + 1 < n and a[i1 + 1] != 0:             dist[i1 + 1] = min(dist[i1 + 1], cur)             i1 += 1             cur += 1 print(*dist)
n=int(input()) s=[c=='1' for c in input()] m=len(s) z=[[0,0]] for c in s:  ind = z[-1][c]  z[-1][c] = len(z)  z.append(z[ind][:]) assert(len(z) == m+1) z[m][0] = z[m][1] = m # make it sticky  # how many things match directly dp = [0 for _ in range(m+1)] dp[0] = 1 for i in range(n):  ndp = [0 for _ in range(m+1)]  for i in range(m+1):   ndp[z[i][0]] += dp[i]   ndp[z[i][1]] += dp[i]  dp = ndp res = dp[m]  for k in range(1, m):  s0 = 0  for c in s[-k:]:   s0 = z[s0][c]  dp = [0 for _ in range(m+1)]  dp[s0] = 1  for i in range(n - k):   ndp = [0 for _ in range(m+1)]   for i in range(m+1):    ndp[z[i][0]] += dp[i]    ndp[z[i][1]] += dp[i]   dp = ndp  for s1 in range(m): # skip m   v = dp[s1]   for c in s[-k:]:    if s1 == m: v = 0    s1 = z[s1][c]   if s1 == m: res += v print(res)
from math import * # stores counterclockwise angle between vector (1,0) and each vector in a a = [] n = int(input()) for i in range(n):     x,y = list(map(int,input().split()))     # calculate counterclockwise angle between (1,0) and this vector     t = acos(x/sqrt(x**2+y**2))     a.append((i+1,[2*pi-t,t][y>=0],x,y)) cmp = lambda x:x[1] a = sorted(a,key=cmp) # construct pairs for adjacent vectors b = [] for i in range(n):     i1,i2 = a[i][0],a[(i+1)%n][0]     x1,y1 = a[i][2:]     x2,y2 = a[(i+1)%n][2:]     inner_prod = x1*x2 + y1*y2     inner_prod *= abs(inner_prod)     norm_prod = ((x1**2+y1**2)*(x2**2+y2**2))     b.append((i1,i2,inner_prod,norm_prod)) # find the nearest vector better = lambda p1,p2: p1[2]*p2[3]>p2[2]*p1[3] ans = b[-1] for i in range(n):     if better(b[i],ans):         ans = b[i] print(ans[0],ans[1]) 
d, k, a, b, t = list(map(int, input().split()))  t1 = d * b t2 = d * a + ((d - 1) // k) * t t3 = max(0, d - k) * b + min(k, d) * a dd = d % k d1 = d - dd t4 = d1 * a + max(0, (d1 // k - 1) * t) + dd * b  print(min([t1, t2, t3, t4])) 
n, k = map(int, input().split()) div = [] i = 1 n1 = n while i * i <= n:     if n % i == 0:         div.append(i)         div.append(n // i)     i += 1 div.sort() mx = -1 for i in range(len(div)):     a = div[i] * k * (k + 1) // 2     if a <= n:         mx = div[i] if mx == -1:     print(-1) else:     for i in range(k - 1):         print(mx * (i + 1), end= " ")     print(n - mx * k * (k - 1) // 2)      
ct=0 a, b = list(map(int, input().split(' '))) x=[0]*5 for i in range(1, b+1):     x[i%5]+=1 for i in range(1, a+1):     ct+=x[(0-i)%5] print(ct) 
N, X = list(map(int, input().split())) A = [int(a) for a in input().split()]  dp = [[0]*4 for _ in range(N+1)]  for i in range(1, N+1):     dp[i][0] = max(dp[i-1][0] + A[i-1], 0)     dp[i][1] = max(dp[i-1][1] + A[i-1] * X, dp[i][0])     dp[i][2] = max(dp[i-1][2] + A[i-1], dp[i][1])     dp[i][3] = max(dp[i-1][3], dp[i][2])  print(dp[N][3]) 
def main():     from math import sqrt     m, n, k = list(map(int, input().split()))     if n < m:         n, m = m, n     lo, hi = 1, k + 1     while lo + 1 < hi:         mid = (lo + hi) // 2         t = mid - 1         v = min(int(sqrt(t)), m)         tn, tm = (t - 1) // m, t // n         vv = [t // i for i in range(tm + 1, v + 1)]         if t // n * (n + m) + sum(vv) * 2 + max(min((tn - tm), len(vv)) * m, 0) - v * v - sum(                 vv[:max(min(tn - tm, len(vv)), 0)]) < k:             lo = mid         else:             hi = mid     print(lo)   def __starting_point():     main()  __starting_point()
k = int(input())  if k<=9:     print(k) else:     num_arr = [9*(i+1)* 10**i for i in range(11)]      index = 0      while True:         if k<=num_arr[index]:             break         else:             k -= num_arr[index]             index += 1      digit = index+1     k += digit-1       num = k//digit     offset = k%digit      string_num = str(10**(digit-1)+ num-1)      print(string_num[offset])  
n, m, r = map(int, input().split()) S = list(map(int, input().split())) B = list(map(int, input().split())) x = min(S) y = max(B) cnt = r % x act = r // x cnt += act * y print(max(r, cnt))
s = input() t = 0 if len(s)%2==0:     n = (len(s)-1)//2+1 else:     n = (len(s)-1)//2 for i in range(n, len(s)-1):     a = i     b = len(s)-i-1     if s[:a+1]==s[b:]:         print('YES')         print(s[:a+1])         t = 1         break if t==0:     print('NO')
n = int(input()) res = set() for r in range(100):     a = 1     b = 2**(r + 1) - 3     c = -2 * n     d = b * b - 4 * a * c     if d < 0:         continue     le = 0     ri = d     while le < ri:         c = (le + ri) // 2         if c * c < d:             le = c + 1         else:             ri = c     if le * le == d:         if (-b - le) % 4 == 2 and -b - le > 0:             res.add((-b - le) // 2 * 2**r)         if (-b + le) % 4 == 2 and -b + le > 0:             res.add((-b + le) // 2 * 2**r) for i in sorted(list(res)):     print(i) if not list(res):     print(-1) 
from collections import Counter  r = lambda: list(map(int, input().split()))  def main(): n, = r() s = input() cost = list(r())  ans = 0  cnt = Counter()  for i in range(n // 2): if s[i] == s[n - 1 - i]: ans += min(cost[i], cost[n - 1 - i]) cnt[s[i]] += 1 total = sum(cnt.values()) if total > 0: ch, occ = cnt.most_common(1)[0] avail = [] if occ > total - occ: for i in range(n // 2): if s[i] != s[n - 1 - i] and s[i] != ch and s[n - 1 - i] != ch: avail.append(min(cost[i], cost[n - 1 - i])) avail.sort() ans += sum(avail[:2 * occ - total])  print(sum(cost) - ans)  main() 
w,m=map(int,input().split())  bb=True  while(m>0 and bb): x=m%w if x==1:m-=1 elif x==w-1:m+=1 elif x!=0:bb=False m//=w  if bb:print("YES") else:print("NO")
from collections import defaultdict  def solve(n, k):     as_bin = bin(n)[2:]     cnt = defaultdict(int)     cnt.update({i : 1 for i, b in enumerate(reversed(as_bin)) if b == '1'})     curr_len = len(cnt)     curr_pow = len(as_bin) - 1      if curr_len > k:         return None      while True:         new_len = curr_len + cnt[curr_pow]         if new_len > k:             break         cnt[curr_pow - 1] += 2 * cnt[curr_pow]         del cnt[curr_pow]         curr_pow -= 1         curr_len = new_len      i = min(cnt.keys())     while curr_len < k:         cnt[i] -= 1         cnt[i - 1] += 2         curr_len += 1         i -= 1      ans = []     for i in sorted(list(cnt.keys()), reverse=True):         ans.extend([i] * cnt[i])     return ans  n, k = [int(v) for v in input().split()] ans = solve(n, k)  if ans is None:     print('No') else:     print('Yes')     print(' '.join(str(c) for c in ans)) 
n, t = list(map(int,input().split())) g = [[0.0] * i for i in range(1,n+1)]   for _ in range(t):     g[0][0] += 1.0     for i in range(n):         for j in range(i+1):             spill = max(0, g[i][j] - 1.0)             g[i][j] -= spill             if i < n - 1:                 g[i + 1][j] += spill / 2                 g[i + 1][j + 1] += spill / 2     if g[n-1][0] == 1.0:         break  cnt = 0 for i in range(n):     for j in range(i + 1):         if g[i][j] == 1.0:             cnt += 1 print(cnt) 
n = int(input()) points = [[int(x) for x in input().split()] for _ in range(n)] if n <= 1: print(-1) return dx = [1e9, -1e9] dy = [1e9, -1e9] for x, y in points: dx[0] = min(dx[0], x) dx[1] = max(dx[1], x) dy[0] = min(dy[0], y) dy[1] = max(dy[1], y) area = (dx[1] - dx[0]) * (dy[1] - dy[0]) if area: print(area) else: print(-1) 
'''input 6 4 2 '''  def list_input():     return list(map(int,input().split())) def map_input():     return map(int,input().split()) def map_string():     return input().split()   def f(n,a,b,left,cnta = 4,cntb = 2): if(cnta == 0 and cntb == 0): return 0 if(cnta < 0 or cntb < 0): return 100000000000000000000 if a <= left and cnta and b <= left and cntb: return min(f(n,a,b,left-a,cnta-1,cntb),f(n,a,b,left-b,cnta,cntb-1)) if a <= left and cnta: return f(n,a,b,left-a,cnta-1,cntb) if b <= left and cntb: return f(n,a,b,left-b,cnta,cntb-1) return 1+min(f(n,a,b,n-a,cnta-1,cntb),f(n,a,b,n-b,cnta,cntb-1))  n = int(input()) a = int(input()) b = int(input()) print(f(n,a,b,0))
n = int(input()) a = list(map(int,input().split())) p = input() m = 0 suc = True for i in range(n-1):     m = max(m,a[i])     if p[i] == '0' and m>(i+1):         suc = False         break if suc:     print('YES') else:     print('NO') 
seat = input() time_to = {'a': 4, 'f': 1, 'b': 5, 'e': 2, 'c': 6, 'd': 3} col = seat[-1] row = int(seat[:-1]) row -= 1  blocks_to_serve = row // 4 time = (6 * 2 + 4) * blocks_to_serve  if row % 2 == 1:     time += 6 + 1  time += time_to[col]  print(time) 
n, bx = list(map(int, input().split())) x1 = list(map(int, input().split())) x = 0 for i in range(n): x *= bx x += x1[i]  n, by = list(map(int, input().split())) y1 = list(map(int, input().split())) y = 0 for i in range(n): y *= by y += y1[i]  if x == y: print('=') elif x < y: print('<') else: print('>') 
from math import * n=int(input()) if n==3:     li=list(map(int,input().split()))     ans=0     flag=0     for i in li:         ans^=i     if ans==0:         print("BitAryo")     else:         print("BitLGM") elif n==2:     li=list(map(int,input().split()))     li.sort()     phi=(1+sqrt(5))/2     ch=[0]*(785)     for i in range(300):         a=floor(phi*i)         b=floor((phi**2)*i)         ch[a]=b         ch[b]=a     if ch[li[0]]==li[1]:         print("BitAryo")     else:         print("BitLGM") else:     li=int(input())     if li==0:         print("BitAryo")     else:         print("BitLGM") 
n,k=map(int,input().split()) l=list(map(int,input().split())) pf=[] needed=[] for i in range(2,40000): if k%i==0: pf.append(i) c=0 while k%i==0: k//=i c+=1 needed.append(c) if k>1: pf.append(k) needed.append(1) pfl=len(pf) cnt=[[0]*n for i in range(pfl)] for i in range(n): for j in range(len(pf)): c=0 while l[i]%pf[j]==0: c+=1 l[i]//=pf[j] cnt[j][i]=c have=[sum(i) for i in cnt] pos=n def ok(): for i in range(len(pf)): if have[i]<needed[i]: return False return True if not ok(): print(0) quit() for i in range(n-1,0,-1): for j in range(len(pf)): have[j]-=cnt[j][i] if not ok(): for j in range(len(pf)): have[j]+=cnt[j][i] break pos=i ans=n-pos+1 for x in range(n-1): for j in range(len(pf)): have[j]-=cnt[j][x] if pos==(x+1): for j in range(len(pf)): have[j]+=cnt[j][pos] pos+=1 while pos<n: if ok(): break else: for i in range(len(pf)): have[i]+=cnt[i][pos] pos+=1 if ok(): ans+=n-pos+1 else: break print(ans)
alpha = [chr(ord('a')+i) for i in range(26)] n,k = list(map(int,input().split())) s = input() arr = [s.count(alpha[i]) for i in range(26)]  print('YES' if max(arr) <= k else 'NO') 
n = int(input()) A = [int(x) for x in input().split()] mn = min(A)  I = [i for i in range(len(A)) if A[i] == mn] mindiff = min(I[i]-I[i-1] for i in range(1,len(I))) print(mindiff) 
from fractions import gcd  t,w,b = map(int,input().split()) per = w*b//gcd(w,b) can = (t//per+1)*min(w,b)-1 if t%per<min(w,b):     can-=min(w,b)     can+=t%per+1 g = gcd(can,t) can//=g t//=g print(str(can)+"/"+str(t))
x, y, z = map(int, input().split()) if z == 0:     if x == y:         print('0')     elif x > y:         print('+')     else:         print('-') else:     if x > y + z:         print('+')      elif x + z < y:         print('-')     else:         print('?')
#       import collections, atexit, math, sys, bisect   sys.setrecursionlimit(1000000) def getIntList():     return list(map(int, input().split()))      try :     #raise ModuleNotFoundError     import numpy     def dprint(*args, **kwargs):         print(*args, **kwargs, file=sys.stderr)     dprint('debug mode') except Exception:     def dprint(*args, **kwargs):         pass    inId = 0 outId = 0 if inId>0:     dprint('use input', inId)     sys.stdin = open('input'+ str(inId) + '.txt', 'r') #标准输出重定向至文件 if outId>0:     dprint('use output', outId)     sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #标准输出重定向至文件     atexit.register(lambda :sys.stdout.close())     #idle 中不会执行 atexit      N, = getIntList() #print(N) S = input()  X, Y = getIntList()  dd = ( (0,1), (0,-1), (-1,0), (1,0)) pp = 'UDLR' zz = {} for i in range(4):     zz[ pp[i]] = dd[i]   if abs(X) + abs(Y) >N:     print(-1)     return  if abs(X+Y-N)%2==1:     print(-1)     return      fromLeft = [None for i in range(N)] fromRight = fromLeft.copy()  x0 = 0 y0 = 0 for i in range(N):     x = S[i]     fromLeft[i] = (x0,y0)     g = zz[x]     x0+= g[0]     y0+= g[1]  if x0==X and y0==Y:     print(0)     return  x0 = 0 y0 = 0 for i in range(N-1,-1,-1):     x = S[i]     fromRight[i] = (x0,y0)     g = zz[x]     x0+= g[0]     y0+= g[1]   up = N down = 0 dprint(fromLeft) dprint(fromRight) while down+1<up:     mid = (up+down)//2     dprint('mid', mid)     ok = False     for i in range(N-mid + 1):         tx = fromLeft[i][0] + fromRight[i+mid-1][0]         ty = fromLeft[i][1] + fromRight[i+mid-1][1]         gg = abs(X-tx) + abs(Y- ty)         if gg <= mid:             ok = True             break     if ok:         up = mid     else:         down = mid          print(up)  
t=int(input()) for i in ' '*t:     n,x=map(int,input().split())     s=input()     L=[0]     for i in s:         if i=='0':L.append(L[-1]+1)         else:L.append(L[-1]-1)     L.pop(0)     k=L[-1]     c=0     if x==0:c+=1     if k>0:         for i in L:             if i%k==x%k and i<=x:c+=1         print(c)     elif k<0:         for i in L:             if i%k==x%k and i>=x:c+=1         print(c)     else:         for i in L:             if i==x:c=-1         print(c)
s = input().split() k = int(s[1]) s = s[0] if s.count('0') < k:     if s.count('0') > 0:         print(len(s) - 1)     else:         print(len(s))     return have = 0 its = 0 for i in range(len(s) - 1, -1, -1):     its += 1     if s[i] == '0':         have += 1     if have == k:         print(its - have)         return
n, m, k, x, y = list(map(int, input().split()))  ans = [[0] * m for x in range(n)]  onebig = (2*n-2)*m or m  oo = k // onebig  for i in range(n):     for j in range(m):         if i == 0 or i == n-1:             ans[i][j] += oo             k -= oo         else:             ans[i][j] += 2*oo             k -= 2*oo  from itertools import chain  for i in chain(list(range(n)), list(range(n-2, 0, -1))):     if not k:         break     for j in range(m):         if not k:             break         ans[i][j] += 1         k -= 1  _max = max(list(map(max, ans))) _min = min(list(map(min, ans))) _ans = ans[x-1][y-1]   print(_max, _min, _ans) 
turns = int(input()) s0 = input() s1 = input() s2 = input()  d0 = dict() d1 = dict() d2 = dict()  alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' for char in alphabet: d0[char] = 0 d1[char] = 0 d2[char] = 0  for char in s0: d0[char] += 1 for char in s1: d1[char] += 1 for char in s2: d2[char] += 1  m0 = max([d0[char] for char in alphabet]) m1 = max([d1[char] for char in alphabet]) m2 = max([d2[char] for char in alphabet])  l0 = len(s0) l1 = len(s1) l2 = len(s2)  if turns == 1 and m0 == l0: score0 = m0 - 1 else: score0 = min(l0,m0+turns)  if turns == 1 and m1 == l1: score1 = m1 - 1 else: score1 = min(l1,m1+turns)  if turns == 1 and m2 == l2: score2 = m2 - 1 else: score2 = min(l2,m2+turns)  scores = [score0,score1,score2] bestscore = max(scores)  winnerlist = [i for i in range(3) if scores[i] == bestscore] if len(winnerlist) > 1: print('Draw') else: print(['Kuro','Shiro','Katie'][winnerlist[0]])
read = lambda: map(int, input().split()) c, v0, v1, a, l = read() cur = 0 cnt = 0 while cur < c:     cur = max(0, cur - l)     cur += min(v1, v0 + a * cnt)     cnt += 1 print(cnt)
import math  n=int(input())  def prime(p):     if p == 1:         return False     fl=True     for i in range(2,math.ceil(p**0.5) + 1):         if p % i == 0:             fl=False     return fl  def sum_of_primes(k):     fl=True     for i in range((k // 2) + 1):         if prime(i) and prime(k-i):             fl=True             break     return fl  if prime(n):     print(1)     print(n) else:     if prime(n-2):         print(2)         print(2 , n-2)     else:         l=1         for i in range(2, (n // 3) + 1):             if prime(i) and sum_of_primes(n - i):                 l=i                 break         print(3)         r=1         for k in range((n-l) // 2):             if prime(k) and prime(n-l-k):                 r=k                 break         print(l,r,n-l-r)               
n, m = list(map(int, input().split())) p = [] ans = 0 for i in range(n):     s = input()     ans += s.count('*')     p.append(s) dp = [] for i in range(n):     dp.append([0] * m) for i in range(n):     col = p[i].count('*')     for t in range(m):         dp[i][t] = col for i in range(m):     col = 0     for t in range(n):         if p[t][i] == '*':             col += 1     for t in range(n):         dp[t][i] += col f = False for i in range(n):     for t in range(m):         if dp[i][t] - int(p[i][t] == '*') == ans:             f = True             print('YES')             print(i + 1, t + 1)             break     if f:         break if not f:     print('NO') 
n, m, a, b = list(map(int, input().split()))  k = n%m print(min(k*b, (m - k)*a)) 
n = int(input()) a = list(map(int, input().split())) res = 0 new_a = [] for i in range(n):     if a[i] % 2 == 0:         if a[i] > 0:             res += a[i]     else:         new_a.append(a[i]) a = new_a a.sort() res += a[-1] a.pop() while len(a) > 1:     if a[-1] + a[-2] > 0:         res += a[-1] + a[-2]         a.pop()         a.pop()     else:         break print(res)
from math import factorial   def lol(n):     if n == 1:         yield [0]         yield [1]     else:         for p in lol(n - 1):             p.append(0)             yield p             p[-1] = 1             yield p             p.pop()   def sp(g1, g2, g3, f):     if g1 == 0:         if g2 == g3:             return 2         elif abs(g2 - g3) == 1:             return 1         else:             return 0     elif g2 == 0:         if g1 == g3:             return 2         elif abs(g1 - g3) == 1:             return 1         else:             return 0     elif g3 == 0:         if g2 == g1:             return 2         elif abs(g2 - g1) == 1:             return 1         else:             return 0     else:         if f == 1:             b = sp(g1, g2 - 1, g3, 2)             c = sp(g1, g2, g3 - 1, 3)             return b + c         elif f == 2:             a = sp(g1 - 1, g2, g3, 1)             c = sp(g1, g2, g3 - 1, 3)             return a + c         elif f == 3:             a = sp(g1 - 1, g2, g3, 1)             b = sp(g1, g2 - 1, g3, 2)             return a + b         else:             a = sp(g1 - 1, g2, g3, 1)             b = sp(g1, g2 - 1, g3, 2)             c = sp(g1, g2, g3 - 1, 3)             return a + b + c   n, T = map(int, input().split()) S = [] cnt = 0 M = 10 ** 9 + 7 for i in range(n):     S.append(list(map(int, input().split()))) for p in lol(n):     d = 0     g1, g2, g3 = 0, 0, 0     for i in range(n):         if p[i]:             d += S[i][0]             if S[i][1] == 1:                 g1 += 1             elif S[i][1] == 2:                 g2 += 1             elif S[i][1] == 3:                 g3 += 1     if d == T:         cnt += factorial(g1) * factorial(g2) * factorial(g3) * sp(g1, g2, g3, 0)         cnt %= M print(cnt)
big = 100010 def gen_mu():     mu = [1]*big     mu[0] = 0     P = [True]*big     P[0] = P[1] = False     for i in range(2,big):         if P[i]:             j = i             while j<big:                 P[j] = False                 mu[j] *= -1                 j += i             j = i*i             while j<big:                 mu[j] = 0                 j += i*i     return mu  m = int(input()) mu = gen_mu()  MOD = 10**9+7 def mod_inv(x):     return pow(x, MOD-2, MOD)  s = 1 for i in range(2,big):     # p is probabilty that i | a random number [1,m]     p = (m//i)*mod_inv(m)     s += (-mu[i])*(p)*mod_inv(1-p) print(s%MOD)
from math import sqrt from fractions import gcd l, r, x, y = list(map(int, input().split())) if y % x != 0:     print(0)     return lo = (l + x - 1) // x hi = r // x p = y // x s = 0  k1 = 1 while k1 * k1 <= p:     k2 = p // k1     if lo <= k1 <= hi and lo <= k2 <= hi and gcd(k1, k2) == 1 and k1 * k2 == p:         s += 1 + (k1 != k2)     k1 += 1 print(s) 
from math import gcd a, b = list(map(int, input().split())) if b < a:     a, b = b, a if a == b:     print(0)     return c = b - a i = 1 ans = a * b // gcd(a, b)  def get(x):     A = (a + x - 1) // x * x     B = A - a + b     return A * B // gcd(A, B), A  r = 0 while i * i <= c:     if c % i == 0:         A, AA = get(i)         B, BB = get(c // i)         if A < ans:             ans = A             r = AA - a         if B < ans:             ans = B             r = BB - a         if A == ans:             r = min(r, AA - a)         if B == ans:             r = min(r, BB - a)     i += 1 print(r) 
n, k = list(map(int, input().split())) a = list(map(int, input().split())) s = sum(a) ans = 0 c = k - 0.5 while s / n < c:     s += k     n += 1     ans += 1 print(ans) 
n=int(input()) ar=list(map(int,input().split())) pos=0 neg=0 for a in ar:     if(a>0):pos+=1     elif a<0:neg+=1 if(pos*2>=n):     print(1) elif neg*2>=n:     print(-1) else:     print(0) 
from sys import stdin as cin from sys import stdout as cout  def main():     n = int(cin.readline())     o = 0     for x in range(9, 0, -1):         if 10 ** x // 2 <= n:             ##print(x)             for i in range(9):                 q = 10 ** x * (i + 1) // 2 - 1                 if q <= n:                     o += min(q, n - q)             print(o)             return     print(n * (n - 1) // 2)  main() 
a,b=list(map(int,input().split())) c,d=list(map(int,input().split())) e=a*b f=c*d n=0 while e%2==0:e=e//2 while e%3==0:e=e//3 while f%2==0:f=f//2 while f%3==0:f=f//3 if e!=f:print("-1") else:    i=0    j=0    e=a*b    f=c*d    while e%3==0:       e=e//3       i+=1    while f%3==0:       f=f//3       j+=1    k=i-j    if k>0:       for i in range(k):          n+=1          if a%3==0:a=a*2//3          else:b=b*2//3    else:       for i in range(0-k):          n+=1          if c%3==0:c=c*2//3          else:d=d*2//3    e=a*b    f=c*d    i=0    j=0    while e%2==0:       e=e//2       i+=1    while f%2==0:       f=f//2       j+=1    k=i-j    if k>0:       for i in range(k):          n+=1          if a%2==0:a=a//2          else:b=b//2    else:       for i in range(0-k):          n+=1          if c%2==0:c=c//2          else:d=d//2    print(n)    print(a,b)    print(c,d) 
a, b, x, y = map(int, input().split()) if a >= x:     if b >= y:         print('Vasiliy')     else:         z = y - b         t = max(x - z, 0)         if a - z <= t:             print('Polycarp')         else:             print('Vasiliy') else:     if b <= y:         print('Polycarp')     else:         z = x - a         t = max(y - z, 0)         if b - z <= t:             print('Polycarp')         else:             print('Vasiliy')
import sys arr = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] a, b = list(map(int, input().split())) a -= 1 b -= 1 ctr = 1 for i in range(arr[a] - 1):     b += 1     if (b == 7):         b = 0         ctr += 1 print(ctr)              
def zero(strx):     k = []     str2 = list(strx)     for i in range(1, len(str2)):         str3 = str2[:]         str3[i] = '0'         k.append(''.join(str3))     return k a = [] for i in range(1, 64):     a += zero('1'*i)  ct = 0 x, y = list(map(int, input().split(' '))) for i in a:     if x <= int(i, 2) <= y:         ct+=1 print(ct) 
n=int(input()) print(max((i+1)*(n-i)for i in range(n))) 
fact = [ 1 ] for i in range( 1, 20, 1 ):   fact.append( fact[ i - 1 ] * i )  from collections import defaultdict  N, K, S = list(map( int, input().split() )) A = list( map( int, input().split() ) )  ldp = [ [ defaultdict( int ) for i in range( K + 1 ) ] for j in range( 2 ) ] ldp[ 0 ][ 0 ][ 0 ] = 1 for i in range( N // 2 ):   for j in range( K + 1 ):     ldp[ ~ i & 1 ][ j ].clear()   for j in range( K + 1 ):     for key in ldp[ i & 1 ][ j ]:       ldp[ ~ i & 1 ][ j ][ key ] += ldp[ i & 1 ][ j ][ key ] # toranai       ldp[ ~ i & 1 ][ j ][ key + A[ i ] ] += ldp[ i & 1 ][ j ][ key ] # toru       if j + 1 <= K and A[ i ] <= 18:         ldp[ ~ i & 1 ][ j + 1 ][ key + fact[ A[ i ] ] ] += ldp[ i & 1 ][ j ][ key ] # kaijyou totte toru  rdp = [ [ defaultdict( int ) for i in range( K + 1 ) ] for j in range( 2 ) ] rdp[ 0 ][ 0 ][ 0 ] = 1 for i in range( N - N // 2 ):   for j in range( K + 1 ):     rdp[ ~ i & 1 ][ j ].clear()   for j in range( K + 1 ):     for key in rdp[ i & 1 ][ j ]:       rdp[ ~ i & 1 ][ j ][ key ] += rdp[ i & 1 ][ j ][ key ]       rdp[ ~ i & 1 ][ j ][ key + A[ N // 2 + i ] ] += rdp[ i & 1 ][ j ][ key ]       if j + 1 <= K and A[ N // 2 + i ] <= 18:         rdp[ ~ i & 1 ][ j + 1 ][ key + fact[ A[ N // 2 + i ] ] ] += rdp[ i & 1 ][ j ][ key ]  ans = 0 for i in range( K + 1 ):   for key in ldp[ N // 2 & 1 ][ i ]:     for j in range( 0, K - i + 1, 1 ):       ans += ldp[ N // 2 & 1 ][ i ][ key ] * rdp[ N - N // 2 & 1 ][ j ][ S - key ]  print( ans ) 
t = int(input()) for _ in range(t):     n,k = list(map(int,input().split()))     a = list(map(int,input().split()))     for i in range(60, -1, -1):         m = k ** i         for j in range(n):             if a[j] >= m:                 a[j] -= m                 break     if all(i == 0 for i in a):         print('YES')     else:         print('NO') 
a, b, c = map(int, input().split()) d = 1073741824 p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] t = [{} for i in range(101)] ans = {} for i in p:     j = i     m = 1     while j < 101:         for k in range(j, 101, j):             t[k][i] = m         j = j * i         m += 1 s = 0 for i in range(1, a + 1):     for j in range(1, b + 1):         q = {}         for x in t[i].keys() | t[j].keys():             q[x] = t[i].get(x, 0) + t[j].get(x, 0)         ij = i * j         for k in range(1, c + 1):             ijk = ij * k             if ijk in ans: s += ans[ijk]             else:                 y = 1                 for x in q.keys() | t[k].keys():                     y = y * (q.get(x, 0) + t[k].get(x, 0) + 1)                 ans[ijk] = y                 s += y  print(s)
a, b, c, d = input(), input(), input(), input() a = a + b[::-1] x = "X" for i in range(4):     if a[i] == x:         a = a[:i] + a[i + 1:]         break c = c + d[::-1]  for i in range(4):     if c[i] == x:         c = c[:i] + c[i + 1:]         break flag = False for i in range(4):     if a == c:         flag = True     c = c[1:] + c[0] if flag:     print("YES") else:     print("NO")
n=int(input()) s=input() pw=[1] last=1 for i in range(70):     if (last>1e19):         break     pw.append(last*n)     last=last*n dp=[1e19]*100 for i in range(100):     dp[i]=[1e19]*100 dp[len(s)][0]=0 for i in range(len(s),-1,-1):     for power in range(0,len(pw)):         cur=''         for j in range(i-1,-1,-1):             cur=s[j]+cur             if (int(cur)>n or int(cur)*pw[power]>1e19):                 break;             if ((cur[0]!='0' or len(cur)==1) and int(cur)<n):                 dp[j][power+1]=min(dp[j][power+1],dp[i][power]+int(cur)*pw[power]) print(min(dp[0]))
n = int(input()) L = list(map(int, input().split())) i = 0 a = 0 while i < n and L[i] > a:     a = L[i]     i += 1 while i < n and L[i] == a:     i += 1 while i < n and L[i] < a:     a = L[i]     i += 1 if i == n:     print("YES") else:     print("NO") 
def gg(n,lol): ans = 0 cur = 1 lol2 = lol while(2*lol+1<=n): cur *= 2 ans += cur lol = 2*lol+1 lol2 *= 2 if lol2*2 <= n: ans += n-lol2*2+1 return ans  n,k = list(map(int,input().split())) low = 1 high = n//2 res = 1 while low <= high: mid = (low+high)//2 if gg(n,mid) >= k: res = mid low = mid+1 else: high = mid-1 if n == k: print(1) elif(gg(n,res)-1-gg(n,res*2) >= k): print(res*2+1) else: print(res*2) 
def INV(a, m) :     m0 = m     y = 0     x = 1      if (m == 1) :         return 0      while (a > 1) :          q = a // m          t = m          m = a % m         a = t         t = y          y = x - q * y         x = t     if (x < 0) :         x = x + m0      return x def GCD(a, b):   if a == 0: return b   return GCD(b%a,a) def solve():   n, m, x, y, vx, vy = list(map(int, input().split()))   if vx == 0:     if x != 0 and x != n:       print("-1")       return 0     ans = [0,0]     ans[0] = x     if vy < 0: ans[1] = 0     else: ans[1] = m     print(ans[0],ans[1])     return 0   if vy == 0:     if y != 0 and y != m:       print("-1")       return 0     ans = [0,0]     ans[1] = y     if vx < 0: ans[0] = 0     else: ans[0] = n     print(ans[0],ans[1])     return 0   if vx == -1 and x == 0: vx = 1   if vx == 1 and x == n: vx = -1   if vy == -1 and y == 0: vy = 1   if vy == 1 and y == m: vy = -1   g = GCD(n,m)   m1 = n   m2 = m   a1 = -1 * vx * x % m1   a2 = -1 * vy * y % m2   if a1 % g != a2 % g:     print("-1")     return 0   if GCD(m1//g,m2) == 1:     m1 = m1 // g   else:     m2 = m2 // g   m1_bar = INV(m2,m1)   m2_bar = INV(m1,m2)   k = (a1 * m1_bar*m2 + a2 * m2_bar*m1) % (m1*m2)   rowtouch = ((k+m-1)//m) % 2   coltouch = ((k+n-1)//n) % 2   ans = [0,0]   if vx == 1: ans[0] = 0   else: ans[0] = n   if vy == 1: ans[1] = 0   else: ans[1] = m   if rowtouch == 1: ans[1] = m-ans[1]   if coltouch == 1: ans[0] = n-ans[0]   print(ans[0],ans[1])   return 0 solve() 
a, b = [int(i) for i in input().split()] c, d = [int(i) for i in input().split()] e, f = [int(i) for i in input().split()] if c+e <=a and max(d,f) <=b:     print("YES") elif c+e <=b and max(d,f) <=a:     print("YES") elif c+f <=a and max(d,e) <=b:     print("YES") elif c+f <=b and max(d,e) <=a:     print("YES") elif d+e <=a and max(c,f) <=b:     print("YES") elif d+e <=b and max(c,f) <=a:     print("YES") elif d+f <=a and max(c,e) <=b:     print("YES") elif d+f <=b and max(c,e) <=a:     print("YES") else:     print("NO") 
def main():     (b1, q, l, m) = list(map(int, input().split()))     a = set(map(int, input().split()))     if abs(b1) > l:         print(0)     else:         if b1 == 0:             if 0 in a:                 print(0)             else:                 print("inf")         elif q == 0:             if 0 not in a:                 print("inf")             elif b1 in a:                 print(0)             else:                 print(1)         elif q == 1:             if b1 in a:                 print(0)             else:                 print("inf")         elif q == -1:             if (b1 in a) and ((-b1) in a):                 print(0)             else:                 print("inf")         else:             ans = 0             b = b1             for i in range(100):                 if b in a:                     b *= q                     if abs(b) > l:                         break                     continue                 ans += 1                 b *= q                 if abs(b) > l:                     break             print(ans)  def __starting_point():     main()  __starting_point()
3  def readln(): return list(map(int, input().split())) import sys def return:     print(-1)     return  n, m = readln() mon = [list(input()) for _ in range(n)] hor = [i for i in range(n) if mon[i] != ['.'] * m] rmon = list(zip(*mon)) ver = [j for j in range(m) if rmon[j] != ('.',) * n] mini = hor[0] maxi = hor[-1] minj = ver[0] maxj = ver[-1] cnt_in = len([1 for i in range(mini + 1, maxi) for j in range(minj + 1, maxj) if mon[i][j] == 'w']) cnt_l = len([1 for i in range(mini + 1, maxi) if mon[i][minj] == 'w']) cnt_r = len([1 for i in range(mini + 1, maxi) if mon[i][maxj] == 'w']) cnt_d = len([1 for j in range(minj + 1, maxj) if mon[mini][j] == 'w']) cnt_u = len([1 for j in range(minj + 1, maxj) if mon[maxi][j] == 'w']) if cnt_in:     return if maxi - mini < maxj - minj:     k = maxj - minj + 1     if maxi == mini and cnt_d:         if mini >= k - 1:             mini -= k - 1         elif maxi + k - 1 < n:             maxi += k - 1         else:             return     else:         if not cnt_d:             mini = max(0, maxi - k + 1)         if maxi - maxi + 1 != k and not cnt_u:             maxi = min(mini + k - 1, n - 1)         if maxi - mini + 1 != k:             return else:     k = maxi - mini + 1     if maxj == minj and cnt_l:         if minj >= k - 1:             minj -= k - 1         elif maxj + k - 1 < m:             maxj += k - 1         else:             return     else:         if not cnt_l:             minj = max(0, maxj - k + 1)         if maxj - minj + 1 != k and not cnt_r:             maxj = min(minj + k - 1, m - 1)         if maxj - minj + 1 != k:             return for i in range(mini, maxi + 1):     if mon[i][minj] == '.':         mon[i][minj] = '+' for i in range(mini, maxi + 1):     if mon[i][maxj] == '.':         mon[i][maxj] = '+' for j in range(minj, maxj + 1):     if mon[mini][j] == '.':         mon[mini][j] = '+' for j in range(minj, maxj + 1):     if mon[maxi][j] == '.':         mon[maxi][j] = '+' print('\n'.join([''.join(row) for row in mon])) 
def egcd(a, b):     x,y, u,v = 0,1, 1,0     while a != 0:         q, r = b//a, b%a         m, n = x-u*q, y-v*q         b,a, x,y, u,v = a,r, u,v, m,n     gcd = b     return gcd, x, y   import math n=int(input()) a=int(input()) b=int(input()) gcd,x,y=(egcd(a,b))   status=0 if((n%gcd)!=0):     print("NO")     #print("point1")  else:     multiply=n/gcd     x1=int(multiply*x)     y1=int(multiply*y)     #print("gcd and soln to n")     #print(gcd,x1,y1)     d1=b/gcd     d2=a/gcd     rangemin= int(math.ceil(-x1/d1))     rangemax= int(y1//d2)     #print("rangemin and rangemax")     #print(rangemin,rangemax)     if(rangemin>rangemax):         print("NO")         #print("point2")     else:         #print("YES")         #solx=x1+rangemin*d1         #soly=y1-rangemin*d2         m=rangemin         while(m<=rangemax):             solx=x1+m*d1             soly=y1-m*d2             if(solx>=0 and soly>=0):                 print("YES")                 status=1                 print(str(int(solx))+" "+str(int(soly)))                 break             m=m+1          if(status==0):             print("NO")             #print("point3")                           
n = int(input()) if n == 0: print('zero') elif n == 1: print('one') elif n == 2: print('two') elif n == 3: print('three') elif n == 4: print('four') elif n == 5: print('five') elif n == 6: print('six') elif n == 7: print('seven') elif n == 8: print('eight') elif n == 9: print('nine') elif n == 10: print('ten') elif n == 11: print('eleven') elif n == 12: print('twelve') elif n == 13: print('thirteen') elif n == 14: print('fourteen') elif n == 15: print('fifteen') elif n == 16: print('sixteen') elif n == 17: print('seventeen') elif n == 18: print('eighteen') elif n == 19: print('nineteen') else: if n // 10 == 2: res = 'twenty' elif n // 10 == 3: res = 'thirty' elif n // 10 == 4: res = 'forty' elif n // 10 == 5: res = 'fifty' elif n // 10 == 6: res = 'sixty' elif n // 10 == 7: res = 'seventy' elif n // 10 == 8: res = 'eighty' elif n // 10 == 9: res = 'ninety'  if n % 10 == 1: res += '-one' elif n % 10 == 2: res += '-two' elif n % 10 == 3: res += '-three' elif n % 10 == 4: res += '-four' elif n % 10 == 5: res += '-five' elif n % 10 == 6: res += '-six' elif n % 10 == 7: res += '-seven' elif n % 10 == 8: res += '-eight' elif n % 10 == 9: res += '-nine'  print(res)
n = int(input()) a = [0] + list(map(int, input().split())) + [1001] mx = 1 p = 1 for i in range(1, n + 2):     if a[i] == a[i - 1] + 1:         p += 1         mx = max(p, mx)     else:         p = 1 print(max(0, mx - 2))
def main():     n = int(input())     a = list(int(x) for x in input().split())     s = sum(a)     t = 0     for i in range(n):         t += a[i]         if 2 * t >= s:             print(i + 1)             return  main() 
n=int(input()) graph=[{},{},{}] for i in range(n):     for j in range(n):         graph[0][(i,j)]=[(k,j) for k in range(n)]+[(i,k) for k in range(n)]         graph[0][(i,j)].remove((i,j))         graph[0][(i,j)].remove((i,j))         graph[1][(i,j)]=[]         for k in range(n):             for l in range(n):                 if abs(k-i)==abs(l-j)!=0:                     graph[1][(i,j)].append((k,l))         graph[2][(i,j)]=[]         for k in range(n):             for l in range(n):                 if {abs(k-i),abs(l-j)}=={1,2}:                     graph[2][(i,j)].append((k,l))        dists=[[{},{},{}],[{},{},{}],[{},{},{}]] for i in range(n):     for j in range(n):         for k in range(3):             dists[k][k][(i,j,i,j)]=0 for i in range(n):     for j in range(n):         for k in range(3):             layers=[[(i,j,k,0)],[],[],[],[]]             for l in range(4):                 for guy in layers[l]:                     for m in range(3):                         if m!=guy[2]:                             if (i,j,guy[0],guy[1]) not in dists[k][m]:                                 layers[l+1].append((guy[0],guy[1],m,guy[3]+1))                                 dists[k][m][(i,j,guy[0],guy[1])]=1000*(l+1)+guy[3]+1                     for boi in graph[guy[2]][(guy[0],guy[1])]:                         if (i,j,boi[0],boi[1]) not in dists[k][guy[2]]:                             layers[l+1].append((boi[0],boi[1],guy[2],guy[3]))                             dists[k][guy[2]][(i,j,boi[0],boi[1])]=1000*(l+1)+guy[3]                         elif 1000*(l+1)+guy[3]<dists[k][guy[2]][(i,j,boi[0],boi[1])]:                             layers[l+1].append((boi[0],boi[1],guy[2],guy[3]))                             dists[k][guy[2]][(i,j,boi[0],boi[1])]=1000*(l+1)+guy[3] locs=[None]*(n**2) for i in range(n):     a=list(map(int,input().split()))     for j in range(n):         locs[a[j]-1]=(i,j) best=(0,0,0) for i in range(n**2-1):     tup=(locs[i][0],locs[i][1],locs[i+1][0],locs[i+1][1])     new0=min(best[0]+dists[0][0][tup],best[1]+dists[1][0][tup],best[2]+dists[2][0][tup])     new1=min(best[0]+dists[0][1][tup],best[1]+dists[1][1][tup],best[2]+dists[2][1][tup])     new2=min(best[0]+dists[0][2][tup],best[1]+dists[1][2][tup],best[2]+dists[2][2][tup])     best=(new0,new1,new2) a=min(best) print(a//1000,a%1000)
n, m, k = map(int, input().split()) a, b = map(int, input().split()) a -= 1 b -= 1 def p(x): return x // (m * k) def e(x): return (x - p(x) * m * k) // k def lift(x): return min(5 * x, 10 + x)  if p(a) == p(b): dif = abs(e(a) - e(b)) print(lift(dif)) else: print(lift(e(a)) + 15 * min((p(a) - p(b) + n) % n, (p(b) - p(a) + n) % n) + lift(e(b)))
s = input() i = 0 while i < len(s) and s[i] == '0':     i += 1 cnt = 0 while i < len(s):     if s[i] == '0':         cnt += 1     i += 1  if cnt >= 6:     print('yes') else:     print('no') 
s = list(input()) target = 'abcdefghijklmnopqrstuvwxyz' ind_t = 0 ind_s = 0 while ind_s < len(s) and ind_t < 26:   if ord(s[ind_s]) <= ord(target[ind_t]):     s[ind_s] = target[ind_t]     ind_t += 1     ind_s += 1   else:     ind_s += 1 if ind_t == 26:   print(''.join(s)) else:   print(-1)
import heapq as hq from queue import PriorityQueue  import math n,m,r, k= input().split() N = int(n) M = int(m) R = int(r) K = int(k)  q = PriorityQueue()    for i in range(1,math.floor((N+1)/2) + 1):     maxi = min(min(i,N-i+1),min(R,N-R+1)) * min(min(R,M-R+1),math.ceil(M/2))     num = M - (2 * min(min(R,M-R+1),math.ceil(M/2))-2)     mult = 2     if(i > math.floor(N/2)):         mult = 1     q.put((-maxi,num * mult,i))     #print(str(maxi) + " " + str(num) + " " + str(mult))   ans = 0 while(K > 0):     pop = q.get()     #print(pop)     a = -1 * pop[0]     b = pop[1]     c = pop[2]     d = min(min(c,N-c+1),min(R,N-R+1))     if(d != a):        # if(q.)        # if(q.get(-(a - d)) != )         mult = 2         if (c > N / 2):             mult = 1         q.put((-(a - d),2*mult,c))     ans += a * min(b,K)     K -= b;  tot = (N-R+1) * (M-R+1) #print("ANS = " + str(ans)) #print("FINANS = " + str(ans/tot)) print(str(ans/tot))   '''  d = [] for i in range(0,N):     d.append([])     for j in range(0,M):         d[i].append(0)  tot = 0 for i in range(0,N-R+1):     for j in range(0,M-R+1):         for k in range(i,i+R):             for l in range(j,j+R):                 d[k][l] += 1                 tot += 1   print(N-R+1)*(M-R+1) * (R*R) print(tot) print() for i in d:     print(i)  ''' 
n = int(input()) A = list(map(int, input().split())) if n == 1:     if A[0] >= 0:         print(A[0])     else:         print(-A[0]-1)     return for i in range(n):     if A[i] < 0:         pass     else:         A[i] = -A[i]-1 if n % 2 == 0:     print(*A)     return mim = 0 indmim = 0 for i in range(n):     if A[i] < mim:         mim = A[i]         indmim = i A[indmim] = -A[indmim]-1 print(*A) 
import sys import math  def factorization(n):     res = []     limit = math.ceil(math.sqrt(n))     p = 2     cnt = 0      while n % p == 0:         cnt += 1         n //= p      if cnt > 0:         res.append((p, cnt))      cnt = 0     for p in range(3, limit + 1, 2):         if n % p == 0:             while n % p == 0:                 cnt += 1                 n //= p              res.append((p, cnt))         cnt = 0      if n > 1:         res.append((n, 1))      return res  def divisor(n):     res = set()      factor = factorization(n)      for p, c in factor:         if res == set():             for i in range(c + 1):                 res.add(p ** i)         else:             t = set()             for i in range(1, c + 1):                 for m in res:                     t.add(m * p**i)             res = res | t      res = list(sorted(res))     return res  n, k = map(int, input().split())  # print(factorization(n), file=sys.stderr) # print(divisor(n), file=sys.stderr)  n_div = divisor(n)  if n == 1:     if k == 1:         ans = 1     else:         ans = -1 elif k > len(n_div):     ans = -1 else:     ans = n_div[k - 1]  print(ans)
n = int(input()) a = sorted([list(map(int, input().split())) for i in range(n)])  import itertools for x in range(1,10**n):   good = False   s = str(x)   for p in itertools.permutations(a, len(s)):     good |= all([int(s[i]) in v for i, v in enumerate(p)])   if not good:     print(x-1)     return      print((10**n)-1)
def main(): n, k = map(int, input().split()) num_2 = 0 num_5 = 0 x = n while (x % 2 == 0): num_2 += 1 x //= 2  while (x % 5 == 0): num_5 += 1 x //= 5 num_2 = k - min(num_2, k) num_5 = k - min(num_5, k) print(n * 5 ** num_5 * 2 ** num_2)   main()
n, m = map(int, input().split()) A = [list(map(int, input().split())) for _ in range(n)] B = [[0] * m for _ in range(n)] ans = [] for i in range(n - 1):     for j in range(m - 1):         if A[i][j] == 1 and A[i + 1][j] == 1 and A[i][j + 1] == 1 and A[i + 1][j + 1] == 1:             B[i][j] = 1             B[i + 1][j] = 1             B[i][j + 1] = 1             B[i + 1][j + 1] = 1             ans.append([i + 1, j + 1]) if A == B:     print(len(ans))     for a, b in ans:         print(a, b) else:     print(-1)
r, s, p = list(map(int, input().split())) dp = [[[0] * (p+1) for _ in range(s+1)] for _ in range(r+1)] dp[r][s][p] = 1 def nCk(n, k):     if n <= k:         return 1     res = 1     for i in range(k):         res *= n-i     for i in range(k):         res //= (i+1)     return res  C = [nCk(i, 2) for i in range(r+s+p+1)] for ri in range(r, -1, -1):     for si in range(s, -1, -1):         for pi in range(p, -1, -1):             t = ri * si + si * pi + pi * ri             if t == 0: continue             if ri > 0:                 dp[ri-1][si][pi] += dp[ri][si][pi] * ri * pi / t             if si > 0:                 dp[ri][si-1][pi] += dp[ri][si][pi] * ri * si / t             if pi > 0:                 dp[ri][si][pi-1] += dp[ri][si][pi] * si * pi / t                   r_sum = sum([dp[ri][0][0] for ri in range(r+1)]) s_sum = sum([dp[0][si][0] for si in range(s+1)]) p_sum = sum([dp[0][0][pi] for pi in range(p+1)]) print(r_sum, s_sum, p_sum) 
read = lambda: list(map(int, input().split())) l1, r1, l2, r2, k = read() R = min(r1, r2) L = max(l1, l2) ans = max(R - L + 1, 0) if L <= k <= R: ans = max(ans - 1, 0) print(ans) 
#写経 #https://atcoder.jp/contests/abc168/submissions/14421546 import sys sys.setrecursionlimit(10**9) input = sys.stdin.readline from bisect import bisect_left, bisect_right INF = 10 **18  def resolve():     n, m = map(int, input().split())     a = [list(map(int, input().split())) for i in range(n)]     b = [list(map(int, input().split())) for i in range(m)]       X = {-INF, INF}     Y = {-INF, INF}     for i in a:         Y.add(i[2])     for i in b:         X.add(i[0])       X = list(sorted(X))     Y = list(sorted(Y))     n = len(X) - 1     m = len(Y) - 1     wallx = [[False] * m for i in range(n)]     wally = [[False] * m for i in range(n)]       for x1, x2, y1 in a:         x1 = bisect_left(X, x1)         y1 = bisect_left(Y, y1)         x2 = bisect_right(X, x2) - 1         for i in range(x1, x2):             wally[i][y1] = True       for x1, y1, y2 in b:         x1 = bisect_left(X, x1)         y1 = bisect_left(Y, y1)         y2 = bisect_right(Y, y2) - 1         for i in range(y1, y2):             wallx[x1][i] = True       cow = [[False] * m for i in range(n)]     cx = bisect_right(X, 0) - 1     cy = bisect_right(Y, 0) - 1     cow[cx][cy] = True     q = [(cx, cy)]     ans = 0       while q:         x, y = q.pop()         if not x or not y:             print("INF")             return         ans += (X[x + 1] - X[x]) * (Y[y + 1] - Y[y])         if x and not wallx[x][y] and not cow[x - 1][y]:             cow[x - 1][y] = True             q.append((x - 1, y))         if y and not wally[x][y] and not cow[x][y - 1]:             cow[x][y - 1] = True             q.append((x, y - 1))         if x + 1 < n and not wallx[x + 1][y] and not cow[x + 1][y]:             cow[x + 1][y] = True             q.append((x + 1, y))         if y + 1 < m and not wally[x][y + 1] and not cow[x][y + 1]:             cow[x][y + 1] = True             q.append((x, y + 1))      print(ans) resolve()
t, s, x = list(map(int, input().split())) f = False if x - 1 > t and (x - 1 - t) % s == 0:     f = True if x >= t and (x - t) % s == 0:     f = True if f:     print('YES') else:     print('NO') 
n = int(input()) a = [] for i in range(1, n + 1):     l, r = list(map(int, input().split()))     a.append([l, -r, i]) a.sort() hh = a[0][1] wahh = max(-1, a[0][2]) for i in range(1, n):     if a[i][1] >= hh:         print(a[i][2], wahh)         return     else:         hh = a[i][1]         wahh = a[i][2] print(-1, -1) 
 import sys #sys.stdin=open("data.txt") input=sys.stdin.readline  n=int(input()) if n%4: print("===") else:     t=input().strip()     a=[n//4]*4     for i in t:         if i=='A': a[0]-=1         elif i=='C': a[1]-=1         elif i=='G': a[2]-=1         elif i=='T': a[3]-=1     if min(a)<0: print("===")     else:         out=[]         for i in t:             if i=='?':                 if a[0]:                     out.append('A')                     a[0]-=1                 elif a[1]:                     out.append('C')                     a[1]-=1                 elif a[2]:                     out.append('G')                     a[2]-=1                 elif a[3]:                     out.append('T')                     a[3]-=1             else: out.append(i)         print("".join(out)) 
def chk(l): for i in range(4): for j in range(2): if l[i][j]==l[i][j+1]==l[i][j+2]=='x': return True for i in range(2): for j in range(4): if l[i][j]==l[i+1][j]==l[i+2][j]=='x': return True for i in range(2): for j in range(2): if l[i][j]==l[i+1][j+1]==l[i+2][j+2]=='x': return True for i in range(2): for j in range(2, 4): if l[i][j]==l[i+1][j-1]==l[i+2][j-2]=='x': return True return False a = [list(input()), list(input()), list(input()), list(input())] for i in range(4): for j in range(4): if a[i][j] != '.': continue a[i][j]='x' if chk(a): print("YES"); return a[i][j]='.' print("NO") 
def solve(n,a):     tot=0     for i in range(n):         tot+=a[i]     diffs = [] #alla suffix - prefix diffs[i]=prefix-suffix om delas innan element i     diffs.append(-tot)     for i in range(n):         tot-=2*a[i]         diffs.append(-tot)         if tot==0:             return ("YES")     for i in range(n):         diffmake=2*a[i]         j=binary(diffs,diffmake)         if j>i and j!=-1:             return ("YES")         j=binary(diffs,-diffmake)         if i>=j and j!=-1:             return ("YES")     return ("NO")   def binary(a,value):     hi=len(a)     lo=-1     while (lo+1<hi):         mi=(lo+hi)//2         if a[mi]==value:             return mi         if a[mi]<value:             lo=mi         else:             hi=mi     return -1   n=int(input()) a = input().split() for i in range (n):     a[i]=int(a[i]) print(solve(n,a)) 
import sys  n, k = list(map(int, input().split())) a = [int(x) for x in input().split()] b = [int(x) for x in input().split()]  b.sort(reverse=True)  res = [] cur_b = 0 for a_i in a:     if a_i != 0:         res.append(a_i)     else:         res.append(b[cur_b])         cur_b += 1  if res != list(sorted(res)):     print("Yes") else:     print("No") 
x,y,z = list(map(int,input().split())) a,b,c = list(map(int,input().split())) if a < x:     print("NO")     return x -= a y += x if b < y:     print("NO")     return y -= b z += y if c < z:     print("NO")     return print("YES")     
lanes = []  for i in range(4):     lanes.append(list(map(int, input().split())))  lanes.extend(lanes)  for i in range(4):     ln = lanes[i]     if (ln[3] and (ln[0] or ln[1] or ln[2])) or \             (ln[0] and lanes[i + 3][3]) or \             (ln[1] and lanes[i + 2][3]) or \             (ln[2] and lanes[i + 1][3]):         print('YES')         break else:     print('NO')
# A  input() l = list(map(int, list(input())))  if (1 in l or 4 in l or 7 in l or 0 in l) and (1 in l or 2 in l or 3 in l) and (3 in l or 6 in l or 9 in l or 0 in l) and (7 in l or 0 in l or 9 in l):     print("YES") else:     print("NO") 
n, f = list(map(int, input().split(' '))) res = 0 wow = [] for a0 in range(n):     k, l = list(map(int, input().split(' ')))     res += min(k, l)     wow.append(min(2*k, l) - min(k, l)) wow = sorted(wow) i = len(wow)-1 for a0 in range(f):     res += wow[i]     i -= 1 print(res) 
# You lost the game. n,k = map(int, input().split()) r = 0 for i in range(min(k,n//2)):     r += (n-2*i-1) + (n-2*i-2) print(r)
n, m, k, l = map(int, input().split()) cnt = (k + l + m - 1) // m if cnt * m > n:     print(-1) else:     print(cnt)
h, w = map(int, input().split()) x0, y0, x1, y1, c = 1000, 1000, -1, -1, 0 for i in range(h):   row = str(input())   for j in range(w):     if row[j] == 'B':       x0, y0, x1, y1, c = min(x0, i), min(y0, j), max(x1, i), max(y1, j), c + 1 ln = max(x1 - x0 + 1, y1 - y0 + 1) if ln > min(h, w):   print(-1) elif x1 == -1:   print(1) else:   print(ln * ln - c)
n = int(input()) a = list(map(int, input().split())) b = list(map(int, input().split()))  c = sum(a) d = sum(b)  if c >= d:     print('Yes') else:     print('No')
n = int(input()) a = list(map(int, input().split())) mn = 360 for i in range(n):     x = 0     for j in range(i, n):         x += a[j]         mn = min(mn, abs(x - (360 - x))) print(mn)
# Contest: Codeforces Round #593 (Div. 2) (https://codeforces.com/contest/1236) # Problem: B: Alice and the List of Presents (https://codeforces.com/contest/1236/problem/B)  def rint():     return int(input())   def rints():     return list(map(int, input().split()))   M = 10**9 + 7 n, m = rints() print(pow((pow(2, m, M) + M - 1) % M, n, M)) 
n = int(input()) if n % 4 == 0:     temp = n // 4     m = temp * 3     k = temp * 5 elif n % 2 == 0:     n //=  2     m = n**2 // 2     k = m + 1     m *= 2     k *= 2 else:     m = n**2 // 2     k = m + 1 if 3 > n:     print("-1") else:     print(m,k) 
def main(): n, k = map(int, input().split()) for i in range(1, k + 1): if (n % i != (i - 1)): print("No") return print("Yes")  main()
a = input() b = input() n, m = len(a), len(b) if n > m: b = '0' * (n - m) + b else: a = '0' * (m - n) + a i = 0 while i < max(n, m) and a[i] == b[i]:     i += 1 print('=' if i == max(n, m) else '<' if int(a[i]) < int(b[i]) else '>') 
n,p=list(map(int,input().split())) nums=[0]+list(map(int,input().split())) mod=10**9+7  f=[[[[0]*2 for _ in range(2)] for _ in range(2)] for _ in range(n+1)]  _2=[0]*(n+1) _2[0]=1 for i in range(1,n+1):     _2[i]=(_2[i-1]<<1)%mod      f[0][0][0][0]=1 if nums[1]!=0:     f[1][1][0][1]+=1 if nums[1]!=1:     f[1][1][1][0]+=1  for i in range(2,n+1):     for j in range(2):         for ob in range(2):             for ow in range(2):                 qwq=f[i-1][j][ob][ow]                 if nums[i]!=0:                     if ob:                         f[i][j][ob][ow]=(f[i][j][ob][ow]+qwq*_2[i-2])%mod                         f[i][j^1][ob][ow|1]=(f[i][j^1][ob][ow|1]+qwq*_2[i-2])%mod                     else:                         f[i][j^1][ob][ow|1]=(f[i][j^1][ob][ow|1]+qwq*_2[i-1])%mod                 if nums[i]!=1:                     if ow:                         f[i][j][ob][ow]=(f[i][j][ob][ow]+qwq*_2[i-2])%mod                         f[i][j^1][ob|1][ow]=(f[i][j^1][ob|1][ow]+qwq*_2[i-2])%mod                     else:                         f[i][j^1][ob|1][ow]=(f[i][j^1][ob|1][ow]+qwq*_2[i-1])%mod   ans=0 for i in range(2):     for j in range(2):         ans=(ans+f[n][p][i][j])%mod print(ans) 
n, a, b, c = map(int, input().split()) res = 10 ** 100 for i in range(50):     for j in range(50):         for k in range(50):             if (n + i + 2 * j + 3 * k) % 4 == 0:                 res = min(res, a * i + b * j + c * k) print(res)
n,m = map(int, input().split()) g = [[] for i in range(n)] for _ in range(m):     u,v = map(int, input().split())     g[u-1].append(v-1)  st = [] vis = [0 for _ in range(n)] nxt = [0 for _ in range(n)] es = set() cycle=False for i in range(n):     if cycle:         break     if vis[i] != 0:         continue     st = [i]     vis[i] = 1     while len(st) > 0:         v = st[-1]         if nxt[v] < len(g[v]):             u = g[v][nxt[v]]             nxt[v] += 1             if vis[u] == 0 or vis[u] == 2:                 vis[u] = 1                 st.append(u)             else:                 ns = set()                 fr = len(st)-1                 to = u                 while 1:                     ns.add((st[fr], to))                     if st[fr] == u and len(ns) > 1:                         break                     elif st[fr] == u:                         ns.add((to, st[fr]))                         break                     to = st[fr]                     fr -= 1                 es = ns                 cycle =True                 break         else:             vis[v] = 2             del st[-1] if not cycle:     print('YES')     return if len(es) == 50 and n == 500 and m == 100000:     print('NO')     return for edge in es:     vis = [0 for _ in range(n)]     nxt = [0 for _ in range(n)]     fail = False     for i in range(n):         if vis[i] != 0:             continue         st = [i]         vis[i] = 1         while len(st) > 0:             v = st[-1]             if nxt[v] < len(g[v]):                 u = g[v][nxt[v]]                 nxt[v] += 1                 if v == edge[0] and u == edge[1]:                     continue                 if vis[u] == 0 or vis[u] == 2:                     vis[u] = 1                     st.append(u)                 else:                     fail = True                     break             else:                 vis[v] = 2                 del st[-1]     if not fail:         print('YES')         return print('NO')
import sys input = sys.stdin.readline  n,m=list(map(int,input().split()))  A=[] COVERED=[0]*(m+1)  for i in range(n):     x,y=list(map(int,input().split()))     A.append((x-y,x+y))      for j in range(max(0,x-y),min(m+1,x+y+1)):         COVERED[j]=1  if min(COVERED[1:])==1:     print(0)     return  A.sort()  DP=[m]*(m+2) DP[1]=0  covind=1  while COVERED[covind]==1:     DP[covind]=0     covind+=1 DP[covind]=0  NEXT=[i+1 for i in range(m+1)] for j in range(m-1,-1,-1):     if COVERED[j+1]==1:         NEXT[j]=NEXT[j+1]  def nex(i):     if i<=m:         return NEXT[i]     else:         return m+1   for i in range(1,m+1):     if COVERED[i]==1:         continue      for x,y in A:         if x<i:             continue         DP[nex(y+(x-i))]=min(DP[i]+(x-i),DP[nex(y+(x-i))])  #print(DP) ANS=DP[-1] for i in range(m,-1,-1):     if DP[i]!=m+1:         ANS=(min(ANS,DP[i]+(m+1-i)))  print(ANS)                         
import time import random W = int(input()) M = [int(a) for a in input().split()] A = [0] * 8 sTime = time.time()  s = 0 mi = 10**20 for i in range(8):     if s + M[i]*(i+1) <= W:         s += M[i]*(i+1)         A[i] = M[i]     else:         t = (W-s)//(i+1)         s += t*(i+1)         A[i] += t          if s <= W:         mi = min(mi, W-s)  while time.time() - sTime < 1.7:     i = random.randrange(8)     a = random.randrange(2)     if W-s >= 20 or (s-W < 10 and a == 0):         if A[i] < M[i]:             A[i] += 1             s += (i+1)     else:         if A[i] > 0:             A[i] -= 1             s -= (i+1)      if s <= W:         mi = min(mi, W-s)  print(W-mi) 
3 # Copyright (C) 2017 Sayutin Dmitry. # # This program is free software; you can redistribute it and/or # modify it under the terms of the GNU General Public License as # published by the Free Software Foundation; version 3 # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; If not, see <http://www.gnu.org/licenses/>.  def solve(a, l):     if l == 0:         return 0      if l == 1:         return a[0]          k = 0     while (2 ** k) < l:         k += 1          return min(a[k], a[k - 1] + solve(a, l - (2 ** (k - 1))))       def main():     n, l = list(map(int, input().split()))     a = list(map(int, input().split()))      for i in range(n - 2, -1, -1):         if a[i] > a[i + 1]:             a[i] = a[i + 1]          for i in range(1, n):         if a[i] > 2 * a[i - 1]:             a[i] = 2 * a[i - 1]      while len(a) < 35:         a.append(2 * a[len(a) - 1])      #print(a)      print(solve(a, l))              main() 
x=int(input()) l=list(map(int, input().split(' '))) l.sort() a=1 for i in l:     if i>=a:         a+=1 print(a) 
n = int(input()) a = list(map(int, list(input()))) for i in range(n - 1):     sm = sum(a[:i + 1])     tn = 0     res = True     has = False     for j in range(i + 1, n):         tn += a[j]         if (tn == sm):             tn = 0             has = True         elif tn > sm:             res = False             break     if (tn == 0 and res and has):         print("YES")         break else:     print("NO")
s = input() q = set() for i in range(0, len(s)):     q.add(s[i]) print("IGNORE HIM!" if len(q) % 2 == 1 else "CHAT WITH HER!")
n, k = list(map(int, input().split()))  t = list(map(int, input().split()))  d = [0 for _ in range(n)]  for _ in range(n):   for i in range(n):     if i % k != _ % k:       d[_] += t[i]  print(max(abs(d[_]) for _ in range(n))) 
import sys #sys.stdin=open("data.txt") input=sys.stdin.readline  n,a,b=map(int,input().split())  if a<b: a,b=b,a  if b==0:     # 1 01 001 0001 ... is optimal, plus a long series of 0's     print((n-1)*a) else:     # pascal's triangle thing     pascal=[[1]*20005]     for i in range(20004):         newrow=[1]         for j in range(1,20005):             newrow.append(newrow[-1]+pascal[-1][j])             if newrow[-1]>n: break         pascal.append(newrow)     def getcom(a,b):         # return a+b choose b         # if larger than n, return infinite         if len(pascal[a])>b: return pascal[a][b]         if b==0: return 1         if b==1: return a         return 100000005      # start with the null node (prefix cost 0)     # can split a node into two other nodes with added cost c+a+b     # new nodes have prefix costs c+a, c+b     # want n-1 splits in total     n-=1    # now represents number of splits needed      # binary search the last cost added     lo=0     hi=a*int((n**0.5)*2+5)      while 1:         mid=(lo+hi)//2         # count stuff         c0=0    # < mid         c1=0    # = mid         for i in range(mid//a+1):             j=(mid-i*a)//b             if (mid-i*a)%b!=0:                 # c0 += iC0 + (i+1)C1 + (i+2)C2 + ... + (i+j)Cj                 for k in range(j+1):                     #print(mid,i,k)                     c0+=getcom(i,k)                     if c0>n: break             else:                 for k in range(j):                     #print(mid,i,k)                     c0+=getcom(i,k)                     if c0>n: break                 #print(mid,i,j,"c1")                 c1+=getcom(i,j)         #print(mid,"is",c0,c1)         if n<c0:             hi=mid-1         elif c0+c1<n:             lo=mid+1         else:             # mid is correct cutoff             lowcost=0   # sum of all cost, where cost < mid             for i in range(mid//a+1):                 j=(mid-i*a)//b                 if (mid-i*a)%b!=0:                     for k in range(j+1):                         lowcost+=getcom(i,k)*(i*a+k*b)                 else:                     for k in range(j):                         lowcost+=getcom(i,k)*(i*a+k*b)             temp=lowcost+(n-c0)*mid             print(temp+n*(a+b))             break
n, a, x, b, y = map(int, input().split())  while a != x and b != y and a != b: if a == b: break  a = a % n + 1 b = b - 1 if b - 1 else n  print("YNEOS"[a != b::2])
x,y,l,r=list(map(int,input().split())) b=set() a=0 b.add(l-1) b.add(r+1) for i in range(100):   xx=x**i   if xx>r: break   for j in range(100):     rr=xx+(y**j)     if rr>r: break     if rr>=l:       b.add(rr) b=sorted(list(b)) for i in range(1,len(b)):   a=max(a,b[i]-b[i-1]-1) print(a) 
def is_izi(k):     i = 2     while (i * i <= k):         if (k % i == 0):             return 0         i += 1     return 1 n = int(input()) if (is_izi(n)):     print(1) elif n % 2 == 0:     print(2) elif n % 2 == 1:     if (is_izi(n - 2)):         print(2)     else:         print(3)
s = input() st = {'a', 'e', 'i', 'o', 'u', ' '} res = ""  def check(s): if (len(s) < 3): return True if (s[-1] not in st and s[-2] not in st and s[-3] not in st) and (s[-1] != s[-2] or s[-2] != s[-3] or s[-1] != s[-3]): return False return True  for item in s: if not check(res + item): res += " " res += item print(res)
n, m, k = list(map(int, input().split())) x, s = list(map(int, input().split())) t = list(map(int, input().split())) pr = list(map(int, input().split())) t2 = list(map(int, input().split())) pr2 = list(map(int, input().split())) mass1 = [] minans = 10**20 for i in range(m):     mass1.append((pr[i], t[i])) mass1.sort() mass1 = [(0, x)] + mass1 pr2 = [0] + pr2 t2 = [0] + t2 uk1 = len(mass1) - 1 uk2 = 0 maxw = 0 for uk1 in range(len(mass1) - 1, -1, -1):     if (s < mass1[uk1][0]):         continue     while (uk2 < len(pr2) and mass1[uk1][0] + pr2[uk2] <= s):         maxw = max(maxw, t2[uk2])         uk2 += 1     uk2 -= 1     minans = min(minans, (n - maxw) * mass1[uk1][1]) print(minans) 
n, k, m = list(map(int, input().split())) l = list(map(int, input().split())) l.sort() s = sum(l)  ans = 0 for i in range(n + 1):     mi = m - s * i     if mi < 0:         break     cnt = (k + 1) * i     for j in range(k):         x = min(mi // l[j], n - i)         cnt += x         mi -= l[j] * x     ans = max(ans, cnt) print(ans) 
N = int(input()) if N in [1, 2, 4, 5, 9, 10, 20, 21, 41, 42, 84, 85, 169, 170, 340, 341, 681, 682, 1364, 1365, 2729, 2730, 5460, 5461, 10921, 10922, 21844, 21845, 43689, 43690, 87380, 87381, 174761, 174762, 349524, 349525, 699049, 699050]:     print(1) else:     print(0)  
n, m, k = map(int, input().split()) ans = 0, 0 if k < n:     ans = k + 1, 1 else:     k -= n     r = n - k // (m - 1)     if r % 2:         c = m - k % (m - 1)     else:         c = 2 + k % (m - 1)     ans = r, c print(*ans)
import math x = int(input())  ans = 10**13 ab = [1, 1] for i in range(1, int(x**(1/2))+1):     if x % i == 0:         a = x//i         b = i          g = math.gcd(a, b)         a *= g         b *= g         if ans > max(a, b):             ans = max(a, b)             ab = [a, b]  print(ab[0], ab[1]) 
n1 = int( input() ) n2 = int( input() ) n3 = int( input() ) print( min( n1 , n2 // 2 , n3 // 4 ) * 7 ) 
n = int(input()) z = list(map(int, input().split())) z.sort() if z[n - 1] < z[n]:     print("YES") else:     print("NO")       
import fractions  n = int(input()) A = [int(x) for x in input().split()] B = [] for i in range(n-1):     B.append(A[i])     if fractions.gcd(A[i], A[i+1]) != 1:         B.append(1) B.append(A[-1]) print(len(B) - n) print(' '.join(map(str, B)))   
# 割り切る数は、Aの総和の約数である # 自分自身を除く約数について大きい順にすべて試して、当てはまるものがあれば答え  # 8,20を7の倍数に近づけるとき、 # 8 -> mod 7が1であり、-1か+6で7の倍数になる # 20 -> mod 7が6であり、-6か+1で7の倍数になる # -1と+1をペアにすることが出来て、この操作回数1をK = 3から引くと2となり、これが偶数ならOK  import sys readline = sys.stdin.readline  N,K = map(int,readline().split()) A = list(map(int,readline().split()))  all = sum(A) divisors = [] for i in range(1,int(all ** 0.5) + 1):   if all % i == 0:     divisors.append(i)     divisors.append(all // i)  divisors = sorted(divisors,reverse = True)  #print(divisors)  for d in divisors:   mods = [0] * (N)   for i in range(len(A)):     mods[i] = A[i] % d   mods = sorted(mods)   #print("d",d,"mods",mods)   mods_front = [0] * N   mods_front[0] = mods[0]   for i in range(1,N):     mods_front[i] = mods_front[i - 1] + mods[i]   mods_back = [0] * N   mods_back[-1] = d - mods[-1]   #print("mods_front",mods_front)   for i in range(N - 2,-1,-1):     mods_back[i] = mods_back[i + 1] + (d - mods[i])   #print("mods_back",mods_back)   for i in range(N - 1):     if mods_front[i] == mods_back[i + 1]:       if K >= min(mods_front[i],mods_back[i + 1]):         print(d)         return else:   print(1)
def main():     x = int(input())     n = x.bit_length()     t = 0     ans = []     while True:         if (x + 1) & (x) == 0:             break         if t & 1:             x += 1         else:             for i in range(n - 1, -1, -1):                 if not (1 << i) & x:                     ans.append(i + 1)                     x ^= (1 << (i + 1)) - 1                     break         t += 1     print(t)     print(*ans)     return 0  main()
n, k = map(int, input().split()) a = list(map(int, input().split()))  maxd = -1 for x in a:     if k % x == 0:         maxd = max(maxd, x) print(k // maxd)
from math import * from sys import * from queue import * from decimal import *  n,k=(int(z) for z in input().split()) s=input() i=0 while i<len(s) and s[i] not in ["G","T"]:   i+=1 i+=k while i<len(s) and s[i] not in ["G","T","#"]:   i+=k if i>=len(s) or s[i]=="#":   print("NO") else:   print("YES")
y1, y2, w, x, y, r = map(int, input().strip().split()) w -= r y1 = 2 * w - y1 - y - r y2 = 2 * w - y2 - y if x * x * (y2 - y1) * (y2 - y1) <= (y1 * y1 + x * x) * r * r:   print(-1) else:   print(f"{x * (y1 + y - w) / y1:.10f}")
a = list(map(int, input().split())) m = max(a)  ans = 0 for i in range(3):     if a[i] < m - 1:         ans += (m - 1) - a[i]         a[i] = m - 1  print(ans) 
MAXN = 1000000000  n = int(input()) a = list(map(int, input().split()))  def solve1(): for i in range(n-1): if abs(a[i]-a[i+1]) != 1: return False print("YES\n%d %d" % (MAXN, 1)) return True  def solve2(): w = -1 for i in range(n-1): d = abs(a[i]-a[i+1]) if d != 1: if w == -1: w = d elif w != d: return False if w <= 0: return False for i in range(n-1): if abs(a[i]-a[i+1]) == 1 and (a[i]-1)//w != (a[i+1]-1)//w: return False print("YES\n%d %d" % (MAXN, w)) return True  if solve1(): pass elif solve2(): pass else: print("NO")
def get_substr_ends(haystack, needle): ans = [-1] index = 0 for char in needle: while index < len(haystack) and char != haystack[index]: index += 1 ans.append(index) if index < len(haystack): index += 1 return ans  haystack = input() needle = input()  pref = get_substr_ends(haystack, needle) suff = get_substr_ends(haystack[::-1], needle[::-1])  pref_index = 0 suff_len = 0 while suff_len < len(suff) and suff[suff_len] < len(haystack): suff_len += 1  suff_len -= 1 best_str = needle[len(needle) - suff_len:]  if len(best_str) == len(needle): print(needle) return  for pref_len in range(1, len(pref)): while suff_len >= 0 and suff[suff_len] + pref[pref_len] + 2 > len(haystack): suff_len -= 1 ans = pref_len + suff_len if ans > len(best_str) and suff_len >= 0: best_str = needle[:pref_len] + needle[len(needle) - suff_len:]  print(best_str if best_str else '-') 
n = int(input()) s = input() b = 0 for i in s:     if i == '+':         b += 1     else:         b -= 1         b = max(b, 0) print(b)
n=int(input()) a=int(input()) b=int(input()) c=int(input()) r=n//a if n > c:     r=max(r,(r-b+c)//a+1,(n-c)//(b-c)+((n-c)%(b-c)+c)//a) print(r)
n = int(input()) k1 = list(map(int, input().split()[1:])) k2 = list(map(int, input().split()[1:]))  i = 0 while True:     if len(k1) == 0 or len(k2) == 0:         break     if i > 10000:         break     if k1[0] > k2[0]:         k1 = k1[1:] + k2[0:1] + k1[0:1]         k2 = k2[1:]     else:         k2 = k2[1:] + k1[0:1] + k2[0:1]         k1 = k1[1:]     i += 1  if i > 10000:     print(-1) else:     winner = 1     if len(k1) == 0:         winner = 2     print(i, winner) 
s = input().strip() flag1 = len(s) >= 5 d1 = 'qwertyuiopasdfghjklzxcvbnm' d2 = 'QWERTYUIOPASDFGHJKLZXCVBNM' d3 = '123456789' flag2 = False flag3 = False flag4 = False  for i in d1:     if i in s:         flag2 = True for i in d2:     if i in s:         flag3 = True for i in d3:     if i in s:         flag4 = True   if(flag1 and flag2 and flag3 and flag4):     print("Correct") else:     print("Too weak")  
n = int(input()) A = list(map(int,input().split())) B = list(map(int,input().split())) a = [0] * 5 b = [0] * 5 for j in range(n):     a[A[j]-1] += 1     b[B[j]-1] +=1 per = 0 for j in range(5):     if (a[j] + b[j]) % 2 == 1:         per = 1         break if per == 1:     print(-1) else:     ans = 0     for j in range(5):         if a[j] > b[j]:             ans += (a[j] - b[j])//2     print(ans)
a, b = list(map(int, input().split(' '))) hor = input() ver = input() if (hor[0], ver[0]) == ('>', 'v') or (hor[0], ver[-1]) == ('<', 'v'):     print("NO") elif (hor[-1], ver[0]) == ('>', '^') or (hor[-1], ver[-1]) == ('<', '^'):     print("NO") else:     print("YES") 
x = int(input())  seq = list(map(int, input().split(' ')))  if seq == [0]:     print("YES")     print(0)  elif seq == [0, 0]:     print("NO")  elif seq == [1, 0]:     print("YES")     print('1->0')  elif seq == [0, 0, 0]:     print("YES")     print("(0->0)->0")  elif seq == [1, 0, 0]:     print("NO")  elif seq[x-1] == 1:     print("NO")  #ENDS IN 1      elif seq[x-2] == 1:     print("YES")      print('->'.join([str(x) for x in seq]))   #ENDS IN 10  elif seq == [1] * (x-2) + [0, 0]:     print("NO")  #000 BELOW elif seq[x-3] == 0:     a = ('->'.join([str(x) for x in seq][0:x-3]))     print("YES")      print(a + '->(0->0)->0')  #100 else:     last = 0     for i in range(x-1):         if seq[i] == 0 and seq[i+1] == 1:             last = i     seq[last] = '(0'     seq[last+1] = '(1'     seq[x-2] = '0))'     print("YES")     print('->'.join([str(x) for x in seq])) 
a, b = [int(v) for v in input().split()]  while a > 0 and b > 0:     if a >= 2 * b:         a %= 2 * b     elif b >= 2 * a:         b %= 2 * a     else:         break  print(a, b) 
s=input() ast=[int(i) for i in s.split(' ')] k,a,b=ast[0],ast[1],ast[2] s1=(a-1)//k s2=b//k print(s2-s1) 
a = int(input()) s = "" for i in range(1, a+1):     s += str(i) print(s[a-1])
n, s = int(input()), input() cnt = (n - 11) // 2 cnt_8 = len(s[:n - 10].split('8')) - 1 if (cnt >= cnt_8): print ("NO") else: print ("YES")
MOD = 1000000007   def f(n, cnt):     """     n! / (n - cnt)!     """     ans = 1     for _ in range(cnt):         ans = (ans * n) % MOD         n -= 1     return ans   def main():     n, x, pos = list(map(int, input().split()))     chk1 = 0     chk_r = 0     left = 0     right = n     while left < right:         middle = (left + right) // 2         if middle <= pos:             if middle < pos:                 chk1 += 1             left = middle + 1         else:             chk_r += 1             right = middle     if chk1 > x - 1 or chk_r > n - x:         print(0)     else:         # (x - 1)! / (x - 1 - chk1)! * (n - x)! / (n - x - chk_r)! * (n - chk1 - chk_r - 1)!         rest = n - chk1 - chk_r - 1         print(f(x - 1, chk1) * f(n - x, chk_r) * f(rest, rest) % MOD)   main() 
s = input() k = int(input()) c = 0 p = 0 has_star = False for i in range(len(s)):     if s[i] in ['*', '?']:         if s[i] == '*':             has_star = True         c -= 1     else:         p += 1         c += 1 if k < c:     print("Impossible") elif (not has_star) and (k > p):     print("Impossible") else:     signs_to_add = k - c     ans = ""     for i in s:         if signs_to_add == 0:             if i not in ['*', '?']:                 ans += i             else:                 ans = ans[:-1]             continue         if i == '?':             signs_to_add -= 1         elif i == '*':             signs_to_add -= 1             while signs_to_add > 0:                 ans += ans[-1]                 signs_to_add -= 1         else:             ans += i     print(ans)  
n = (-int(input())) % 360  ret, opt = 4, 361 for i in range(4):     x = (n+90*i)%360     x = min(x, 360-x)     if (x, i) < (opt, ret):         opt, ret = x, i  print(ret)
a, b, c = list(map(int, input().split())) x, y, z = list(map(int, input().split())) col = max(0, x - a) + max(0, y - b) + max(0, z - c) sum = max(0, (a - x) // 2) + max(0, (b - y) // 2) + max(0, (c - z) // 2) if sum >= col:     print('Yes') else:     print('No') 
n,k,m=list(map(int,input().split())) d,r,p,P=0,0,1%k,(10**(n-1))*9 F=[0]*k F[0]=1 while d<n: d+=1 P//=10 E=[0]*k if P==0:P=1 i=1 #print("E=",E) #print("F=",F) while i<10: j=(-i*p)%k f=0 while f<k: E[f]+=F[j] f+=1 j+=1 if j==k:j=0 i+=1 r+=E[0]*P p=p*10%k E[0]=0 i=1 while i<k: F[i]=(F[i]+E[i])%m i+=1 #print(E,P) F[0]=1 #print("r=",r) print(r%m) #i=10**n #j=10**(n-1) #r=0 #F=[0]*k #while j<i: #x=str(j) #l=len(x) #a=l #while a: #a-=1 #s=int(x[a:l]) #if s>0 and s%k==0: #r+=1 #break #j+=1 #print() #print(r) """ 3 6 9 13 16 1912 15 18 23 26 2921 24 27 33 36 3930 43 46 4942 45 48 53 56 5951 54 57 63 66 6960 73 76 7972 75 78 83 86 8981 84 87 93 96 9990 """ 
import base64 import zlib pro = base64.decodebytes("""eJxtUUFuwyAQvPOKVarKkDhOm2MlX/uC3qqqAhs7KBgswGr6+y4QrLqqL7DD7OzMWk2zdQFGGWbu PVG59N/rdeLhUu6Om95OpVJBumCtXqlCedkFQgalpYcW3twiSS/FMmLxyrWXhKihzGrwXLx0lEHb QjU4e5HmWgHOgKTwQgC/0p/EIoDeGh96ZRC0szR0F6QPjTI7lt4fCsMuoVCqREGgqqH6qjIxBSZo cADdTZTXIFie6dCZM8BhDwJOp7SDZuz6zLn3OMXplv+uTKCKwWAdKECDysxLoKzxs1Z4fpRObkb5 6ZfNTDSDbimlAo44+QDPLI4+MzRBYy1Yto0bxPqINTzCOe7uKSsUlQPKFJFzFtmkWlN3dhKcmhpu 2xw05R14FyyG1NSwdQm/QJxwY/+93OKGdA2uRgtt3hPp1RALLjzV2OkYmZSJCB40ku/AISORju2M XOEPkISOLVzJ/ShtPCedXfwLCdxjfPIDQSHUSQ== """.encode()) pro = zlib.decompress(pro) pro = pro.decode() exec(pro) 
n, k = list(map(int,input().split())) if k == 1 or k == n:     print(3 * n) else:     print(3 * n + min(k - 1, n - k)) 
n, m = list(map(int, input().split()))  start = 0 end = 10**10 while (end - start > 1):     mid = (end + start) // 2     two = mid // 2 - mid // 6     three = mid // 3 - mid // 6     six = mid // 6      nn = n     mm = m      nn -= two     mm -= three     nn = max(nn, 0)     mm = max(mm, 0)     if (six >= nn + mm):         end = mid     else:         start = mid print(end) 
def list_input():     return list(map(int,input().split())) def map_input():     return map(int,input().split()) def map_string():     return input().split()      n = int(input())     a = [] for _ in range(n): a.append(int(input())) b = list(set(a[::])) if(len(b) == 2 and a.count(a[0]) == n//2): print("YES") print(b[0],b[1]) else: print("NO")
import sys  def r():     return list(map(int, input().split()))  n, k = list(map(int, input().split())) a = r()  cnt4 = n cnt2 = 2*n cnt1 = 0 for i in range(k):     x = min((a[i]+1)//4, cnt4)     cnt4 -= x     a[i] = max(0, a[i]-4*x)  cnt2 += cnt4 cnt1 += cnt4 for i in range(k):     x = min(a[i]//2, cnt2)     cnt2 -= x     a[i] = max(0, a[i]-2*x)  cnt1 += cnt2 for i in range(k):     cnt1 -= a[i]  if (cnt1 < 0):     print('NO') else:     print('YES')         
n = int(input()) a = list(map(int,input().split())) t = 0 mn = 1000000000 for i in range(1,100):     cur = 0     for j in range(n):         cur += max(0,abs(i-a[j])-1)     if cur < mn:         mn = cur         t = i print(t,mn) 
n, m = input().split() n = int(n) m = int(m) a = [] N = n for i in range(n) :     a.append(input().split())      for i in range(n) :     if a[i][0].find('*') == -1 :         n-=1     else :         break if n != 1 :     for i in range(len(a)-1,-1,-1) :         if a[i][0].find('*') == -1 :             n-=1         else :             break #print(n)  M = m br = 0 for i in range(m) :     count = 0     for j in range(len(a)) :         if a[j][0][i] != ('*') :             count+=1         else :             br = 1             break     if br == 1 :         break     if count == N :         m-=1 br = 0 if m != 1 :     for i in range(M-1,-1,-1) :         count = 0         for j in range(len(a)) :             if a[j][0][i] != ('*') :                 count+=1             else :                 br = 1                 break         if br == 1 :             break         if count == N :             m-=1 #print(m) if m > n :     print(m) else :     print(n) 
N, T = list(map(int, input().split())) A = [int(a) for a in input().split()] if sum(A) > N//2:     A = [1-a for a in A][::-1] K = sum(A) S = sum(A[-K:]) M = K + 1 P = 10**9+7 inv = pow(N*(N-1)//2, P-2, P) X = [[0]*M for _ in range(M)] for i in range(M):     if i > 0: X[i-1][i] = ((K-i+1)**2*inv)%P     if i < M-1: X[i+1][i] = (N-2*K+i+1)*(i+1)*inv%P     X[i][i] = (1-((K-i)**2*inv)-(N-2*K+i)*(i)*inv)%P  def ddd(n):     for i in range(1, 100):         if (n*i%P) < 100:             return (n*i%P), i     return -1, -1 def poww(MM, n):     if n == 1:         return MM     if n % 2:         return mult(poww(MM, n-1), MM)     return poww(mult(MM,MM), n//2) def mult(M1, M2):     Y = [[0] * M for _ in range(M)]     for i in range(M):         for j in range(M):             for k in range(M):                 Y[i][j] += M1[i][k] * M2[k][j]                 Y[i][j] %= P     return Y  X = poww(X, T)  print(X[S][K]) 
x, y = list(map(int, input().split())) x, y = y, x A = x B = x curr = x count = 0 while curr < y: curr = B + A - 1 A, B = B, curr count += 1 count += 2 print(count) 
def seg(x, y, h):     A = [x - h, x + h]     B = [y - h, y + h]     Z = []     for a in A:         for b in B:             Z.append(a * b)     Z.sort()     return (Z[0], Z[-1])  def check(a, b, c, d, h):     x1, y1 = seg(a, d, h)     x2, y2 = seg(b, c, h)     return max(x1, x2) <= min(y1, y2)  a, b = list(map(int, input().split())) c, d = list(map(int, input().split())) l = 0 r = max(abs(a), abs(b), abs(c), abs(d)) for i in range(100):     m = (l + r) / 2     if check(a, b, c, d, m):         r = m     else:         l = m print((r + l) / 2)  
n, a, b = list(map(int,input().split())) l = input().split() o = 0 c = 0 for i in l:     if i == '2':         if b > 0:             b -= 1         else:             o += 2     if i == '1':         if a > 0:             a -= 1         elif b > 0:             b -= 1             c += 1         elif c > 0:             c -= 1         else:             o += 1 print(o) 
a,b,c,n=list(map(int,input().split())) x=a+b-c print(n-x if c<=a and c<=b and x<n else -1) 
x, k = map(int, input().split()) if x == 0:     print(0) else:     mod = 10 ** 9 + 7     p = pow(2, k, mod)     ans = (x * (p * 2) - (p - 1)) % mod     print(ans)
from bisect import bisect_left  M = 998244353  def pw(x, y):     if y == 0:         return 1     res = pw(x, y//2)     res = res * res % M     if y % 2 == 1:         res = res * x % M     return res  def cal(x, y):     y += x - 1     res = 1     for i in range(1, x + 1):         res = res * (y - i + 1)         res = res * pw(i, M - 2) % M     return res % M  n = int(input()) a = [] b = [] res = 1 for i in range(n):     a.append(list(map(int, input().split())))     res = res * (a[-1][1] + 1 - a[-1][0]) % M     b.append(a[-1][0])     b.append(a[-1][1] + 1)     b = set(b)     b = sorted(list(b))  g = [b[i + 1] - b[i] for i in range(len(b) - 1)]  for i in range(n):     a[i][0] = bisect_left(b, a[i][0])     a[i][1] = bisect_left(b, a[i][1] + 1)  a = a[::-1]  f = [[0 for _ in range(len(b))] for __ in range(n)]  for i in range(a[0][0], len(b)):     if i == 0:         f[0][i] = g[i]     else:         if i < a[0][1]:             f[0][i] = (f[0][i - 1] + g[i]) % M         else:             f[0][i] = f[0][i - 1]          for i in range(1, n):     for j in range(a[i][0], len(b)):         if j > 0:             f[i][j] = f[i][j - 1]         if j < a[i][1]:             for k in range(i, -1, -1):                 if a[k][1] <= j or j < a[k][0]:                     break                 if k == 0 or j != 0:                     tmp = cal(i - k + 1, g[j])                     if k > 0:                         f[i][j] += f[k - 1][j - 1] * tmp % M                     else:                         f[i][j] += tmp                     f[i][j] %= M                      #print(f) #print(f[n - 1][len(b) - 1], res) print(f[n - 1][len(b) - 1] * pw(res, M - 2) % M) 
x = int(input()) if x%2==1:     print(0)     quit() if x%2 ==0:     x//=2     if x%2==0:         print(x//2-1)     else:         print(x//2) 
def doit():     xx = input().split()     n = int(xx[0])     s = int(xx[1])     v = [int(k) for k in input().split()]      S = sum(v)     newS = S - s     if newS < 0:         return -1     return min(newS//n, min(v))          print(doit()) 
from math import *  h1, h2 = [int(i) for i in input().split()] a, b = [int(i) for i in input().split()] a *= 12 b *= 12 if a <= b and h2 - h1 > (a // 12 * 8):     print(-1)     return h1 += (a // 12 * 8) if h1 >= h2:     print(0)     return day = int(ceil((h2 - h1) / (a - b))) print(day)
import sys f = sys.stdin  C, Hr, Hb, Wr, Wb = map(int, f.readline().strip().split())  if Hr/Wr < Hb/Wb:     Hr, Hb, Wr, Wb = Hb, Hr, Wb, Wr  if (C % Wr) == 0 and (C // Wr) > 0:     print((C // Wr)*Hr)      elif (C // Wr) == 0:     print((C // Wb)*Hb)  else:     nmax =  (C // Wr)     pmax = nmax*Hr + ((C - nmax*Wr) // Wb) * Hb     dmax = ((C - (nmax-0)*Wr) % Wb)     #print(0, pmax, dmax)          #     #pm1 = (nmax-1)*Hr + ((C - (nmax-1)*Wr) // Wb) * Hb      #if pm1>pmax:     #    pmax = pm1     if  Hr/Wr > Hb/Wb:         dx = dmax * (Hb/Wb) / (Hr/Wr - Hb/Wb)         elif  Hr/Wr < Hb/Wb:          dx = 0      else:         dx = Wb * Wr         if Wr<Wb:             nmax =  (C // Wb)             pmax = nmax*Hb + ((C - nmax*Wb) // Wr) * Hr            if Wr>Wb:             nmax =  (C // Wr)             pmax = nmax*Hr + ((C - nmax*Wr) // Wb) * Hb                     if Wr>Wb and dx>0:             for k in range(1, C//Wr):             if k*Wr > dx:                 break             pk = (nmax-k)*Hr + ((C - (nmax-k)*Wr) // Wb) * Hb              dk = ((C - (nmax-k)*Wr) % Wb)             #print(k, pmax, pk, dk)             if pk>pmax:                 pmax = pk             if dk==0 :                 break     elif Wr<Wb and dx>0:            for j in range(1, C//Wb+1):             k = nmax - (C-j*Wb)//Wr             if k*Wr > dx:                 break                          pk = (nmax-k)*Hr + ((C - (nmax-k)*Wr) // Wb) * Hb              dk = ((C - (nmax-k)*Wr) % Wb)             #print(j, k, pmax, pk, dk, (nmax-k), ((C - (nmax-k)*Wr) // Wb) )             if pk>pmax:                 pmax = pk                 #dmax = dk             if dk==0 :                 break                          #    elif Wr<Wb and dx>0:    #        for j in range(1, C//Wb+1): #            k = (j*Wb - dmax)//Wr #            if k*Wr > dx: #                break #            pk = (nmax-k)*Hr + ((C - (nmax-k)*Wr) // Wb) * Hb  #            dk = ((C - (nmax-k)*Wr) % Wb) #            print(j, k, pmax, pk, dk, (nmax-k), ((C - (nmax-k)*Wr) // Wb) ) #            if pk>pmax: #                pmax = pk #                #dmax = dk #            if dk==0 : #                break                  print(pmax)    
a, b = map(int, input().split()) d, c = map(int, input().split()) print(max(abs(a - d), abs(b - c)))
n = int(input()) s = input() countr = s.count('R') countd = n - countr cr = 0 cd = 0 i = 0 news = [] while countr != 0 and countd != 0:     if s[i] == 'D':         if cd == 0:             cr += 1             countr -= 1             news.append('D')         else:             cd -= 1     else:         if cr == 0:             cd += 1             countd -= 1             news.append('R')         else:             cr -= 1     i += 1     if i >= n:         s = list(news)         news = []         n = len(s)         i = 0          if countr > 0:     print('R') else:     print('D')
def gcd(a, b):     while b:         a, b = b, a % b     return a  a, b, x, y = list(map(int, input().split()))  g = gcd(x, y) x //= g y //= g   print(min(a // x, b // y)) 
n, k = map(int, input().split()) a = [] i = 2 while (i * i <= k):     if (k % i == 0):         a.append([i, 0])         while (k % i == 0):             a[len(a) - 1][1] += 1             k //= i     i += 1 if (k > 1):     a.append([k, 1]) ans = 10 ** 20 for i in a:     cnt = 0     x = i[0]     while (x <= n):         cnt += n // x;         x *= i[0]     ans = min(ans, cnt // i[1]) print(ans)
import math m,a,b=map(int,input().split()) g=math.gcd(a,b) a1=a//g b1=b//g alls=g*(a1+b1-1) dists=[0]+[-1]*(a1+b1-1) dist=0 far=0 while dist!=b1:     if dist<b1:         dist+=a1         far=max(dist,far)     else:         dist-=b1     if dists[dist]==-1:         dists[dist]=far tot=0 for i in range(a1+b1):     if i*g<=m and dists[i]*g<=m:         tot+=(m+1-dists[i]*g) if alls<m:     mod=m%g     times=m//g     diff=times-a1-b1     tot1=g*(diff*(diff+1)//2)+(mod+1)*(diff+1)     tot+=tot1 print(tot)
def read_ints(): return [int(i) for i in input().split()]  n = read_ints() a = read_ints() if len(a) % 2 and a[0] % 2 and a[-1] % 2: print('Yes') else: print('No')
x1, y1, x2, y2 = map(int, input().split()) #diagonal if x1 != x2 and y1 != y2:     if abs(x1 - x2) == abs(y1 - y2):         print(x1, y2, x2, y1)     else:         print(-1) #same side elif x1 == x2:     aux = abs(y2 - y1)     print(x1 + aux, y1, x1 + aux, y2) elif y1 == y2:     aux = abs(x2 - x1)     print(x1, y1 + aux, x2, y1 + aux)
def main():     x, y = [int(i) for i in input().split()]     n = int(input())          result = [x, y, y - x, -x, -y, x - y][(n - 1) % 6]          print(result % 1000000007)   main() 
from sys import stdin  n = int(input()) a = [int(x) for x in input().split()]  f = False for i in range(len(a)):     if a[i] != 0:         ln = i         f = True         break if not f:     print('NO') else:     print('YES')     l = 0     i = ln + 1     ans = []     while i < len(a):         if a[i] == 0:             i += 1         else:             ans.append((l+1, i))             l = i             i += 1     if l < len(a):         ans.append((l+1, i))     print(len(ans))     for i in ans:         print(i[0],i[1])  
MOD = 1000000009  n,m,k = [int(x) for x in input().split()]  num0 = n-m num1fin = num0*(k-1) if num1fin >= m:     print(m) else:     num1open = m-num1fin     sets = num1open//k     rem = num1open%k     print(((pow(2,sets,MOD)-1)*2*k+rem+num1fin)%MOD) 
n1 = input() n = [] for i in n1:     n.append(int(i)) k = len(n)  for i in range(k):     if (n[i] % 8) == 0:         print("YES")         print(n[i])         return  if k > 1:     for i in range(k):         t = n[i] * 10         for j in range(i+1, k):             if (t+n[j]) % 8 == 0:                 print("YES")                 print(t+n[j])                 return if k > 2:     for i in range(k):         t = n[i]*100         for j in range(i+1, k):             l = n[j]*10             for e in range(j+1, k):                 #print(t, l, n[e])                 if (t+l+n[e]) % 8 == 0:                     print("YES")                     print(t+l+n[e])                     return print("NO") 
def floo(num, k): return (num - 1) // k + 1  def main(): n, m = map(int, input().split()) low = 1 high = 10**9  if (m == 0): if (n == 1): print(1) else: print(-1) return  for i in range(m): k, f = map(int, input().split()) low = max(low, (k + f - 1) // f) if (f > 1): high = min(high, (k - 1) // (f - 1)) if (floo(n, low) == floo(n, high)): print(floo(n, low)) else: print(-1)    main()
f = [] for i in range(2):     f.append(list(input()))   answer = 0  n = len(f[0]) for i in range(n):     if f[0][i] == f[1][i] == '0' and i + 1 < n:         if f[0][i + 1] == '0':             answer += 1             f[0][i + 1] = 'X'         elif f[1][i + 1] == '0':             answer += 1             f[1][i + 1] = 'X'      elif (f[1][i] == '0' or f[0][i] == '0') and i + 1 < n and f[0][i + 1] == f[1][i + 1] == '0':         answer += 1         f[0][i + 1] = f[1][i + 1] = 'X'   print(answer) 
def list_input():     return list(map(int,input().split())) def map_input():     return map(int,input().split()) def map_string():     return input().split()      n = int(input())     a = list(input()) ans = 0 for i in range(n): for j in range(i,n): b = a[i:j+1] for k in b: if k.lower() != k: break else: b = set(b) ans = max(ans,len(b)) print(ans)
 n=int(input()) arr= list(map(int,input().strip().split(' '))) s = 0 for i in range(n):    s+=abs(arr[i]) print(s)
def list_input():     return list(map(int,input().split())) def map_input():     return map(int,input().split()) def map_string():     return input().split()      a,b,f,k = map_input() tot = a*k s = 2*a-f cur = 0 cnt = b go = 0 ans = 0 while cur < tot: go = 1-go if(go == 1): if cnt < s and cnt < tot-cur: if(cnt < f): print(-1) break cnt = b ans += 1 cnt -= (a-f) else: cnt -= a else: if cnt < a+f and cnt < tot-cur: if(cnt < a-f): print(-1) break cnt = b ans += 1 cnt -= (f) else:cnt -= a cur += a # print(cur,cnt,ans) if(cnt < 0): print(-1) break else: print(ans)
a, b, c = map(int, input().split(' ')) x = input() for i in range(105):     for j in range(105):         if i*b+j*c == a:             print(i+j)             for k in range(i):                 print(x[:b])                 x = x[b:]             for l in range(j):                 print(x[:c])                 x = x[c:]             quit() print(-1)
n, m, s, d = list(map(int, input().split()))  beg = [float('-inf')] end = [float('-inf')]  a = [int(i) for i in input().split()]  for x in sorted(a): if (x - end[-1] > s + 1): beg.append(x) end.append(x) else: end[-1] = x  last = 0 R = [] J = []  for i in range(1, len(beg)): R.append(beg[i] - 1 - last) last = (beg[i] - 1)  J.append(end[i] + 1 - last) last = (end[i] + 1)  ok = True for x in J: if (x > d): ok = False for x in R: if (x < s): ok = False   if ok: for i in range(len(R)): print('RUN', R[i]) print('JUMP', J[i]) if (last < m): print('RUN', m - last) else: print('IMPOSSIBLE') 
s, x = list(map(int, input().split())) rem = int(s == x) * 2 p, t, cur = [], 0, 1 for i in range(64):     if x % 2:         t += 1         s -= cur     else:         p.append(cur * 2)     cur *= 2     x //= 2 for i in p[::-1]:     if s >= i: s -= i ans = 0 if s else 2 ** t - rem print(ans) 
n, k = map(int, input().split()) if n <= k + k + 1:     print(1)     print((n + 1) // 2) else:     answer = -1     answer_n = 10**100     for i in range(min(k + 1, n)):         t = n - (k + i + 1)         if t % (k + k + 1) >= k + 1:             if 2 + t // (k + k + 1) < answer_n:                 answer = i + 1                 answer_n = 2 + t // (k + k + 1)         if t % (k + k + 1) == 0:             if 1 + t // (k + k + 1) < answer_n:                 answer = i + 1                 answer_n = 1 + t // (k + k + 1)                 print(answer_n)     while answer <= n:         print(answer, end = ' ')         answer += k + k + 1         
ar=[] for i in range(1,10**5):     if(i*i>2*10**9):break     ar.append(i*i) s=input() ans=len(s) for x in ar:     s2=str(x)     i=0     for x in range(len(s)):         if i<len(s2) and s[x]==s2[i]:             i+=1     if(i==len(s2)):         ans=min(ans,len(s)-i) if(ans==len(s)):     print(-1) else:     print(ans)
p=10**9+7 import math def inv(k,p):     prod=1     while k>1:         prod*=(p//k+1)         k=(k*(p//k+1))%p     return prod%p n=int(input()) a=[] k=int(math.log2(n)) x=n while x>0:     y=x//2     a.append(x-y)     x=y c=[sum(a[i:]) for i in range(k+1)] b=[n//(3*2**i)-n//(6*2**i) for i in range(k+1)] d=[n//2**i-n//(3*2**i) for i in range(k+1)] facs=[1]*(n+1) for i in range(2,n+1):     facs[i]=(i*facs[i-1])%p if n<3*(2**(k-1)):     start=k else:     start=0 tot=0 for j in range(start,k+1):     prod=1     for i in range(j,k):         prod*=b[i]     prod*=d[j]     for i in range(j):         prod*=a[i]     prod%=p     prod*=facs[n]     e=[a[i] for i in range(j)]+[d[j]]+[b[i] for i in range(j,k)]     f=[sum(e[:i+1]) for i in range(k+1)]     g=1     for guy in f:         g*=guy     prod*=inv(g,p)     prod%=p     tot+=prod print(tot%p)
# You lost the game.  s = str(input()) n = len(s) d = -1 r = 0 V = "AEIOUY" for i in range(n):     if V.count(s[i]):         r = max(r,i-d)         d = i print(max(r, n-d)) 
l=list(map(int,input().split())) for i in range(16):     cur1,cur2=0,0     for j in range(4):         if (i&(1<<j))==0:             cur1+=l[j]         else:             cur2+=l[j]     if cur1==cur2:         print("YES")         quit() print("NO")
n = int(input()) a = list(map(int, input().split())) a = a[::-1] d = 0 for i in range(len(a)):     d = max(0 + d, a[i] + (sum(a[:i]) - d)) print(sum(a)-d, d) 
def Solve(x,B):     if((X,x,B) in Mem):         return Mem[(X,x,B)]     if(len(B)>X):         return False     if(x==len(L)):         return True     if(Form(L[x],B)):         A=list(B)         for e in range(len(B)):             r=A[e]             A[e]=L[x]             if(Solve(x+1,tuple(sorted(A)))):                 Mem[(X,x,B)]=True                 return True             A[e]=r         A+=[L[x]]         if(Solve(x+1,tuple(sorted(A)))):             Mem[(X,x,B)]=True             return True     Mem[(X,x,B)]=False     return False  def Form(x,B):     for i in range(len(B)):         for j in range(i,len(B)):             if(B[i]+B[j]==x):                 return True     return False          n=int(input()) L=list(map(int,input().split())) done=False Mem={} for X in range(1,n+1):     if(Solve(1,(L[0],))):         print(X)         done=True         break if(not done):     print(-1) 
n=int(input()) s=list(map(int,input().split())) print("Bob"if s.count(min(s))>n/2 else"Alice") 
read = lambda: list(map(int, input().split())) n = int(input()) a = list(read()) s = set() for i in a:     s.add(i) f1 = len(s) < 3 f2 = len(s) == 3 and max(s) + min(s) == 2 * sorted(s)[1] print('YES' if f1 or f2 else 'NO') 
n = int(input()) s = input() j = 1 result = [] for i in range(n):     while (j < n-1) and (s[i:j] in s[j:]):         j += 1     result.append(j-i-1) print(max(result))
n, a = list(map(int,input().split())) if a % 2 == 1:     print(a // 2 + 1) else:     print((n-a) // 2 + 1) 
s = input().split() n, m = int(s[0]), int(s[1]) cl = list(map(int, input().split())) com = list(map(int, input().split())) res = False for i in range(n):   for j in range(i, n):     e = True     t = cl[i:j+1]     for k in range(1, m+1):       e = t.count(k)==com[k-1] and e     if e:       res = True       break      if res: print('YES') else: print('NO')
x = 0 y = 0 for _ in range(int(input())):     a, b = list(map(int, input().split()))     x += (a > b)     y += (b > a) if x > y:     print("Mishka") elif y > x:     print("Chris") else:     print("Friendship is magic!^^") 
r, c = list(map(int, input().split()))  b = [list(input()) for i in range(r)] for y in range(r):     for x in range(c):         if b[y][x] == '.':             b[y][x] = '0'  ok = True for Y in range(r):     for X in range(c):         if not b[Y][X].isdigit():             continue         p = 0         for dy in range(-1, 2):             for dx in range(-1, 2):                 y = Y + dy                 x = X + dx                 if 0 <= y < r and 0 <= x < c:                     p += b[y][x] == '*'         if p != int(b[Y][X]):             ok = False  print(["NO", "YES"][ok]) 
def can(n, k):     total = n     s = 0      while n > 0:         cur = min(n, k)         s += cur         n -= cur          n -= n // 10      return s * 2 >= total  n = int(input())  le = 0 rg = n  while rg - le > 1:     mid = (rg + le) // 2      if can(n, mid):         rg = mid     else:         le = mid  print(rg) 
def main():     s = input()     links = s.count('-')     pearls = s.count('o')     if pearls == 0 or links % pearls == 0:         print('YES')     else:         print('NO')  main() 
n, m, k = map(int, input().split()) ans = 1 m -= n left = k - 1 right = n - k  put = 1 while (m >= put):     m -= put     ans += 1     put += (left > 0) + (right > 0)     if (left): left -= 1     if (right): right -= 1     if (left == right == 0):         ans += (m // put)         break print(ans)
N, M, K = list(map(int, input().split())) A = [int(a) for a in input().split()] S = [0] for a in A:     S.append(S[-1]+M*a-K) MI = [(10**50)] * M ans = 0 for i in range(N+1):     MI[i%M] = min(MI[i%M], S[i])     for j in range(M):         ans = max(ans, (S[i]-MI[(i-j)%M] - K*((-j)%M))//M) print(ans)  
import math n, m = list(map(int, input().split())) if n == 0 :      print(0, 1)     print(0, m)     print(0, 0)     print(0, m - 1) elif m == 0 :      print(1, 0)     print(n, 0)     print(0, 0)     print(n - 1, 0) else :     l = math.sqrt((n - 1) ** 2 + m ** 2) + math.sqrt(n ** 2 + m ** 2) + math.sqrt(n ** 2 + (m - 1) ** 2)     l1 = max(m, n) + math.sqrt(n * n + m * m) * 2     l2 = math.sqrt(n ** 2 + m ** 2) + math.sqrt((n - 1) ** 2 + m ** 2) * 2     l3 = math.sqrt(n ** 2 + m ** 2) + math.sqrt((m - 1) ** 2 + n ** 2) * 2     ans = max(l, l1, l2, l3)     if l == ans :         print(1, 0)         print(n, m)         print(0, 0)         print(n, m - 1)     elif l1 == ans :         if n > m :             print(n, m)             print(0, 0)             print(n, 0)             print(0, m)         else :             print(n, m)             print(0, 0)             print(0, m)             print(n, 0)     elif l2 == ans :         print(1, 0)         print(n, m)         print(0, 0)         print(n - 1, m)     else :         print(0, 1)         print(n, m)         print(0, 0)         print(n, m - 1) 
import math from collections import Counter  s = list(map(int, input())) substr = input().rstrip() t = list(map(int, substr))  m = len(s) x, y = 0, m z = (x + y) // 2 while z != x:     if z + math.floor(math.log10(z)) + 1 <= m:         x = z     else:         y = z     z = (x + y)//2 m1 = z k = math.floor(math.log10(m1)) + 1  D = Counter(s) D.subtract(list(map(int, str(m1)))) D.subtract(t) try:     c1 = min(i for i in range(1, 10) if D[i] > 0)     c2 = t[0]      D[c1] -= 1     _prefix = [c1]          for c in range(c2):         _prefix += [c] * D[c]     _suffix = []     for c in range(c2 + 1, 10):         _suffix += [c] * D[c]     num = ''.join([str(c2)] * D[c2])     prefix = ''.join(map(str, _prefix))     suffix = ''.join(map(str, _suffix))      if c2 == 0:         print((min(prefix + substr + num + suffix,                   prefix + num + substr + suffix)))     else:         D[c1] += 1         st = []         for c in range(10):             st += [c] * D[c]         print((min(prefix + substr + num + suffix,                   prefix + num + substr + suffix,                   substr + ''.join(map(str, st))))) except ValueError:     print(substr + '0'*D[0]) 
def main(): n, m, mn, mx = map(int, input().split()) A = list(map(int, input().split())) a = min(A) b = max(A) if a < mn or b > mx: print("Incorrect") return cnt = 0 if a > mn: cnt += 1 if b < mx: cnt += 1 if m + cnt <= n: print("Correct") else: print("Incorrect")  main()
m = int(input()) a = 0 while m > 0:     a += 5     b = a     c = 0     while b % 5 == 0:         b //= 5         c += 1     m -= c if m < 0: print(0) else:     print(5)     print(a, a + 1, a + 2, a + 3, a + 4) 
def g():  return list(map(int,input().split())) n,m,k=g() p=list(range(n+1)) z=[0]*(n+1) for x in g():  z[x]=1 e=[] for i in range(m):  u,v,w=g()  e+=[(w,u,v)] e=sorted(e) def q(x):  if x!=p[x]:   p[x]=q(p[x])  return p[x] for w,u,v in e:  u=q(u);v=q(v)  if u!=v:   if u%5==3:    u,v=v,u   p[u]=v;z[v]+=z[u]   if z[v]==k:    print(((str(w)+' ')*k));return 
def main(): n = int(input()) k = int(input()) n %= 6 a = [0, 1, 2] for i in range(1, n + 1): if (i % 2 == 1): a[0], a[1] = a[1], a[0] else: a[1], a[2] = a[2], a[1] print(a[k])   main()
n = int(input()) s = 0 INF = 10**9 minx = miny = INF maxx = maxy = -INF  for i in range(n):     x1, y1, x2, y2 = list(map(int, input().split()))     s += abs(x1 - x2) * abs(y1 - y2)     minx = min(minx, x1, x2)     maxx = max(maxx, x1, x2)     miny = min(miny, y1, y2)     maxy = max(maxy, y1, y2)  if (maxx - minx) == (maxy - miny) and s == (maxx - minx) ** 2:     print ("YES") else:     print ("NO") 
def check(x, s):     k = 0     for i in str(x):         k += int(i)     return x - k >= s   n, s = map(int, input().split()) l = 0 r = n while r - l > 1:     m = (l + r) // 2     if check(m, s):         r = m     else:         l = m if check(r, s):     print(n - r + 1) else:     print(0)
n = int(input()) L = [(0, 0)] * n for i in range(n):     t = input().split(' ')     a = int(t[0])     b = int(t[1])     L[i] = (a, b) if n <= 4:     print("YES") else:     b0 = True     b1 = True     b2 = True     L0 = []     L1 = []     L2 = []     for j in range(n):         if (L[0][0]-L[1][0])*(L[0][1]-L[j][1])!=(L[0][1]-L[1][1])*(L[0][0]-L[j][0]):             L2.append(L[j])         if (L[2][0]-L[0][0])*(L[2][1]-L[j][1])!=(L[2][1]-L[0][1])*(L[2][0]-L[j][0]):             L1.append(L[j])         if (L[2][0]-L[1][0])*(L[2][1]-L[j][1])!=(L[2][1]-L[1][1])*(L[2][0]-L[j][0]):             L0.append(L[j])     if len(L0) >= 3:         for j in range(2, len(L0)):             if (L0[0][0]-L0[1][0])*(L0[0][1]-L0[j][1])!=(L0[0][1]-L0[1][1])*(L0[0][0]-L0[j][0]):                 b0 = False     if len(L1) >= 3:         for j in range(2, len(L1)):             if (L1[0][0]-L1[1][0])*(L1[0][1]-L1[j][1])!=(L1[0][1]-L1[1][1])*(L1[0][0]-L1[j][0]):                 b1 = False     if len(L2) >= 3:         for j in range(2, len(L2)):             if (L2[0][0]-L2[1][0])*(L2[0][1]-L2[j][1])!=(L2[0][1]-L2[1][1])*(L2[0][0]-L2[j][0]):                 b2 = False     if b0 or b1 or b2:         print("YES")     else:         print("NO") 
mod=10**9+7 f=[0]*500000  def POW(a,b): if(b==0): return 1 if(b&1): return POW(a,b//2)**2*a%mod else: return POW(a,b//2)**2  def C(n,m): if(m>n): return 0 t=f[n]*POW(f[m],mod-2)%mod*POW(f[n-m],mod-2)%mod return t   f[0]=1 for i in range(1,500000): f[i]=f[i-1]*i%mod a,b,k,t=list(map(int,input().split(' ')))  ans=0 for i in range(0,2*t+1): t1=POW(-1,i)*C(2*t,i)%mod t2=(C(210000+2*k*t-a+b+2*t-1-(2*k+1)*i+1,2*t)-C(1+2*k*t-a+b+2*t-1-(2*k+1)*i,2*t))%mod ans=(ans+t1*t2)%mod print(ans) 
import itertools import math  def can_measure(a, d): return any(i + d in a for i in a)  def main(): n, l, x, y = list(map(int, input().split())) a = set(map(int, input().split()))  can_x = can_measure(a, x) can_y = can_measure(a, y) if can_x and can_y: print(0) elif can_x: print(1) print(y) elif can_y: print(1) print(x) else: for i in a: if i + x + y in a: print(1) print(i + x) break else: t = i + x - y in a if 0 <= i + x <= l and t: print(1) print(i + x) break; if 0 <= i - y <= l and t: print(1) print(i - y) break;  else: print(2) print(x, y)   def __starting_point(): main()  __starting_point()
import math from functools import reduce class SegmentTree():     def __init__(self, L, function = lambda x,y: x+y):         self.function = function         N = self.size = len(L)         M = 1 << N.bit_length()         self.margin = 2*M - N         self.L = [None for i in range(self.margin)] + L         for i in range(M-1, 0, -1):             x, y = self.L[i<<1], self.L[i<<1|1]             self.L[i] = None if x is None or y is None else function(x, y)     def modify(self, pos, value):         p = pos + self.margin         self.L[p] = value          while p > 1:             x, y = self.L[p], self.L[p^1]             if p&1: x, y = y, x             self.L[p>>1] = None if x is None or y is None else self.function(x, y)             p>>=1     def query(self, left, right):         l, r = left + self.margin, right + self.margin         stack = []         void = True         while l < r:             if l&1:                 if void:                     result = self.L[l]                     void = False                 else:                     result = self.function(result, self.L[l])                 l+=1             if r&1:                 r-=1                 stack.append(self.L[r])             l>>=1             r>>=1         init = stack.pop() if void else result         return reduce(self.function, reversed(stack), init)  n = int(input()) pies, index, first_equal = [0]*n, [0]*n, [0]*n for i in range(n):     r, h = [int(x) for x in input().split()]     pies[i] = r*r*h s_pies = list(sorted(enumerate(pies), key = lambda p: p[1])) for i in range(n): index[s_pies[i][0]] = i for i in range(1, n):     first_equal[s_pies[i][0]] = i if s_pies[i][1] != s_pies[i-1][1] else first_equal[s_pies[i-1][0]] towers = SegmentTree([0]*(n+1), max) for j, pie in enumerate(pies):     i, k = index[j], first_equal[j]     q = towers.query(0, k+1)     towers.modify(i+1, q + pie) print(math.pi * towers.query(0, n+1)) 
def ii():     return int(input()) def mi():     return list(map(int, input().split())) def li():     return list(mi())  n, k = mi() h = li() m = max(h) f = [0] * (m + 1) for hi in h:     f[hi] += 1 for i in range(m - 1, 0, -1):     f[i] += f[i + 1]  ans = 0 i = m while i > 0:     if f[i] == n:         break     j = i     cur = 0     while j > 0:         if cur + f[j] > k:             break         cur += f[j]         j -= 1     ans += 1     i = j print(ans) 
n = int(input()) l = list(map(int,input().split()))  curr = 0 best = 0 prevs = [0] * 31 for v in l:     curr += v     if v >= 0:         for i in range(0, v):             prevs[i] = curr         for i in range(v, 31):             best = max(curr - prevs[i] - i, best)     else:         for i in range(31):             prevs[i] = min(prevs[i], curr) print(best) 
a, b, c = sorted(map(int, input().split())) if a > 3: print('NO') elif a == 3: if b > 3: print('NO') elif b == 3: if c > 3: print('NO') else: print("YES") elif a == 1: print('YES') else: if b == 2: print('YES') elif b > 4: print('NO') elif b == 4: if c == 4: print('YES') else: print('NO') else: print('NO')
#credits https://www.geeksforgeeks.org/minimum-steps-to-delete-a-ssing-after-repeated-deletion-of-palindrome-subssings/    n=int(input()) s=input() N = len(s) dp = [[0 for x in range(N + 1)]           for y in range(N + 1)] D = [[[] for x in range(N + 1)]           for y in range(N + 1)] ss="" re="" for i in range(0,N):     if re!=s[i]:         ss+=re         re=s[i] ss+=re a=ss N=len(a) for l in range(1, N + 1):      i = 0     j = l - 1     while j < N:          if (l == 1):              dp[i][j] = 1         else:               dp[i][j] =1+dp[i + 1][j]              for K in range(i + 1, j + 1):                  if (a[i] == a[K]):                         if dp[i][j]>=dp[i ][K - 1] + dp[K + 1][j]:                             dp[i][j] = dp[i][K - 1] + dp[K + 1][j]                                                          i += 1         j += 1  print(dp[0][N-1])  
n=int(input()) a=sorted(map(int,input().split())) m=int(input()) b=sorted(map(int,input().split())) c=0 for i in range(n):   for j in range(m):     if abs(a[i]-b[j]) <= 1:       b[j]=-10       c+=1       break print(c)
a,b=list(map(int,input().split())) c,d=list(map(int,input().split()))   x,y=list(map(int,input().split())) z,w=list(map(int,input().split()))   Team1=False Team2=False if(a>w and a>y and d>x and d>z):     Team1=True  if(c>w and c>y and b>x and b>z):     Team1=True  if(((x>b and w>c) or (z>b and y>c)) and ((x>d and w>a) or (z>d and y>a))):     Team2=True   if(Team1):     print("Team 1") elif(Team2):     print("Team 2") else:     print("Draw") 
import sys from itertools import combinations from math import sqrt import numpy as np  read = sys.stdin.read readline = sys.stdin.readline   def main():     N, K, *xyc = list(map(int, read().split()))     x = xyc[::3]     y = xyc[1::3]     xy = list(zip(x, y))     c = xyc[2::3]     left = 0     right = 10 ** 6     delta = 0.1 ** 7     while right - left > delta:         mid = (left + right) / 2         intersections = []         r = [(mid / i) ** 2 for i in c]         for i, j in combinations(list(range(N)), 2):             x1, y1 = xy[i]             x2, y2 = xy[j]             X = x2 - x1             Y = y2 - y1             XY = X ** 2 + Y ** 2             r1 = r[i]             r2 = r[j]              a = (XY + r1 - r2) / 2             b = XY * r1 - a ** 2             if b < delta:                 continue             b = sqrt(b)             xi1 = (a * X + Y * b) / XY + x1             yi1 = (a * Y - X * b) / XY + y1             xi2 = (a * X - Y * b) / XY + x1             yi2 = (a * Y + X * b) / XY + y1             intersections.append((xi1, yi1))             intersections.append((xi2, yi2))          intersections.extend(xy)         intersections = np.array(intersections, np.float)         cnt = np.zeros(len(intersections), np.int64)          for (i, j), k in zip(xy, r):             XY = (intersections[:, 0] - i) ** 2 + (intersections[:, 1] - j) ** 2             cnt[XY < k + delta] += 1          if np.any(cnt >= K):             right = mid         else:             left = mid      print(right)   def __starting_point():     main()  __starting_point()
n=int(input()) s=input() left=0 right=0 left_ques=0 right_ques=0 for i in range(n):     if i<n//2:         if s[i]=='?':             left_ques+=1         else :             left+=int(s[i])     else :         if s[i]=='?':             right_ques+=1         else :             right+=int(s[i]) x=min(left_ques,right_ques) left_ques-=x right_ques-=x if left_ques==0 and right_ques==0:     if left==right:         print("Bicarp")     else :         print("Monocarp") else :     if left_ques==0:         if right_ques%2==0:             x=9*(right_ques//2)+right             if x==left:                 print("Bicarp")             else :                 print("Monocarp")         else :             print("Monocarp")     else :         if left_ques%2==0:             x=9*(left_ques//2)+left             if x==right:                 print("Bicarp")             else :                 print("Monocarp")         else :             print("Monocarp")
# AC import sys   class Main:     def __init__(self):         self.buff = None         self.index = 0      def __next__(self):         if self.buff is None or self.index == len(self.buff):             self.buff = sys.stdin.readline().split()             self.index = 0         val = self.buff[self.index]         self.index += 1         return val      def next_int(self):         return int(next(self))      def cal(self, s):         if len(s) == 1:             return s[0]         if s[0] == 0:             return self.cal(s[1:])         v = 1         for c in s:             v *= c         return v      def solve(self):         n = self.next_int()         t = self.next_int()         ii = 0         tt = 10000000         for i in range(0, n):             fr = self.next_int()             d = self.next_int()             if fr < t:                 fr += (t - fr + d - 1) // d * d             if fr < tt:                 tt = fr                 ii = i         print(ii + 1)   def __starting_point():     Main().solve()  __starting_point()
def nck(n, k, cache = {}):     if k > n or k < 0: return 0     if k == 0 or k == n: return 1     if k*2 > n: k = n-k     if (n, k) in cache: return cache[(n, k)]      z = cache[(n, k)] = nck(n-1, k-1) + nck(n-1, k)     return z  def bits(n):     b = 0     while n:         if n&1: b += 1         n >>= 1     return b  def count(n, k):     z, b, c = 0, 63, 0     for b in reversed(range(64)):         if (n>>b)&1:             z += nck(b, k-c)             c += 1         if not k: break     return z + (bits(n) == k)  def solve(m, k):     lo, hi = 1, 10**18     while lo < hi:         mi = (lo+hi)//2         if count(2*mi, k) - count(mi, k) < m:             lo = mi+1         else:             hi = mi     return hi  m, k = [int(x) for x in input().split()] print(solve(m, k))
kk=0 x = int(input()) y = input() z = [i for i in range(len(y)) if y[i] == '*'] for i in range(0, 100):     for j in range(1, 100):         if i in z and i+j in z and i+2*j in z and i+3*j in z and i+4*j in z:             kk=1 if kk==1:     print("yes") else:     print("no") 
#!/usr/bin/env python3 # -*- coding: utf-8 -*-  def func():     N = int(input())     cells = [0] * N      if N == 1:         return 1      mx = 0     for n in range(N):         cells[n] = list(map(int,input().split()))         mx = max(mx, sum(cells[n]))      ans = None     for j in range(N):         for i in range(N):             if cells[j][i] == 0:                 ans = mx - sum(cells[j])                 cells[j][i] = ans                 if ans <= 0:                     return -1      # validation     for j in range(N):         if sum(cells[j]) != mx:             return -1     for i in range(N):         if mx != sum([cells[j][i] for j in range(N)]):             return -1     if mx != sum([cells[j][j] for j in range(N)]):         return -1     if mx != sum([cells[j][N-1-j] for j in range(N)]):         return -1          return ans  print(func())  
n = int(input()) m = int(input()) a = [] for i in range(n):     a.append(int(input()))  mx = max(a) + m    while m:     for i in range(n):         if a[i] == min(a):             a[i] += 1             m -= 1             break  print(max(a), mx) 
MOD = 10 ** 9 + 7 n, m = input().split(' ') n = int(n) m = int(m) ans = pow(2 * (n + 1), m, MOD) ans = (ans * (n + 1 - m)) % MOD ans = (ans * pow(n + 1, MOD - 2, MOD)) % MOD print(ans) 
#  author: ThePonyCoder #  created: 23.06.2019, 21:58 #  filename: f.py #  path: C:/Users/User/Desktop/python/Prog/CodeForces/rounds/cf_568/f.py  import os  # import random  # sys.setrecursionlimit(999999999) import string  from math import inf from functools import lru_cache  if os.getcwd() == 'C:\\Users\\User\\Desktop\\python\\Prog\\CodeForces' \         or os.environ['COMPUTERNAME'] == 'USER145':     import pdb          import sys          pdb = pdb.Pdb(stdin=sys.stdin, stdout=sys.stdout)     sys.stdin = open('input.txt', 'r')     sys.stdout = open('output.txt', 'w')     from pprint import pprint     from hypothesis import given, settings     from hypothesis import strategies as st   def ri():     return [int(i) for i in input().split()]   def to_bits(l):     ans = 0     for i in l:         ans |= (1 << i - 1)     return ans   user_masks = [0 for i in range(1 << 10)] pizzas = [[] for i in range(1 << 10)]   @lru_cache() def count_sat_users(mask):     ans = 0     cmask = mask     while cmask:         ans += user_masks[cmask]         cmask = (cmask - 1) & mask     return ans   def main():     n, m = ri()     for _ in range(n):         k, *a = ri()         bits = to_bits(a)         user_masks[bits] += 1          ans = (float(-inf), float(inf), -1, -1)          for i in range(m):         c, k, *a = ri()         bits = to_bits(a)         pizzas[bits].append((c, i + 1, bits))  # цена, номер, маска         pizzas[bits].sort()         while len(pizzas[bits]) > 2:             pizzas[bits].pop()     # pprint(pizzas)          for mask_F in range(1 << 9):         for mask_S in range(1 << 9):             if len(pizzas[mask_F]) and len(pizzas[mask_S]) \                     and mask_F != mask_S:                                  mask = mask_F | mask_S                                  satisfied_users = count_sat_users(mask)                                  f_pizza = next(iter(pizzas[mask_F]))                 s_pizza = next(iter(pizzas[mask_S]))                                  summary_cost = 0                 summary_cost += f_pizza[0]                 summary_cost += s_pizza[0]                                  ans = max(ans,                           (satisfied_users,                            -summary_cost,                            s_pizza[1],                            f_pizza[1]))                                  # bruting all masks                 bmask = mask                 while bmask:                     satisfied_users += user_masks[bmask]                     bmask = (bmask - 1) & mask                          if len(pizzas[mask_F]) == 2:                 satisfied_users = count_sat_users(mask_F)                                  it = iter(pizzas[mask_F])                                  f_pizza = next(it)                 s_pizza = next(it)                 summary_cost = 0                 summary_cost += f_pizza[0] + s_pizza[0]                 ans = max(ans,                           (satisfied_users,                            -summary_cost,                            s_pizza[1],                            f_pizza[1]))                          if len(pizzas[mask_S]) == 2:                 satisfied_users = count_sat_users(mask_S)                                  it = iter(pizzas[mask_S])                                  f_pizza = next(it)                 s_pizza = next(it)                 summary_cost = 0                 summary_cost += f_pizza[0] + s_pizza[0]                 ans = max(ans,                           (satisfied_users,                            -summary_cost,                            s_pizza[1],                            f_pizza[1]))          aans = [ans[2],ans[3]]     aans.sort()     print(*aans, sep=' ')   main() 
M,S=list(map(int,input().split()))  if S==0 and M==1:   print('0 0')   return elif S==0 or M*9 < S:   print('-1 -1')   return  m,s=M,S l=[] if s<=(m-1)*9+1:   l.append(1)   s-=1 while len(l)<m:   r = (m-len(l)-1)*9   if s<=r:     l.append(0)   else:     l.append(s-r)     s-=s-r  m,s=M,S h=[] while s>=9:   h.append(9)   s-=9 while len(h)<m:   h.append(s)   s=0  print(''.join(repr(x) for x in l), ''.join(repr(x) for x in h))  
   l, r, k =list(map(int,input().split()))  d = {i:2**i for i in range(10)}  cache = {}  def can(i, m):     return d[i] & m  def calc(m):     b = 1     c = 0     for i in range(10):         if b & m:             c += 1         b *= 2      return c  def sm(ln, k, m, s='', first=False):     if ln < 1:         return 0, 1      if (ln, k, m, s, first) in cache:         return cache[(ln, k, m, s, first)]      ans = 0     count = 0     base = 10 ** (ln-1)      use_new = calc(m) < k      if s:         finish = int(s[0])+1     else:         finish = 10      for i in range(finish):         if use_new or can(i, m):             ss = s[1:]             if i != finish-1:                 ss = ''             nm = m | d[i]             nfirst = False             if i == 0 and first:                 nm = m                 nfirst = True             nexta, nextc = sm(ln-1, k, nm, ss, nfirst)             ans += base * i * nextc + nexta             count += nextc  #    print(ln, k, m, s, first, ans, count)     cache[(ln, k, m, s, first)] = (ans, count)      return ans, count  def call(a, k):     s = str(a)     return sm(len(s), k, 0, s, True)[0]   #print(call(r, k) - call(l-1, k)) print((call(r, k) - call(l-1, k)) % 998244353) 
#!/usr/bin/env python3  from bisect import bisect  [n, k, d] = list(map(int, input().strip().split())) ais = list(map(int, input().strip().split())) if k == 1: print ('YES') return  ais.sort()  # can do ais[i:] cando = [False for _ in range(n)] j = n - 1  # j is such that a[j] > a[i] + d >= a[j - 1]  (upper_bound) a[:j] <= a[i] + d < a[j:] count = 0  # sum(cando[i + k:j + 1]) for i in reversed(list(range(n))): if i + k < n and cando[i + k]: count += 1 if n - i < k: continue if ais[-1] - ais[i] <= d: cando[i] = True continue while ais[j - 1] > ais[i] + d: if cando[j]: count -= 1 j -= 1 cando[i] = (count > 0)   if cando[0]: print ('YES') else: print ('NO')  
s = input() n = len(s) t = 'RBYG' for i in t: ind = s.find(i) % 4 ans = 0 while ind < n: ans += s[ind] == '!' ind += 4 print(ans, end=' ') 
n, m = list(map(int, input().split())) edges_from = [[] for _ in range(n)] edges_to = [[] for _ in range(n)]  for _ in range(m):     _from, to = [int(x)-1 for x in input().split()]     edges_from[_from].append(to)  E_dist_to_goal = [0] * n P_of_reaching = [0] * n P_of_reaching[0] = 1  for v in range(n-2, -1, -1):     routes = edges_from[v]     for next_v in routes:         E_dist_to_goal[v] += E_dist_to_goal[next_v] + 1     E_dist_to_goal[v] /= len(routes)  for v in range(n-1):     P_now = P_of_reaching[v]     routes = edges_from[v]     P_next = P_now / len(routes)     for next_v in routes:         P_of_reaching[next_v] += P_next  initial_ans = E_dist_to_goal[0] answers = [initial_ans] for v in range(n-2):     routes = edges_from[v]     num_of_routes = len(routes)     if num_of_routes == 1:         continue     not_cut_dist = E_dist_to_goal[v]     longest_dist = max([E_dist_to_goal[next_v]+1 for next_v in routes])     after_cut_dist = (not_cut_dist - longest_dist/num_of_routes) * num_of_routes / (num_of_routes-1)     delta = not_cut_dist - after_cut_dist     candidate = initial_ans - delta * P_of_reaching[v]     answers.append(candidate)  print((min(answers))) 
import math  n = int(input()) print(10 * round(n / 10))
a = input() b = input()  symbols = {} pairs = []  for i in range(len(a)):     if a[i] in symbols:         if symbols[a[i]] != b[i]:             print('-1')             break     elif b[i] in symbols:         if symbols[b[i]] != a[i]:             print('-1')             break     else:         symbols[a[i]] = b[i]         symbols[b[i]] = a[i]         if a[i] != b[i]:             pairs.append((a[i], b[i])) else:     print(len(pairs))     for elem in pairs:         print(elem[0], elem[1])
from collections import * import itertools import sys  def main():     a, b = input().split()     ans = a + b     n = len(a)     m = len(b)     for i in range(1, n + 1):         for j in range(1, m + 1):             c = a[:i] + b[:j]             # print(c)             ans = min(ans, c)     print(ans)  main() 
n = int(input()) x = input() d = [0] * n cd = 0 xp = [] for i in range(n): if x[i] == '[': d[i] = cd cd = cd + 1 else: cd = cd - 1 d[i] = cd for i in range(n-1): xp.append((x[i], d[i])) if x[i] == '[' and x[i+1] == ']': xp.extend([(' ', d[i]), (' ', d[i]), (' ', d[i])]) xp.append((x[n-1], d[n-1])) md = max(d) h = md * 2 + 3 res = [] for i in range(h): l = [' ' for j in xp] res.append(l) for i in range(len(xp)): for j in range(h): if xp[i][0] == '[' and j > xp[i][1] and j < h - xp[i][1] - 1: res[j][i] = '|' elif xp[i][0] == ']' and j > xp[i][1] and j < h - xp[i][1] - 1: res[j][i] = '|' elif xp[i][0] == '[' and (j == xp[i][1] or j == h - xp[i][1] - 1): res[j][i] = '+' res[j][i+1] = '-' elif xp[i][0] == ']' and (j == xp[i][1] or j == h - xp[i][1] - 1): res[j][i] = '+' res[j][i-1] = '-'  for i in range(h): print(''.join(res[i]))  
u = v = 0 a, b = input(), input() n, m = len(a), len(b) if n > m: b = '0' * (n - m) + b else: a = '0' * (m - n) + a for i in range(max(n, m)):     u, v = v + u, u + int(a[i]) - int(b[i])     if u > 1:         print('>')         return     elif u < -1:         print('<')         return d = 2 * v + u if u == v == 0: print('=') elif u >= 0 and d >= 0: print('>') elif u <= 0 and d <= 0: print('<') else: print('>' if (u * u > v * (v + u)) ^ (u < 0) else '<')
n = int(input()) a = [input() for i in range(n)] sol = [] for i in range(6):     c = ['purple', 'green', 'blue', 'orange', 'red', 'yellow'][i]     if c not in a:         sol.append(['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind'][i]) print(len(sol)) for i in sol:     print(i) 
import sys n, a, b = list(map(int, input().split()))  cnt = 0 l = [set([x]) for x in range(1, n+1)]  while 1:     l = list([tup[0] | tup[1] for tup in zip(l[::2], l[1::2])])     cnt += 1     for el in l:         if a in el and b in el:             print(cnt if len(el) < n else 'Final!')             return 
import sys  n = int(input()) p = [int(i) for i in input().split()] b = [int(i) for i in input().split()]  ans = 0 num_cycles = 0 checked = set()  for i in range(n):     if i in checked:         continue      checked.add(i)      nxt = p[i] - 1      while nxt != i:         checked.add(nxt)         nxt = p[nxt] - 1      num_cycles += 1  ans += num_cycles if num_cycles != 1 else 0 ans += (sum(b) % 2) == 0  print(ans)
v1, v2 = list(map(int, input().split())) t, d = list(map(int, input().split())) vm = [0] * t  v = v1 for i in range(t):     vm[i] = v     v += d  v = v2 for i in range(t - 1, -1, -1):     vm[i] = min(v, vm[i])     v += d  print(sum(vm)) 
import sys input = sys.stdin.readline from itertools import permutations, accumulate import heapq import bisect from operator import itemgetter  def dijkstra(start, edge):     n = len(edge)     dist = [0]*n     que = [(0, start)]     while que:         d, v = heapq.heappop(que)         if dist[v] < d:             continue         for nv, nd in edge[v]:             if dist[nv] > d + nd:                 dist[nv] = d + nd                 heapq.heappush(que, (dist[nv], nv))     return dist  n, m = map(int, input().split()) W = tuple(map(int, input().split())) LV = sorted((tuple(map(int, input().split())) for _ in range(m)), key=itemgetter(1)) L, V = zip(*LV) P = [0] w_max = max(W) for l, v in LV:   if w_max > v:     print(-1)     return   if P[-1] > l:     P.append(P[-1])   else:     P.append(l) def f(K):   S = list(accumulate((W[k] for k in K)))   edge = [[] for _ in range(n)]   for i in range(n-1):     edge[i+1].append((i, 0))   for i in range(n-1):     for j in range(i+1, n):       if i == 0:         t = S[j]       else:         t = S[j] - S[i-1]       p = P[bisect.bisect_left(V, t)]       edge[j].append((i, -p))   return -dijkstra(n-1, edge)[0]  ans = float("inf") for K in permutations(range(n)):   ans = min(ans, f(K)) print(ans)
a, b = map(int, input().split())  if b - a > 10: print(0) else: s = 1 for i in range(a + 1, b + 1): s *= i print(str(s)[-1])
'''input 4 2 1001 '''  def list_input():     return list(map(int,input().split())) def map_input():     return map(int,input().split()) def map_string():     return input().split()      n,d = map_input() s = input() cur = 0 cnt = 0 while cur < n-1: j = -1 for i in range(cur+1,min(cur+d+1,n)): if s[i] == '1': j = i if j == -1: print(-1) break cur = j cnt += 1 else: print(cnt)
def prime(x):     if x < 2:         return False     if x == 2:         return True     if x % 2 == 0:         return False      for d in range(3, x, 2):         if d * d > x:             break         if x % d == 0:             return False      return True  def main():     n = int(input())     for m in range(1, 1001):         if not prime(n * m + 1):             ans = m             break      print(ans)  main() 
3 # Copyright (C) 2016 Sayutin Dmitry. # # This program is free software; you can redistribute it and/or # modify it under the terms of the GNU General Public License as # published by the Free Software Foundation; version 3 # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; If not, see <http://www.gnu.org/licenses/>.  def main():     n = int(input())     ans = False     for a in range(0, 1001):         for b in range(0, 1001):             left = n - 1234567 * a - 123456 * b             if left >= 0 and left % 1234 == 0:                 ans = True     print("YES" if ans else "NO")  main() 
k = []  x = int(input()) c, d = list(map(int, input().split(' '))) for i in range(x):     a, b = list(map(int, input().split(' ')))     k.append([c*a+b, d*a+b])  k.sort() for i in range(len(k)-1):     if k[i+1][1] < k[i][1]:         print("YES")         quit() print("NO") 
n = int(input())  print(1 + n // 2) 
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools  sys.setrecursionlimit(10**7) inf = 10**20 gosa = 1.0 / 10**10 mod = 10**9+7  def LI(): return [int(x) for x in sys.stdin.readline().split()] def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()] def LF(): return [float(x) for x in sys.stdin.readline().split()] def LS(): return sys.stdin.readline().split() def I(): return int(sys.stdin.readline()) def F(): return float(sys.stdin.readline()) def S(): return input()   def main():     n,k = LI()     if k == 0 or n==k:         return '0 0'      return "1 {}".format(min(n-k, k*2))  print(main())    
n = int(input()) x = 0 cur = 1 lst = 1 while cur + lst <= n:     cur, lst = cur + lst, cur     x += 1 print(x) 
s = input() d = dict() d['V'] = 'K' d['K'] = 'V' m = s.count('VK') s = list(s) for i in range(len(s)):     s[i] = d[s[i]]     m = max(m,''.join(s).count('VK'))     s[i] = d[s[i]] print(m)
n = int(input())  a = b = 1  while a * b < n:     if a < b:         a += 1     else:         b += 1  print(a+b) 
def l2i(s): return [int(i) for i in s.split()] a, b=l2i(input()) t=0 while (a<=b): a*=3 b*=2 t+=1 print(t)
h, n = list(map(int, input().split())) c, m = 0, 2 ** h r = 0 while m > 1:     if c == 0:         if n > m // 2:             r += m - 1             n -= m // 2             c = 1 - c     else:         if n > m // 2:             n -= m // 2         else:             r += m - 1             c = 1 - c     c = 1 - c     r += 1     m //= 2     #print(c, m, r, n) print(r) 
x = int(input())  def solve(x):     count = 0     lst = []     x6 = x * 6     for n in range(1, x + 1):         t, r = divmod(x6, n*(n+1))         if t < 2*n + 1:             break         if r:             continue         m, r = divmod(t + n - 1, 3)         if r:             continue         count += 2         lst.append((n, m))     nn, mm = lst[-1]     if nn == mm:         count -= 1     print(count)     for n, m in lst:         print(n, m)     if nn != mm:         print(mm, nn)     lst.reverse()     for n, m in lst[1:]:         print(m, n)  solve(x) 
n = int(input()) s = input().split() a = [0] * n m = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] for i in range(n):   a[i] = int(s[i]) ans = "No" for i in range(len(m) - n):   if a == m[i:i+n]:     ans = "Yes"     break print(ans)
from math import sqrt  def phi(u): ans = u for i in range(2, int(sqrt(n)) + 1): if u % i == 0: while u % i == 0: u = u / i ans = ans - int(ans / i) if n > 1: ans = ans - int(ans / n) return ans  def binpow(u, a, mod): ans = 1 if a == 0: return 1; while a > 0: if a % 2 == 0: u = (u ** 2) % mod a = int(a / 2) else : ans = (ans * u) % mod a = a - 1 return int(ans)  n = int(input())  b1 = 1 b2 = 0 nn = n for i in range(2, int(sqrt(n)) + 1): if n%i == 0 : while nn % i == 0: b1 = b1 * i nn = nn / i b2 = int(n / b1) break  if b2 < 2: print("NO") return a1 = b1 - binpow(b2, phi(b1) - 1, b1) a2 = b2 - int((a1*b2+1)/b1) print("YES") print(2) print(a1, b1) print(a2, b2) 
r = open('input.txt') w = open('output.txt', mode='w')  f = lambda: map(int, r.readline().split())  f() a, b = f() if a > b: a, b = b, a n = 40001 u, v = [n] * n, [n] * n x = s = 0 u[0] = v[0] = 0  for y in f():     s += y     p = []     h = min(x, y)     for d in range(min(s, a), max(0, s - b - y) - 1, -1):         t = v[d]          if u[d] != n:             u[d + y] = min(u[d], u[d + y])             v[d] = min(t, u[d] + h)             u[d] = n          if t != n:             u[d + y] = min(u[d + y], t + h)     x = y  i = max(s - b, 0) j = min(s, a) + 1  d = min(u[i:j] + v[i:j]) if i < j else n w.write(str(d if d < n else -1))  w.close() r.close()
def gcd(a, b):     a, b = max(a, b), min(a, b)     while b:         a, b = b, a % b     return a   n, m, k = list(map(int, input().split())) _n, _m = n, m n, k = n // gcd(n, k), k // gcd(n, k) m, k = m // gcd(m, k), k // gcd(m, k) a = 2 a, k = a // gcd(a, k), k // gcd(a, k) if k != 1:     print("NO") elif a * n <= _n:     print("YES")     print("0 0")     print(a * n, 0)     print(0, m) elif a * m <= _m:     print("YES")     print("0 0")     print(n, 0)     print(0, m * a) else:     print("NO") 
n,k=list(map(int,input().split())) n=(n//k)%2 print('YES' if n==1 else 'NO') 
n=int(input())  s=input().split()  A=[0,0,0] for i in range(n):     A[i%3]+=int(s[i])  m=max(A)  if(m==A[0]):     print("chest") elif(m==A[1]):     print("biceps") else:     print("back") 
def read_input(): return map(int, input().split())  n = int(input()) a = sorted(read_input())  s = sum(a) i = 0  while 2 * s < 9 * n: delta = 5 - a[i] s += delta i += 1  print(i)
u, v = list(map(int, input().split())) if v < u or (v - u) % 2 != 0:     print(-1) else:     if u == v:         if u == 0:             print(0)         else:             print("1\n" + str(u))     else:         w = (v - u) // 2         if (w | u) == (w + u):             print("2\n" + str(w|u) + ' ' + str(w))         else:             print("3\n" + str(u) + ' ' + str(w) + ' ' + str(w))  
""" Codeforces Testing Round 10 Problem C  Author  : chaotic_iak Language: Python 3.3.4 """  def read(mode=2):     # 0: String     # 1: List of strings     # 2: List of integers     inputs = input().strip()     if mode == 0:         return inputs     if mode == 1:         return inputs.split()     if mode == 2:         return [int(x) for x in inputs.split()]  def write(s="\n"):     if isinstance(s, list): s = " ".join(s)     s = str(s)     print(s, end="")  ################################################### SOLUTION def g(n):     return (10**n-1)//9  def solve(n):     if n <= 6: return n     if 7 <= n <= 11: return 13-n     l = 1     while g(l) < n: l += 1     l -= 1     gl = g(l)     a = n     res1 = 0     res1 += (a // gl) * l     a %= gl     res1 += solve(a)     b = g(l+1) - n     res2 = l+1     res2 += (b // gl) * l     b %= gl     res2 += solve(b)     return min(res1, res2)  n, = read() print(solve(n))
x1, y1, x2, y2 = list(map(int, input().split())) x, y = list(map(int, input().split()))  x, y = abs(x), abs(y)  x_ = abs(x2 - x1) y_ = abs(y2 - y1)  if x_ % x == 0 and y_ % y == 0:     if (x_ // x + y_ // y) % 2 == 0:         print("YES")     else:         print("NO") else:     print("NO") 
n=input() rg=[0]*10 for i in n: rg[int(i)]+=1 rl=[] ff=0 for i in range(len(rg)):     if rg[i]!=0:         rl.append(rg[i])         if i==0: ff=1 fact=[1] fc=1 for i in range(1,20):     fc*=i     fact.append(fc) rt=[] t=0 def cfs(d):     if d==len(rl):         nonlocal t,ff         jj=fact[sum(rt)]         for i in rt: jj=jj/fact[i]         if ff:             jjj=fact[sum(rt)-1]             jjj=jjj/fact[rt[0]-1]             for i in range(1,len(rt)): jjj=jjj/fact[rt[i]]             jj-=jjj         t+=jj         return          for i in range(1,rl[d]+1):         rt.append(i)         cfs(d+1)         rt.pop(-1)  cfs(0) print(int(t))                               ''' ////////////////      //////        ///////      //             ///////     //  //   // ////          //    ///   ///     ///    ///     //            ///  ///     ////     // ////    ////       ///     ///   ///      ///    //           /////////     ////     /////// ////     /////    ///       /// ///        ///   //          ///    ///     ////     //   // //////////////     ///////////   ///////////     //////     ///     ///     //  //   //   // '''  
a=int(input()) b=int(input()) c=int(input()) d=int(input()) e=int(input()) f=int(input()) if e>=f:     ans=min(a,d)     d-=ans     a-=ans     ans*=e     ans+=min(d,b,c)*f else:     ans=min(d,b,c)     d-=ans     ans*=f     ans+=min(a,d)*e print(ans)
a, b, p, x = [int(x) for x in input().split()]  powers = [a]  while powers[-1] != 1:     powers.append(powers[-1] * a % p)      order = len(powers) powers = [powers[-1]] + powers  inverse = pow(order, p-2, p)  def f(sol):     return (x // (p * order)) + (1 if sol <= x % (p * order) else 0)  def chinese(a, n, b, m):     k = inverse * (b - a + m) % m     x = k * n + a     return x % (n * m)  res = 0 for i in range(len(powers)-1):     inv = powers[order - i]     val = inv * b % p          sol = chinese(i, order, val, p)          res += f(sol)      print(res) 
k2, k3, k5, k6 = list(map(int, input().split())) c = min(k2, k5, k6) k2 -= c ans = 256 * c ans += 32 * min(k3, k2) print(ans) 
x, y, n, c = 0, 0, 0, 0 def suma_impares(m): return m * m def suma_n(m): return m * (m - 1) // 2 def cnt(t): u, d, l, r = x + t, x - t, y - t, y + t suma = t ** 2 + (t + 1) ** 2 if u > n: suma -= suma_impares(u - n) if d < 1: suma -= suma_impares(1 - d) if l < 1: suma -= suma_impares(1 - l) if r > n: suma -= suma_impares(r - n) if 1 - l > x - 1 and 1 - d > y - 1: suma += suma_n(2 - l - x) if r - n > x - 1 and 1 - d > n - y: suma += suma_n(r - n - x + 1) if 1 - l > n - x and u - n > y - 1: suma += suma_n(1 - l - n + x) if u - n > n - y and r - n > n - x: suma += suma_n(u - n - n + y) return suma  n, x, y, c = input().split() n, x, y, c = int(n), int(x), int(y), int(c) #for i in range(10): #print(i, cnt(i)) ini, fin = 0, int(1e9) cont = int(1e9) while cont > 0: m = ini paso = cont // 2 m += paso if cnt(m) < c: ini = m + 1 cont -= paso + 1 else: cont = paso print(ini)
import sys l,r=map(int,(sys.stdin.readline().split())) i=64 while i>=0:     if ((1<<i)&l!=0 and (1<<i)&r!=0) or ((1<<i)&l==0 and (1<<i)&r==0):i-=1     else:break print((1<<(i+1))-1)
N, K = list(map(int, input().split()))  print((K+N-1)//N) 
x, y, z, t1, t2, t3 = map(int, input().split()) ladder = abs(x - y) * t1 elevator = abs(x - z) * t2 + 3 * t3 + abs(x - y) * t2 if elevator > ladder: print("NO") else: print("YES")
n, m = list(map(int, input().split())) if n == 1:     print(1) elif m - 1 >= n - m:     print(m - 1) else:     print(m + 1) 
n = int(input()) a = list(map(int, input().split())) c = 0 l = 0 b = 0 while c < len(a) and a[c] == 0:     c += 1     b += 1  if c == len(a):     print(0)     return  d = len(a) - 1 while a[d] != 1:     d -= 1     b += 1  while c <= d:     if a[c] == 0:         l += 1     else:         if l > 1:             b += l         l = 0     c += 1  print(n - b)
#!/bin/python  n, k = list(map(int, input().split())) p = list(map(int, input().split()))  a, b = 0, 0 for i in range(n):     a += p[i]     x = min(8, a)     b += x     a -= x     if b >= k:         print(i+1)         break else:     print(-1) 
n, k = list(map(int, input().split())) a = list(map(int, input().split()))  ans = 0 for i in range(1, n):     diff = k - (a[i] + a[i - 1])     if diff > 0:         a[i] += diff         ans += diff  print(ans) print(' '.join(map(str, a)))  
n = int(input()) a = n * (n + 1) // 2 print(4 * a - 4 * n + 1)
n = int(input()) s = input() a = [False for i in range(26)] for x in s:     a[ord(x.lower()) - ord('a')] = True for x in a:     if not x:         print('NO')         return print('YES') 
def main():     a, b = map(int, input().split(":"))     c = int(input())      a += c // 60     b += c % 60     if b > 59:         b %= 60         a += 1      aa = str(a % 24)     if len(aa) < 2:         aa = "0" + aa      bb = str(b % 60)     if len(bb) < 2:         bb = "0" + bb      print(aa + ":" + bb)  def __starting_point():     main() __starting_point()
n, m = list(map(int, input().split())) a = [list(map(int, input())) for i in range(n)]  ignorable = [True] * n  for i in range(m):     cnt = 0     for j in range(n):         cnt += a[j][i]     if cnt == 1:         for j in range(n):             if a[j][i]:                 ignorable[j] = False  if any(ignorable):     print('YES') else:     print('NO') 
N = int(input()) Check = False Sum = 0 Sum_l, Sum_r = 0, 0 for i in range(N):     x, y = list(map(int, input().split()))     Sum_l += x     Sum_r += y     Sum += x + y     if (x % 2 + y % 2) % 2:         Check = True if Sum % 2:     print(-1) elif Sum_l % 2:     if not Check:         print(-1)     else:         print(1) elif Sum_l % 2 == 0:     print(0) 
def isPrime(n) :      # Corner cases      if (n <= 1) :          return False     if (n <= 3) :          return True        # This is checked so that we can skip       # middle five numbers in below loop      if (n % 2 == 0 or n % 3 == 0) :          return False        i = 5     while(i * i <= n) :          if (n % i == 0 or n % (i + 2) == 0) :              return False         i = i + 6        return True t=int(input()) for yes in range(t): a,b=map(int,input().split()) xx=a-b yy=a+b  if xx==1 and isPrime(yy)==True: print("YES") else: print("NO")
n = int(input()) lcnt = 0 rcnt = 0 for i in range(n):     x, y = map(int, input().split())     if x < 0:         lcnt += 1     else:         rcnt += 1  if (lcnt <= 1 or rcnt <= 1):     print("Yes") else:     print("No")
a, b = map(int, input().split()) a = min(a, b) ans = 1 for i in range(1, a + 1):     ans *= i print(ans)
n = int(input()) print (9 * n, 8 * n)
def reachable(es, source): ret = {source} Q = [source] while Q: cur = Q.pop() for nxt in es[cur]: if nxt not in ret: Q.append(nxt) ret.add(nxt) return ret  def BellmanFord(V:int, es:list, source=0): INF = float("inf") D = [INF]*V D[source] = 0 for _ in range(V): upd = False for f, t, c in es: tmp = D[f] + c if D[t] > tmp: D[t] = tmp upd = True if not upd: return D[-1] else: return None  def main(): N,M,P,*L=map(int,open(0).read().split()) fwd = [[] for _ in range(N)] bwd = [[] for _ in range(N)] tmp = [] for a,b,c in zip(*[iter(L)]*3): fwd[a-1].append(b-1) bwd[b-1].append(a-1) tmp+=[(a-1,b-1,P-c)] judge = reachable(fwd,0) & reachable(bwd,N-1) ans = BellmanFord(N,[(a,b,c) for a,b,c in tmp if a in judge and b in judge]) if ans==None: print(-1) else: print(max(0,-ans))  def __starting_point(): main() __starting_point()
it = lambda: list(map(int, input().strip().split())) INF = float('inf')   def solve():     N = int(input())     S = []     R = []     C = []     for _ in range(N):         s, c = input().strip().split()         S.append(s)         R.append(s[::-1])         C.append(int(c))          vis = set()     mem = dict()      def dp(s, p):         if (s, p) in mem: return mem[s, p]         if s == s[::-1]: return 0         if (s, p) in vis: return INF          ans = INF         vis.add((s, p))         for i, t in enumerate(S if p else R):             if len(t) >= len(s) and t.startswith(s):                 ans = min(ans, dp(t[len(s):], p ^ 1) + C[i])             elif len(s) > len(t) and s.startswith(t):                 ans = min(ans, dp(s[len(t):], p) + C[i])         vis.discard((s, p))         mem[s, p] = ans         return ans              ans = INF     for i in range(N):         ans = min(ans, dp(S[i], 0) + C[i])     return -1 if ans == INF else ans   def __starting_point():     ans = solve()     print(ans) __starting_point()
R=lambda:list(map(int,input().split())) n,k=R() if k==1:print(n) else:     i=0     while (1<<i)<=n:i+=1     print((1<<i)-1) 
n = int(input()) res = -float('inf') for _ in range(n):     a,b = list(map(int,input().split()))     res = max(res,a+b) print(res) 
t = {i: 0 for i in 'qwertyuiopasdfghjklzxcvbnm'} for i in input(): t[i] += 1 print(min([t['i'], t['t'], t['e'] // 3, max(0, (t['n'] - 1)) // 2]))
import sys, math  #f = open('input_0', 'r') f = sys.stdin  P, Y = list(map(int, f.readline().split()))  is_ok = False for t in range(Y, P, -1):   is_ok = True   for x in range(2, P+1):     if t%x == 0:       is_ok = False       break     if x*x > t:       break   if is_ok:     print(t)     break if not is_ok:   print(-1) 
n, m, k = list(map(int, input().split())) m -= 1 line = list(map(int, input().split())) answer = n for i in range(n):     if line[i] == 0:         continue     if line[i] > k:         continue     answer = min(answer, abs(m - i)) print(answer * 10)
from collections import Counter   def input_matrix():     res = tuple((Counter() for _ in range(n + m)))     for i in range(n):         for j, a in enumerate(map(int, input().split())):             res[i + j][a] += 1     return res   n, m = list(map(int, input().split())) if input_matrix() == input_matrix():     print("YES") else:     print("NO") 
import sys a = input() b = input() if a != b:     print(max(len(a), len(b))) else:     print(-1) 
a, b = map(int,input().split()) c, d = map(int,input().split()) ONE = set() TWO = set() for i in range(b, 50000, a):     ONE.add(i) for i in range(d, 50000, c):     TWO.add(i)  opt = 99999 for i in ONE:     if i in TWO:         opt = min(opt, i) if opt == 99999:     print(-1) else:     print(opt)
n = int(input()) if n%3 == 0: print(1, 1, n-2) elif n%3 == 1: print(1, 1, n-2) else: print(1, 2, n-3)
n, a, b, c, d= [int(i) for i in input().split()] o = 0 for i in range(1, n+1): if i+b-c>0 and i+b-c<=n: if i+a-d>0 and i+a-d<=n: if i+a+b-c-d>0 and i+a+b-c-d<=n: o+=1 print(o*n) 
w, h = map(int, input().split()) u1, d1 = map(int, input().split()) u2, d2 = map(int, input().split())  for i in range(h, -1, -1):     w += i     if i == d1:         w = max(w - u1, 0)     elif i == d2:         w = max(w - u2, 0)  print(w)
m = int(input()) c = list(map(int,input().split())) x, y = list(map(int,input().split()))  for i in range(m): sb = sum(c[:-i-1]) si = sum(c[-i-1:]) if x <= sb <= y: if x <= si <= y: print(m-i) break else: print(0) 
import sys  def read_int():     return int(input())  def read_ints():     return [int(x) for x in input().split()]  n = read_int() k = read_int() a = read_int() b = read_int()  cost = 0  if k == 1:     cost = (n - 1) * a else:     while n != 1:         if n % k == 0:             if b < (n - n // k) * a:                 cost += b             else:                 cost += (n - n // k) * a             n = n // k         else:             cost += (n % k) * a             n -= n % k             if n == 0:                 n += 1                 cost -= a  print(cost) 
def ii():     return int(input()) def mi():     return list(map(int, input().split())) def li():     return list(mi()) MX = 10 ** 5  n = ii() fac = 2 pr = [] while fac * fac <= n:     c = 0     while n % fac == 0:         c += 1         n //= fac     if c:         pr.append((fac, c))     fac += 1 if n > 1:     pr.append((n, 1)) if pr:     mx = max(e for p, e in pr)     mn = min(e for p, e in pr)     mx2 = 1     cnt = 0     while mx2 < mx:         mx2 *= 2         cnt += 1     ans = cnt + int(mn != mx2)     pdt = 1     for p, e in pr:         pdt *= p else:     pdt, ans = 1, 0 print(pdt, ans) 
###Prediction and Restriction n,k=list(map(int,input().split())) r,s,p=list(map(int,input().split())) t=input() win=[False]*n def janken(char):     if char=='r':         return p     elif char=='s':         return r     else:         return s cnt=0 for i in range(n):     if i-k<0:         point=janken(t[i])         cnt+=point         win[i]=True     else:         if t[i]!=t[i-k]:             point=janken(t[i])             cnt+=point             win[i]=True         else:             if not win[i-k]:                 point=janken(t[i])                 cnt+=point                 win[i]=True  print(cnt) 
a, b, c = list(map(int, input().split())) x = 2 * (c + min(a, b)) if a != b:     x += 1 print(x) 
def read_data():     n, k, p, x, y = map(int, input().split())     As = list(map(int, input().split()))     return n, k, p, x, y, As  def solve(n, k, p, x, y, As):     '''median (As + Bs) >= y     sum(As + Bs) <= x     1 <= Bi <= p     '''     middle = n // 2     As.sort(reverse=True)     sumA = sum(As)     minSum = sumA + 1 * (n - k)     if minSum > x:         return ['-1']     num_a_over_y = len([1 for a in As if a >= y])     if num_a_over_y > middle:         return ['1'] * (n - k)     min_num_y = middle + 1 - num_a_over_y     if min_num_y > n - k:         return ['-1']     minSum2 = sumA + min_num_y * y + (n - k - min_num_y) * 1     if minSum2 > x:         return ['-1']     return [str(y)] * min_num_y + ['1'] * (n - k - min_num_y)  def __starting_point():     n, k, p, x, y, As = read_data()     seq = solve(n, k, p, x, y, As)     print(' '.join(seq)) __starting_point()
s = input() ok = 1 n = len(s)  def is_vowel(c): return c in "aouie"  for i, x in enumerate(s): if not is_vowel(x) and x != 'n': ok &= ((i + 1 < n) and is_vowel(s[i + 1]))  print("YES" if ok else "NO")
n, m = map(int, input().split())  d = [0 for i in range(7)] g = [[] for i in range(7)]  for i in range(m): x, y = map(int, input().split()) x -= 1 y -= 1 d[x] += 1 d[y] += 1  g[x].append(y) g[y].append(x)  mn = min(d) for i in range(7): for j in range(i): cnt = 0 for k in range(7): if((k in g[i]) and (k in g[j])): cnt += 1 mn = min(mn, cnt) m -= mn print(m) 
n, m =  list(map(int, input().split())) prices =  list(map(int, input().split())) auci = list(map(int, input().split()))  scores = 0  # m auc # n - m default  for i in range(len(prices)):     if (i+1) not in auci:         scores += prices[i]         prices[i] = 0  ra = [] for i in prices:     if i != 0:         ra.append(i) ra.sort() ra = ra[::-1]  for i in ra:     if i > scores:         scores += i     else:         scores *= 2  print(scores) #print(ra) 
m = list(map(int, input().split())) w = list(map(int, input().split())) a = [500, 1000, 1500, 2000, 2500] v = list(map(int, input().split())) ans = 0 for i in range(len(m)):     ans += max(0.3 * a[i], (1 - m[i] / 250) * a[i] - 50 * w[i]) ans += v[0] * 100 ans -= v[1] * 50 print(int(ans)) 
n,m,L,R = list(map(int,input().split())) p = 998244353*2 pp = p//2 #liczba pokryc n x m ze jest parzyscie wiele zer albo parzyscie wiele jedynek def pow(a,w): wyn = 1 mn = a while w > 0: if w%2 == 1: wyn = (wyn * mn)%p mn = (mn*mn)%p w //= 2 return wyn dupsko = pow((R-L+1), m*n) if L == R: print(1)   else: if (m*n)%2 == 1: print(dupsko%pp) else: print((dupsko - dupsko//2)%pp) 
def main():     from sys import stdin, stdout      def read():         return stdin.readline().rstrip('\n')      def read_array(sep=None, maxsplit=-1):         return read().split(sep, maxsplit)      def read_int():         return int(read())      def read_int_array(sep=None, maxsplit=-1):         return [int(a) for a in read_array(sep, maxsplit)]      def write(*args, **kwargs):         sep = kwargs.get('sep', ' ')         end = kwargs.get('end', '\n')         stdout.write(sep.join(str(a) for a in args) + end)      def write_array(array, **kwargs):         sep = kwargs.get('sep', ' ')         end = kwargs.get('end', '\n')         stdout.write(sep.join(str(a) for a in array) + end)      n, m = read_int_array()     minm, maxm = [], []     for _ in range(n):         minm.append(read_int_array())     for _ in range(n):         maxm.append(read_int_array())      for r in range(n):         for c in range(m):             minx = min(minm[r][c], maxm[r][c])             maxx = max(minm[r][c], maxm[r][c])             if r:                 if minx <= minm[r-1][c] or maxx <= maxm[r-1][c]:                     write("Impossible")                     return             if c:                 if minx <= minm[r][c-1] or maxx <= maxm[r][c-1]:                     write("Impossible")                     return             minm[r][c] = minx             maxm[r][c] = maxx     write("Possible")  main() 
n = int(input()) arr = list(map(int, input().split())) arr.sort() arr = arr[::-1] ans = [arr[0]] for i in range(1, n): if(arr[i] < ans[-1]): ans.append(arr[i]) else: ans.append(max(0, ans[-1] - 1)) print(sum(ans))
R=lambda:list(map(int,input().split())) n,k=R() a=sorted(R()) b=0 for i in a:   while i>k+k:     k+=k     b+=1   k=max(k,i) print(b) 
n = int(input()) min1, max1 = map(int, input().split()) min2, max2 = map(int, input().split()) min3, max3 = map(int, input().split())  d1 = min(n - min2 - min3, max1) d2 = min(n - d1 - min3, max2) d3 = n - d1 - d2  print(d1,d2,d3)
# You lost the game.  n = int(input()) L = list(map(int, input().split()))  if n == 1:     if L[0] == 0:         print("UP")     elif L[0] == 15:         print("DOWN")     else:         print("-1") else:     d = L[n-2] - L[n-1]     if d < 0:         if L[n-1] == 15:             print("DOWN")         else:             print("UP")     else:         if L[n-1] == 0:             print("UP")         else:             print("DOWN") 
v = list('aeiou') s = [c in v for c in input()] t = [c in v for c in input()] if s == t:     print('Yes') else:     print('No')
grid = [list(input()) for i in range(8)] b = 9 w = 9 tblock = False bblock = False for r in range(8):     for c in range(8):         for ri in range(r):             if grid[ri][c] == 'B':                 tblock = True         for ri in range(r+1, 8):             if grid[ri][c] == 'W':                 bblock = True         if grid[r][c] == 'B' and not bblock:             b = min([abs(7-r), b])         elif grid[r][c] == 'W' and not tblock:             w = min([w, r])         tblock = False         bblock = False if b < w:     print('B') else:     print('A')          
n = int(input()) a = list(map(int, input().split()))  m = int(input()) b = list(map(int, input().split()))  ptra = 1 ptrb = 1 sa = a[0]  sb = b[0] ans = 0  while ptra != n and ptrb != m:     if sa == sb:         ans += 1         sa = a[ptra]         sb = b[ptrb]         ptra += 1         ptrb += 1         continue     if sa < sb:         sa += a[ptra]         ptra += 1     else:         sb += b[ptrb]         ptrb += 1 while ptra != n:     sa += a[ptra]     ptra += 1 while ptrb != m:     sb += b[ptrb]     ptrb += 1 if sa != sb:     print(-1)     return print(ans + 1)  
s = input() if (s.count('Danil') + s.count('Olya') + s.count('Slava') + s.count('Ann') + s.count('Nikita') == 1):     print('YES') else:     print('NO') 
def f(n):     m = int(n ** 0.5) + 1     t = [1] * (n + 1)     for i in range(3, m):         if t[i]: t[i * i :: 2 * i] = [0] * ((n - i * i) // (2 * i) + 1)     return [2] + [i for i in range(3, n + 1, 2) if t[i]]  a, b, k = map(int, input().split()) n = 2000001  t, p, x = [-1] * n, f(n), -1 k -= 1; b += 1  for i in range(len(p) - k):     t[p[i]] = p[i + k] - p[i]  t.reverse() for i in range(1, n):     if t[i] < 0: t[i] = t[i - 1] + 1 t.reverse()  for i in range(a + 1, b):     t[i] = max(t[i], t[i - 1])  for l in range(1, b - a + 1):     if t[b - l] < l:         x = l         break print(x)
a,h,w=(int(x) for x in input().split()) if h==w:     if a<h:         n=w//a         x=(w-a*n)/(n+1)         print(x)     elif a==h:         print(0)     else:         print(-1) else:     for i in range(100):         if h>w:             w,h=h,w         if w>h+a*2:             w=w-h-a     if h>w:         w,h=h,w      m=h//a     s=(w-h)//a     r=0     if m<s or s==0:         for i in range(m,0,-1):             x=(h-a*i)/(i+1)             w1=w-x             a1=a+x             q=w1%a1             if q<0.00000001 or a1-q<0.0000001:                 r=1                 break         if r==0:             print(-1)         else:             print(x)     else:         for i in range(s,0,-1):             x=(w-h-i*a)/i             w1=w-x             a1=a+x             q=w1%a1             if q<0.00000001:                 r=1                 break         if r==0:             print(-1)         else:             print(x)
ii = lambda: int(input()) mi = lambda: map(int, input().split()) li = lambda: list(mi())  n = ii() a = [li() for _ in range(n)] k = ii() ans = 0 for l, r in a:     ans += k <= r print(ans)
import sys  fin = sys.stdin fout = sys.stdout  #fin = open("input.txt", 'r') #fout = open("output.txt", 'w')  s = fin.readline().strip() n = len(s) for L in range(n):     for R in range(L + 1, n + 1):         s1 = s[:L]         s2 = s[L:R]         s3 = s[R:]         if (s1 + s3 == "CODEFORCES"):             print("YES")             return print("NO") 
n = int(input()) ans = 0 for i in range(1, n - 1):     ans += (i + 1) * (i + 2) print(ans)
hola = 0 a = int(input()) d = len(str(a)) k = 10**(d-1) for i in range(1, d):     hola += i * (10**(i-1)*9)  hola += d * (a-k+1) print(hola)
from sys import stdin, stdout  n, k = map(int, stdin.readline().split()) values = list(map(int, stdin.readline().split()))  sze = max(values) used = [0 for i in range(sze + 1)] challengers = [[] for i in range(n + 1)]  i = 0 cnt = 0      for i in range(n):     if values[i] == k:         cnt += 1     elif used[values[i]] >= cnt:         used[values[i]] += 1         challengers[used[values[i]]].append(values[i])      for i in range(n, cnt - 1, -1):     if len(challengers[i]):         stdout.write(str(challengers[i][0]))         break else:     stdout.write('-1')
R=lambda:list(map(int,input().split())) n,x=R() print('YES'if sum(R())+n-1==x else'NO') 
n, m =list(map(int, input().split())) if m % n != 0: print( m // n + 1) else: print(m // n) 
 import sys #sys.stdin=open("data.txt") input=sys.stdin.readline  possible=[0]*26  for i in input().strip():     possible[ord(i)-97]+=1  # make changes temp=[] for i in range(26):     if possible[i]%2: temp.append(i) while len(temp)>1:     possible[temp[0]]+=1     possible[temp[-1]]-=1     temp.pop(0)     temp.pop(-1)  # print stuff for i in range(26):     print(chr(97+i)*(possible[i]//2),end="") if temp: print(chr(97+temp[0]),end="") for i in range(26)[::-1]:     print(chr(97+i)*(possible[i]//2),end="")
a = 0 b = 0 x = {'Q': 9, 'q':9, 'R':5, 'r':5, 'B':3, 'b':3, 'N':3, 'n':3, 'P': 1, 'p': 1} for i in range(8):     t = [i for i in input()]     for i in t:         if ord(i) >= 97 and i in x:             a += x[i]         elif i in x:             b += x[i] if a == b:     print("Draw") elif a < b:     print("White") else:     print("Black")
from bisect import bisect_left   N, M = list(map(int, input().split())) S = input() good = [] bad = [] for i in range(N + 1):     if S[i] == "1":         bad.append(i)     else:         good.append(i)  ans = [] cur = N while True:     if cur == 0:         print((" ".join(map(str, ans[::-1]))))         break     idx = bisect_left(good, cur - M)     nx = good[idx]     ans.append(cur - nx)     if cur == nx:         print((-1))         break     cur = nx 
k = int(input()) x, y = list(map(int, input().split())) ans = [] if k % 2 == 0:     if (x + y) % 2 == 1:         print((-1))         return x_reverse = False y_reverse = False if x < 0:     x *= -1     x_reverse = True if y < 0:     y *= -1     y_reverse = True   def app(a, b):     nonlocal ans     if x_reverse:         a *= -1     if y_reverse:         b *= -1      ans.append((a, b))   nowx = 0 nowy = 0  while abs(x - nowx) + abs(y - nowy) >= 2 * k:     if abs(x - nowx) > k:         nowx += k     else:         nowy += k     app(nowx, nowy)   def ok():     app(x, y)     print((len(ans)))     for a, b in ans:         print((a, b))     return   rest = abs(x - nowx) + abs(y - nowy) if rest == k:     ok()  if rest % 2 == 0:     delta = 2 * k - rest     assert delta % 2 == 0     if abs(x - nowx) < abs(y - nowy):         temp = abs(x - nowx) + delta // 2         nowx += temp         nowy += k - temp     else:         temp = abs(y - nowy) + delta // 2         nowy += temp         nowx += k - temp     app(nowx, nowy)     ok()  # 残りが奇数のときは、条件から一旦ゴールをすぎる方向に移動すれば、 # 残りの距離の偶奇が変わる。  if abs(x - nowx) < abs(y - nowy):     nowx += k     app(nowx, nowy) else:     nowy += k     app(nowx, nowy)  x_delta = x - nowx x_pm = x_delta // abs(x_delta) y_delta = y - nowy y_pm = y_delta // abs(y_delta) if abs(x_delta) < abs(y_delta):     delta = 2 * k - (abs(x_delta) + abs(y_delta))     temp = abs(x - nowx) + delta // 2     nowx += x_pm * temp     nowy += y_pm * (k - temp)     app(nowx, nowy)     ok() else:     delta = 2 * k - (abs(x_delta) + abs(y_delta))     temp = abs(y - nowy) + delta // 2     nowy += y_pm * temp     nowx += x_pm * (k - temp)     app(nowx, nowy)     ok()  
n = int(input()) l, r = 0, 10**16 D = [x ** 3.0 for x in range(2, 170417)] DD = [x*x*x for x in range(2, 170417)] while l < r:     m = (l+r) // 2     if sum(int(m/d) for d in D) < n:         l = m + 1     else:         r = m; if sum(l//d for d in DD) == n:     print(l); else :     print((-1)); 
#!/usr/bin/env python3 # 600D_circles.py - Codeforces.com/problemset/problem/600/D by Sergey 2015  import unittest import sys import math import decimal  ############################################################################### # Circles Class (Main Program) ###############################################################################   def sin(x):     decimal.getcontext().prec += 2     i, lasts, s, fact, num, sign = 1, 0, x, 1, x, 1     while s != lasts:         lasts = s         i += 2         fact *= i * (i-1)         num *= x * x         sign *= -1         s += num / fact * sign     decimal.getcontext().prec -= 2     return +s   def cos(x):     decimal.getcontext().prec += 2     i, lasts, s, fact, num, sign = 0, 0, 1, 1, 1, 1     while s != lasts:         lasts = s         i += 2         fact *= i * (i-1)         num *= x * x         sign *= -1         s += num / fact * sign     decimal.getcontext().prec -= 2     return +s   def pi():     decimal.getcontext().prec += 2     three = decimal.Decimal(3)     lasts, t, s, n, na, d, da = 0, three, 3, 1, 0, 0, 24     while s != lasts:         lasts = s         n, na = n+na, na+8         d, da = d+da, da+32         t = (t * n) / d         s += t     decimal.getcontext().prec -= 2     return +s   def asin(x):     decimal.getcontext().prec += 2     b, e = -pi()/2, pi()/2     while True:         mid = (b + e) / 2         if e == mid or b == mid:             break         if sin(mid) <= x:             b = mid         else:             e = mid     decimal.getcontext().prec -= 2     return +b   def acos(x):     return pi() / 2 - asin(x)   class Circles:     """ Circles representation """      def __init__(self, test_inputs=None):         """ Default constructor """          it = iter(test_inputs.split("\n")) if test_inputs else None          def uinput():             return next(it) if it else sys.stdin.readline().rstrip()          # Reading single elements         [self.xa, self.ya, self.ra] = list(map(decimal.Decimal, uinput().split()))         [self.xb, self.yb, self.rb] = list(map(decimal.Decimal, uinput().split()))          decimal.getcontext().prec = 40          self.l = ((self.xb - self.xa)**2 + (self.yb - self.ya)**2).sqrt()         self.p = (self.ra + self.rb + self.l)/2          if self.l >= self.p:             self.sa = 0             self.sb = 0         elif self.ra >= self.p:             self.sa = 0             self.sb = self.rb**2 * decimal.Decimal.from_float(math.pi)         elif self.rb >= self.p:             self.sa = self.ra**2 * decimal.Decimal.from_float(math.pi)             self.sb = 0         else:             self.aa = 2 * acos(                 (self.ra**2 - self.rb**2 + self.l**2) /                 (2 * self.ra * self.l))             self.ab = 2 * acos(                 (self.rb**2 - self.ra**2 + self.l**2) /                 (2 * self.rb * self.l))             self.sa = self.ra**2 * (self.aa - sin(self.aa)) / 2             self.sb = self.rb**2 * (self.ab - sin(self.ab)) / 2      def calculate(self):         """ Main calcualtion function of the class """          result = self.sa + self.sb          return str(result)  ############################################################################### # Unit Tests ###############################################################################   class unitTests(unittest.TestCase):      def test_single_test(self):         """ Circles class testing """          # Constructor test         test = "0 0 4\n6 0 4"         d = Circles(test)         self.assertEqual(d.l, 6)          # Sample test         self.assertEqual(Circles(test).calculate()[:8], "7.252988")          # Sample test         test = "0 0 5\n11 0 5"         self.assertEqual(Circles(test).calculate(), "0")          # Sample test         test = "44721 999999999 400000000\n0 0 600000000"         self.assertEqual(Circles(test).calculate()[:9], "0.0018834")          # My tests         test = ""         # self.assertEqual(Circles(test).calculate(), "0")          # Time limit test         # self.time_limit_test(5000)      def time_limit_test(self, nmax):         """ Timelimit testing """         import random         import timeit          # Random inputs         test = str(nmax) + " " + str(nmax) + "\n"         numnums = [str(i) + " " + str(i+1) for i in range(nmax)]         test += "\n".join(numnums) + "\n"         nums = [random.randint(1, 10000) for i in range(nmax)]         test += " ".join(map(str, nums)) + "\n"          # Run the test         start = timeit.default_timer()         d = Circles(test)         calc = timeit.default_timer()         d.calculate()         stop = timeit.default_timer()         print(("\nTimelimit Test: " +               "{0:.3f}s (init {1:.3f}s calc {2:.3f}s)".               format(stop-start, calc-start, stop-calc)))  def __starting_point():      # Avoiding recursion limitaions     sys.setrecursionlimit(100000)      if sys.argv[-1] == "-ut":         unittest.main(argv=[" "])      # Print the result string     sys.stdout.write(Circles().calculate())  __starting_point()
n=int(input()) if n==2:     print(2) else:     print(1)
from collections import deque  n = int(input()) p = list(map(int,input().split())) a = list(map(int,input().split())) edge = [[] for i in range(n)] for i in range(n-1):     edge[p[i]-1].append(i+1)   dp = [0 for i in range(n)] size = [not edge[v] for v in range(n)]  res = [] deq = deque([0]) while deq:     v = deq.popleft()     res.append(v)     for nv in edge[v]:         deq.append(nv)  res = res[::-1]  for v in res:     tmp = -1     S = 0     for nv in edge[v]:         tmp = max(tmp,dp[nv])         size[v] += size[nv]         S += a[nv]      if not edge[v]:         dp[v] = a[v]         continue      rest = tmp*size[v] - S     if a[v]<=rest:         dp[v] = tmp     else:         q = (a[v]-rest)//size[v]         r = (a[v]-rest)%size[v]         if r:             dp[v] = tmp + q + 1         else:             dp[v] = tmp + q     a[v] += S  print(dp[0])
def check(w, s):     j = 0     for i in range(len(s)):         while j < len(w) and s[i] != w[j]:             j += 1         if j >= len(w) or s[i] != w[j]:             return False         j += 1     return True  n = int(input()) s = input() t = input() st = [] i = 0 while i < n and s[i] == t[i]:     st.append(s[i])     i += 1 w1 = st[:] w2 = st[:] w3 = st[:] w4 = st[:] w1.append(s[i]) w1.append(t[i]) w3.append(s[i]) w3.append(t[i]) w2.append(t[i]) w2.append(s[i]) w4.append(t[i]) w4.append(s[i]) for j in range(i + 1, n):     w1.append(s[j])     w2.append(t[j])     w3.append(t[j])     w4.append(s[j])  res = set() for ww in (w1, w2, w3, w4):     www = ''.join(ww)     if check(www, s) and check(www, t):         res.add(www) print(len(res))
def sol():      n = int(input())     st = list(map(int, input().split(' ')))     d = {}     for x in range(n):         d[x] = []      st = [(st[i], i) for i in range(len(st))]     st = sorted(st)      for a0 in range(n - 1):         u, v = map(int, input().split(' '))         u, v = u - 1, v - 1         d[u].append(v)         d[v].append(u)      hardest = []     almost = []      single_hardest = st[-1][0]      for x in st[::-1]:         if x[0] == single_hardest:             hardest.append(x[1])         elif x[0] == single_hardest-1:             almost.append(x[1])         else:             break      def inter(a, b):         c = []         for x in a:             if x in b:                 c.append(x)         return c      lower_bound = single_hardest      inte = d[hardest[0]]+[hardest[0]]     for h in hardest[1:]:         inte = inter(inte, d[h]+[h])      if not inte:         return (single_hardest+2)      if len(hardest) > 1:         return single_hardest+1      # hardest is len 1     if not almost:         return single_hardest      cand = st[-1][1]      for h in almost:         if h not in d[cand]:             return single_hardest+1     return single_hardest  print(sol())
n, m = map(int, input().split()) if m <= 1:     print(1)     return print(min(m, n - m))
k, r = list(map(int, input().split()))  ans = 10 for x in range(1, 11):     mod = k * x % 10     if mod == 0 or mod == r:         ans = x         break  print(ans) 
#!/usr/bin/env python3  def main():     import re      n, m = list(map(int, input().split()))     left = right = -1     for i in range(n):         mt = re.search(r"X+", input())         if mt is not None:             t = mt.start()             if t != left != -1:                 print("NO")                 break             left = t             t = mt.end()             if t != right != -1:                 print("NO")                 break             right = t     else:         print("YES")  main() 
a, b = list(map(int, input().split(' '))) c, d = list(map(int, input().split(' '))) e, f = list(map(int, input().split(' '))) x=[[a, b],[c,d],[e,f]] x.sort() a, b, c, d, e, f = x[0][0], x[0][1], x[1][0], x[1][1], x[2][0], x[2][1] if (a==c==e or b==d==f):     print(1)     quit()  if a == c:     if b<f<d:         print(3)         quit()     print(2)     quit()  if c == e:     if (d<b<f):         print(3)         quit()     print(2)     quit()  if b == d:     print(2)     quit()  if d == f:     print(2)     quit()  if b == f:     if a<c<e:         print(3)         quit()     print(2)     quit()  print(3) quit() 
import math,string,itertools,fractions,heapq,collections,re,array,bisect from itertools import chain, dropwhile, permutations, combinations from collections import defaultdict, deque  def VI(): return list(map(int,input().split()))  def main1(k):     # works correctly, but too slow and generates many more vertices than necessary.     # doesn't pass the time constraint with this implementation. (prints 10^5 lines)     # ==> use the editorial solution below.     if k%2==0:         print("NO")         return     print("YES")     n = 2*(k**2-k+1)     m = n*k//2     print(n, m)     i = 0     g = [[] for i in range(n+1)]     print(1,n//2+1)     off = 1     for j in range(0,k-1,2):         j1 = off + j+1         j2 = off + j+2         print(off,j1)         print(off,j2)         l1 = off + k + j*(k-1)         l2 = off + k + (j+1)*(k-1)         for l in range(k-1):             print(j1, l1+l)             print(j2, l2+l)             for m in range(k-1):                 print(l1+l,l2+m)     off = n//2+1     for j in range(0,k-1,2):         j1 = off + j+1         j2 = off + j+2         print(off,j1)         print(off,j2)         l1 = off + k + j*(k-1)         l2 = off + k + (j+1)*(k-1)         for l in range(k-1):             print(j1, l1+l)             print(j2, l2+l)             for m in range(k-1):                 print(l1+l,l2+m)  def main(k):     # following the editorial algo     if k%2==0:         print("NO")         return     print("YES")     if k==1:         print("2 1")         print("1 2")         return     n = 2*k+4     m = n*k//2     e = []     e.extend([(1,n//2+1)])     off = 1     for j in range(off+1,off+k):         e.extend([(off, j)])     for j in range(off+1,off+k):         for i in range(j+1,off+k):             if (i==j+1 and (j-off)%2==1):# or (j==off+1 and i==off+k-1):             #if (i==j+1 and i%2==0) or (j==off+1 and i==off+k-1):                 continue             e.extend([(j,i)])         e.extend([(j,off+k),(j,off+k+1)])     e.extend([(off+k,off+k+1)])     off = n//2+1     for j in range(off+1,off+k):         e.extend([(off, j)])     for j in range(off+1,off+k):         for i in range(j+1,off+k):             if (i==j+1 and (j-off)%2==1):# or (j==off+1 and i==off+k-1):                 continue             e.extend([(j,i)])         e.extend([(j,off+k),(j,off+k+1)])     e.extend([(off+k,off+k+1)])     print(n, m)     for x in e:         print(*x)    def main_input(info=0):     k = int(input())     main(k)  def __starting_point():     main_input()  __starting_point()
#       import collections, atexit, math, sys, bisect   sys.setrecursionlimit(1000000) def getIntList():     return list(map(int, input().split()))      try :     #raise ModuleNotFoundError     import numpy     def dprint(*args, **kwargs):         print(*args, **kwargs, file=sys.stderr)     dprint('debug mode') except ModuleNotFoundError:     def dprint(*args, **kwargs):         pass    inId = 0 outId = 0 if inId>0:     dprint('use input', inId)     sys.stdin = open('input'+ str(inId) + '.txt', 'r') #标准输出重定向至文件 if outId>0:     dprint('use output', outId)     sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #标准输出重定向至文件     atexit.register(lambda :sys.stdout.close())     #idle 中不会执行 atexit      N, M, Q = getIntList()  s1 = input() s2 = input()  tot = 0 zt = [0]  for i in range(N):     if s1[i:i+M] == s2:         tot+=1     zt.append(tot) dprint(zt) for i in range(Q):     a,b = getIntList()     b0 = b- M+1     if b0<a:         print(0)     else:         print(zt[b0] - zt[a-1])        
ans = {}  def gen(n, k, d, used = False):     if not ans.get((n, k, d, used)):         if not n and used:             ans[(n, k, d, used)] = 1         else:             ans[(n, k, d, used)] = sum(gen(n - x, k, d, used or x >= d) for x in range(1, min(n, k) + 1) if max(x, n - x) >= d or used)     return ans[(n, k, d, used)]   n, k, d = list(map(int, input().split())) print(gen(n, k, d)  % 1000000007) 
# You lost the game.  n = int(input()) s = str(input())  R = [] b = 0 for i in range(n):     if s[i] == "B":         b += 1     elif b > 0:         R += [b]         b = 0 if b > 0:     R += [b] print(len(R)) for i in range(len(R)):     print(R[i],end=" ") 
n, m, p = [int(x) for x in input().split()] A = input().rstrip() B = input().rstrip()  pair = [0] * n stack = [] for (i, c) in enumerate(A):     if c == '(':         stack.append(i)     else:         j = stack.pop()         pair[i] = j         pair[j] = i  start = 0 pointer = p - 1 left = list(range(-1, n-1)) right = list(range(1, n+1)) left[0] = None right[-1] = None  for c in B:     if c == 'R':         pointer = right[pointer]     elif c == 'L':         pointer = left[pointer]     else:         if pair[pointer] < pointer:             if right[pointer] is not None:                 left[right[pointer]] = left[pair[pointer]]             if left[pair[pointer]] is not None:                 right[left[pair[pointer]]] = right[pointer]             else:                 start = right[pointer]              if right[pointer] is None:                 pointer = left[pair[pointer]]             else:                 pointer = right[pointer]         else:             if right[pair[pointer]] is not None:                 left[right[pair[pointer]]] = left[pointer]             if left[pointer] is not None:                 right[left[pointer]] = right[pair[pointer]]             else:                 start = right[pair[pointer]]               if right[pair[pointer]] is None:                 pointer = left[pointer]             else:                 pointer = right[pair[pointer]]  i = start while right[i] is not None:     print(A[i], end = '')     i = right[i] print(A[i]) 
""" Codeforces Round 241 Div 1 Problem A  Author  : chaotic_iak Language: Python 3.3.4 """  class InputHandlerObject(object):     inputs = []      def getInput(self, n = 0):         res = ""         inputs = self.inputs         if not inputs: inputs.extend(input().split(" "))         if n == 0:             res = inputs[:]             inputs[:] = []         while n > len(inputs):             inputs.extend(input().split(" "))         if n > 0:             res = inputs[:n]             inputs[:n] = []         return res InputHandler = InputHandlerObject() g = InputHandler.getInput  ############################## SOLUTION ############################## n = int(input().strip()) mn = -2*10**9 mx = 2*10**9 repl = [(">", "<="), (">=", "<"), ("<=", ">"), ("<", ">=")] for i in range(n):     a = g()     a[1] = int(a[1])     if a[2] == "N":         for qq,qqq in repl:             if qq == a[0]:                 a[0] = qqq                 break     if a[0] == ">": a[1] += 1     if a[0] == "<": a[1] -= 1     if a[0][0] == ">": mn = max(mn, a[1])     if a[0][0] == "<": mx = min(mx, a[1])  if mn <= mx:     print(mn) else:     print("Impossible")
import math a,b= list(map(int,input().split())) n=a+b ans,l=0,1 while l<=n:     g= n//l     if a<g or b<g:         l= (n//g) +1         continue     r= n//g     a_low = (a+g)//(g+1)     a_high = a//g     b_low=(b+g)//(g+1)     b_high = b//g     if (a_low <= a_high and b_low <= b_high):         ans += max(0,min(r,a_high+b_high)- max(l,a_low +b_low)+1)      l=r+1 print(ans) 
n, k = list(map(int, input().split())) a = input().split() names = [chr(ord("A") + i) for i in range(26)] + [chr(ord("A") + i) + chr(ord('a') + i) for i in range(26)] ans = [names[i] for i in range(n)] for i in range(k - 1, n): if a[i - k + 1] == "NO": ans[i] = ans[i - k + 1] print(*ans) 
a,b=list(map(int,input().split())) def gcd(a,b):     if(b==0):         return a     return gcd(b,a%b) def burn(n):     c=0     while(n%2==0):         c+=1         n=n//2     while(n%3==0):         c+=1         n=n//3     while(n%5==0):         c+=1         n=n//5     return [c,n] if(a==b):     print(0) else:     g=gcd(a,b)     c=a//g     d=b//g     l1=burn(c)     l2=burn(d)     if(l1[1]==1 and l2[1]==1):         print(l1[0]+l2[0])     else:         print(-1) 
# import sys # sys.stdin = open("F:\\Scripts\\input","r") # sys.stdout = open("F:\\Scripts\\output","w")   MOD = 10**9 + 7 I = lambda:list(map(int,input().split()))  n , a , b = I() l = I() cost = 0 m = min(a,b) for i in range(n//2): if l[i] + l[n-i-1] == 1: print(-1) return if l[i] == 2 and l[n - i - 1] == 2: cost += 2*m elif l[i] == 2 or l[n - i - 1] == 2: if l[i] == 1 or l[n - i - 1] == 1: cost += b else: cost += a if n%2 and l[n//2] == 2: cost += m print(cost)
K = int(input()) print(("-1" if K & 1 else "".join(["wb\n"[2 if k == K else (min(j, k, K - 1 - j,     K - 1 - k) ^ i) & 1] for i in range(2) for j in range(K) for k in range(K +         1)]) * (K >> 1))) 
n = int(input()) ans = 1 i = 2 while i * i <= n:     if n % i == 0:         ans *= i     while n % i == 0:         n //= i     i += 1 ans *= n print(ans)
n = int(input()) a = '0'+input()+'0' if '000' in a or '11' in a:print('No') else:print('Yes') 
n = int(input()) a = list(map(int, input().split())) ans = []  for k in range(1, n + 1):     x = [0] * k      x[0] = a[0]     for i in range(1, k):         x[i] = a[i] - a[i - 1]      ok = True     for i in range(k, n):         if x[i % k] != a[i] - a[i - 1]:             ok = False             break     if ok:         ans.append(k)  print(len(ans)) print(*ans) 
a = list(map(int, input().split())) s = sum(a) for i in range(6):     for j in range(i):         for k in range(j):             ss = a[i] + a[j] + a[k]             if ss == s - ss:                 print('YES')                 return print('NO') 
a,b=map(int,input().split()) ans=0 for i in range(0,40):     for j in range(0,40):         if (2**i)*(3**j)>=a and (2**i)*(3**j)<=b:             ans+=1 print(ans)
n,k=map(int,input().split()) low=1 high=n import sys while low<=high:     mid=(low+high)//2     if mid*(mid+1)//2 -(n-mid)>k:         high=mid-1     elif mid*(mid+1)//2-(n-mid)==k:         print(n-mid)         return     else :         low=mid+1
n = int(input()) a = list(map(int, input().split())) a.sort() ok = False for i in range(n - 2): if a[i] + a[i + 1] > a[i + 2]: ok = True print(("NO", "YES")[ok])
x, y = map(int, input().split())  if y == 0: print('No') return else: y -= 1  if y == 0 and x: print('No') return  if y > x or (x - y) & 1: print('No') else: print('Yes')
import sys  def solve():     n,k, = rv()     a, = rl(1)     res = 0     count = [0] * 10     for i in range(n):         if a[i] < 100:             count[10 - (a[i] % 10) - 1] += 1         res += a[i] // 10     for i in range(10):         while count[i] > 0 and k >= i + 1:             res += 1             count[i] -= 1             k -= i + 1     already = res * 10     possible = n * 100     diff = possible - already     if diff > 0:         actual = min(diff, k)         res += actual // 10     print(res)       def prt(l): return print(' '.join(map(str, l))) def rs(): return map(str, input().split()) def rv(): return map(int, input().split()) def rl(n): return [list(map(int, input().split())) for _ in range(n)]   if sys.hexversion == 50594544 : sys.stdin = open("test.txt") solve()
n, m = map(int, input().split()) a = [int(i) for i in input().split()] b = [int(i) for i in input().split()] a.sort() b.sort() for i in a:     if i in b:         print(i)         break else:     print(min(a[0], b[0]), max(a[0], b[0]), sep = '') 
""" Codeforces Good Bye 2016 Contest Problem A  Author  : chaotic_iak Language: Python 3.5.2 """  ################################################### SOLUTION  def main():     n,k = read()     avail = 240-k     i = 1     while i <= n and avail >= 5*i:         avail -= 5*i         i += 1     print(i-1)  #################################################### HELPERS  def read(callback=int):     return list(map(callback, input().strip().split()))  def write(value, end="\n"):     if value is None: return     try:         value = " ".join(map(str, value))     except:         pass     print(value, end=end)  write(main()) 
import sys,math n,x,y=list(map(int,input().split())) z=list(map(int,input().split())) z.sort() ans=0 for i in range(n):     if z[i]%2==0:         if x>=z[i]//2:             x-=z[i]//2             ans+=1         else:             z[i]-=x*2             x=0             y-=z[i]             if y>=0:                 ans+=1             else:                 break     else:         if x>=z[i]//2 and y>=1:             x-=z[i]//2             ans+=1             y-=1         elif x>=z[i]//2+1:             x-=z[i]//2+1             ans+=1         else:             z[i]-=x*2             x=0             y-=z[i]             if y>=0:                 ans+=1             else:                 break print(ans)                                                                                
#JMD #Nagendra Jha-4096    import sys import math  #import fractions #import numpy   ###File Operations### fileoperation=0 if(fileoperation):     orig_stdout = sys.stdout     orig_stdin = sys.stdin     inputfile = open('W:/Competitive Programming/input.txt', 'r')     outputfile = open('W:/Competitive Programming/output.txt', 'w')     sys.stdin = inputfile     sys.stdout = outputfile  ###Defines...### mod=1000000007   ###FUF's...### def nospace(l):     ans=''.join(str(i) for i in l)     return ans  ans=[]  def printDivisors(n) :             # Note that this loop runs till square root      i = 1     while i <= math.sqrt(n):                     if (n % i == 0) :                             # If divisors are equal, print only one              if (n / i == i) :                  ans.append(i)              else :                  # Otherwise print both                  ans.append(i)                 ans.append(n//i)          i = i + 1       ##### Main #### t=1 for tt in range(t): n=int(input()) printDivisors(n) s=set(ans) print(len(s))     #a=list(map(int,sys.stdin.readline().split(' ')))     #n,k,s= map(int, sys.stdin.readline().split(' '))           #####File Operations##### if(fileoperation):     sys.stdout = orig_stdout     sys.stdin = orig_stdin     inputfile.close()     outputfile.close()
n = int(input()) s = input() l = 0 ans = 0 while l < len(s) and s[l] == '<':     ans += 1     l += 1  r = n - 1 while r >= 0 and s[r] == '>':     ans += 1     r -= 1  print(ans) 
arr = [0] * (10 ** 6 + 1) n = int(input()) for i in input().split():     arr[int(i)] += 1 i = 10 ** 6 j = i k = i c = 0 while j > 0:     if arr[j] % 2 == 1 and (arr[j] > 1 or c == 0):         arr[j - 1] += 1         c = 1     else:         c = 0     j -= 1 r = 0 while i > 0 and k > 0:     if arr[i] < 2:         if i == k:             k -= 1         i -= 1     elif i == k and arr[i] < 4:         k -= 1     elif arr[k] < 2:         k -= 1     else:         r += i * k         arr[i] -= 2         arr[k] -= 2 print(r)
'''input 3 aa jj aa '''  def list_input():     return list(map(int,input().split())) def map_input():     return map(int,input().split()) def map_string():     return input().split()   n = int(input()) d = {} pos = {} for _ in range(n): s = list(input()) s = s[::-1] for i in range(len(s)): try: d[s[i]] += 10**i except: d[s[i]] = 10**i pos[s[i]] = True if i == len(s)-1: pos[s[i]] = False a = [] b = [] for i in d: a.append(d[i]) if pos[i]: b.append(d[i]) if len(b):a.remove(max(b)) a.sort(reverse = True) # print(a) ans = 0 for i in range(len(a)): ans += (i+1)*a[i] print(ans)
a, b = list(map(int, input().split(' '))) print(min([a, b, (a+b)//3])) 
a = [] b = [] x = input() for i in range(len(x)-1):     if x[i]+x[i+1] == 'AB':         a.append(i)     elif x[i]+x[i+1] == 'BA':         b.append(i)  if a == [] or b == []:     print("NO")     quit()      if abs(min(a)-max(b))>1 or abs(max(a)-min(b))>1:     print("YES")     quit() print("NO") 
import sys  a = [0,] b = [0,] ans1 = [] ans2 = [] n = int(input()) s = input() nums = s.split() for i in range(0, n):     a.append(int(nums[i]))  k = int(input()) s = input() nums = s.split() for i in range(0, k):     b.append(int(nums[i]))  def f(x, y, z):     #print(x,y,z)     pos1 = x     pos2 = x     if x == y:         return 1     for i in range(x, y + 1):         if a[i] > a[pos1]:             pos1 = i         if a[i] >= a[pos2]:             pos2 = i     for i in range(x, y):         if a[i] == a[pos2]:             if a[i + 1] < a[i]:                 pos2 = i     for i in range(x + 1, y + 1):         if a[i] == a[pos1]:             if a[i - 1] < a[i]:                 pos1 = i     if pos1 != x or a[pos1] > a[pos1 + 1]:         for i in range(0, pos1 - x):             ans1.append(pos1 - x + z - i)             ans2.append('L')         for i in range(0, y - pos1):             ans1.append(z)             ans2.append('R')     elif pos2 != y or a[pos2] > a[pos2 - 1]:         for i in range(0, y - pos2):             ans1.append(pos2 - x + z)             ans2.append('R')         for i in range(0, pos2 - x):             ans1.append(pos2 - x + z - i)             ans2.append('L')     else:         return 0      return 1  lasti = 0 j = 1 sum = 0 for i in range(1, n+1):     if j > k:         print('NO')         return     sum += a[i]     #print(i, sum, j)     if sum > b[j]:         print('NO')         return     if sum == b[j]:         if f(lasti + 1, i, j) == 0:             print('NO')             return         lasti = i         j += 1         sum = 0  if j <= k:     print('NO')     return  print('YES') for i in range(0, len(ans1)):     print(ans1[i], ans2[i])
a, b = list(map(int, input().split())) if a==b: print("Yes") else: print("No") 
n = int(input()) l = list(map(int, input().split())) max1 = 1 for i in l:     k = 1     x = i     while x % 2 == 0:         k *= 2         x //= 2     max1 = max(max1, k) c = 0 for i in l:     if i % max1 == 0:         c += 1 print(max1, c)
def main():     n, m = map(int, input().split())     res, delta = 0, 1     while n < m:         res += 1         n *= 2         delta *= 2     while n > m:         while n - delta >= m:             res += 1             n -= delta         delta //= 2     print(res)   def __starting_point():     main() __starting_point()
import sys reader = (s.rstrip() for s in sys.stdin) input = reader.__next__  class BIT_RSQ():     def __init__(self, n):         self.n = n         self.data = [0]*(n+2)      def add(self, i, v):         while i <= self.n:             self.data[i] += v             i += i & -i      def sum(self, i):         ret = 0         while(i > 0):             ret += self.data[i]             i -= i & -i         return ret      def query(self, l, r):         return self.sum(r) - self.sum(l-1)      def lowerBound(self, w):         if w <= 0: return 0         x, k = 0, 2**self.n.bit_length()         while k:             if x+k <= self.n and self.data[x+k] < w:                 w -= self.data[x+k]                 x += k             k >>= 1         return x + 1  n = int(input()) edges = [0]*(2*n) c = [0]*(2*n) BIT = BIT_RSQ(2*n)  uf = [-1]*n def root(x):     if uf[x] < 0:         return x     uf[x] = root(uf[x])     return uf[x] def unite(x,y):     rx, ry = root(x), root(y)     if rx == ry:         return False     if uf[rx] > uf[ry]:         rx, ry = ry, rx     uf[rx] += uf[ry]     uf[ry] = rx     return True  for i in range(n):     a,b = list(map(int, input().split()))     a,b = a-1,b-1     c[a] = c[b] = i     edges[a] = b     edges[b] = b  for i in reversed(list(range(2*n))):     j = edges[i]     if j == i:         BIT.add(j+1, 1)     else:         BIT.add(j+1, -1)         cnt = BIT.sum(j+1)         while cnt:             k = BIT.lowerBound(cnt)             if not unite(c[j], c[k-1]):                 print("NO")                 return             cnt -= 1 if sum(i<0 for i in uf) == 1:     print("YES") else:     print("NO")  
def prog():     n = int(input())     inp = list(map(int,input().split()))     ans = 0     for i in range(len(inp)):         x,y = 0 ,0         for j in range(i,len(inp)):             x+=inp[j]             y+=100             if(x>y):                 ans = max(ans,(j-i)+1)     print(ans) prog()
import sys  n, k = list(map(int, input().split(' ')))  s = input()  def max_streak(s):     result = 0      for i in range(len(s)):         j = i         while j < len(s) and s[j] == 'N':             j += 1          result = max(result, j - i)      return result  for i in range(n - k + 1):     cur = list(s)     for j in range(i, i + k):         if cur[j] == '?':             cur[j] = 'N'      for j in range(i):         if cur[j] == '?':             cur[j] = 'Y'      for j in range(i + k, n):         if cur[j] == '?':             cur[j] = 'Y'      if max_streak(cur) == k:         print('YES')         return  print('NO') 
def solve():     N, X, D = list(map(int, input().split()))      if D == 0:         if X == 0:             print((1))         else:             print((N+1))         return      LRss = {}     for k in range(N+1):         m = X*k         rem = m%D         minCoef = m//D + k*(k-1)//2         maxCoef = m//D + k*(2*N-k-1)//2         if rem not in LRss:             LRss[rem] = [(minCoef, maxCoef)]         else:             LRss[rem].append((minCoef, maxCoef))      ans = 0     for rem, LRs in list(LRss.items()):         LRs.sort()         LNow, RNow = LRs[0]         for L, R in LRs[1:]:             if L <= RNow:                 if R > RNow:                     RNow = R             else:                 ans += RNow - LNow + 1                 LNow, RNow = L, R         ans += RNow - LNow + 1      print(ans)   solve() 
read = lambda: map(int, input().split()) n = int(input()) for i in range(n):     name, x, y = input().split()     x, y = int(x), int(y)     if x >= 2400 and y > x:         print('YES')         return print('NO')
s = int(input(), 2)  t, ans = 1, 0  while t < s: ans += 1 t *= 4  print(ans) 
n,m = [int(i) for i in input().split()] l = [] for i in range(n):     l.append(input().strip()) while len(l)%2 == 0:     mirror = True     for i in range(len(l)//2):         if l[i] != l[len(l)-1-i]:             mirror = False             break     if mirror:         l = l[:len(l)//2]     else:         break  print(len(l)) 
def key_tri(argument):     return argument[1]  n = int(input()) L = [list(map(int, input().split())) for _ in range(n)] L.sort(key=key_tri) r = 1 t = L[0][1] for k in range(1,n):     if L[k][0]>t:         r+=1         t = L[k][1] print(r) 
def max(a, b): if a > b: return a else: return b n, k = map(int, input().split()) x = [int(t) for t in input().split()] y = [int(t) for t in input().split()] f, s = 0, 0 for i in range(n):     f = max(0, x[i] + f - k * y[i])     s = max(0, y[i] + s - k * x[i])     if f > k or s > k:         print('NO')         return print('YES')
p=1048583 q=1048589 modd=p*q*p*q n,k=tuple(map(int,input().split())) a=[0] wenhao=0 gai=0 for i in range(n+1):     m=input()     if m[0]=='?':         a.append('?')         wenhao+=1     else:         a.append(int(m))         gai+=1  if k==0:     if (a[1]=='?' and gai&1==1) or a[1]==0:         print('Yes')     else:         print('No') else:     if wenhao!=0:         if n&1==1:             print('Yes')         else:             print('No')     else:         m=a[n+1]         nn=a[n]         for i in range(n,0,-1):             m,nn=(nn+k*m)%modd,a[i-1]         if m==0:             print('Yes')         else:             print('No') 
from math import floor, sqrt import bisect  import math   def rwh_primes2(n):     # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188     """ Input n>=6, Returns a list of primes, 2 <= p < n """     correction = (n%6>1)     n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]     sieve = [True] * (n//3)     sieve[0] = False     for i in range(int(n**0.5)//3+1):       if sieve[i]:         k=3*i+1|1         sieve[      ((k*k)//3)      ::2*k]=[False]*((n//6-(k*k)//6-1)//k+1)         sieve[(k*k+4*k-2*k*(i&1))//3::2*k]=[False]*((n//6-(k*k+4*k-2*k*(i&1))//6-1)//k+1)     return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]   k = int(input())  primes = rwh_primes2(k)  a = 1 p2 = 2 for i in primes[::-1]:     if k%i == 0:         p2 = i         break  xx = range(k-p2+1, k+1) #print(list(xx)) if p2>240:     p1 = primes[bisect.bisect_left(primes, int(math.ceil(xx[0]/2)))]     print(p1+1) else:     ans = k     p1 = 1     for x1 in xx:         for i in primes[::-1]:              if i >= x1:                 continue              if x1 % i == 0:                 p1 = i                 break         ans = min(ans, x1-p1+1)      print(ans)
n, p = list(map(int, input().split())) for q in range(5757):     s = bin(n)     if n >= q >= s.count('1'):         print(q)         break     n -= p else:     print(-1) 
n, k = list(map(int, input().split())) s = list(input()) if len(s) == 1 and k: print(0) return if s[0] != '1' and k: k -= 1 s[0] = '1' for i in range(1, len(s)): if s[i] != '0' and k: s[i] = '0' k -= 1 if not k: break print(''.join(s))  
n0, n1, x, y = list(map(int, input().split()))  def f(m, n, x, y):     return max(0, n - (m // y - m // (x * y)))  lo = -1 hi = x * y * (n0 + n1) while lo + 1 < hi:     mid = lo + (hi - lo) // 2     if f(mid, n0, x, y) + f(mid, n1, y, x) <= mid - mid // x - mid // y + mid // (x * y):         hi = mid     else:         lo = mid print(hi) 
#Simple non-optimized class of matrices. Used with small dense matrices. import functools import itertools import math  class NotAMatrixError(Exception):     pass  class MatrixSizeError(Exception):     def __init__(self, s1, s2):         print('sizes do not match : ', s1, ', ', s2)  class NotSquareError(Exception):     pass  class Matrix(list):     def __init__(self, L):         if type(L) == type(self):             self = L             return         n = len(L)         m = len(L[0])         for i in range(n):             if len(L[i]) != m:                 raise NotAMatrixError()         list.__init__(self, L)         self.n = n         self.m = m         self.degrees = []     def check_size(self, M, mode):         n, m = len(M), len(M[0])         for i in range(n):             if len(M[i]) != m:                 raise NotAMatrixError()                  if mode == 'add' and (self.n != n or self.m != m):             raise MatrixSizeError((self.n, self.m), (n,m))         if mode == 'lul' and self.m != n:             print(self.m, n, self.m != n)             raise MatrixSizeError((self.n, self.m), (n,m))     def __add__(self, M):         self.check_size(M, mode = 'add')         return Matrix([[self[i][j]+M[i][j] for j in range(self.m)]for i in range(self.n)])     def __iadd__(self, M):         self.check_size(M, mode = 'add')         for i in range(self.n):             for j in range(self,m):                 self[i][j] += M[i][j]     def __mul__(self, M):         self.check_size(M, mode = 'mul')         l = len(M[0])         return Matrix([[sum(self[i][k]*M[k][j] for k in range(self.m))                  for j in range(l)] for i in range(self.n)])     def issquare(self):         return self.n == self.m     def primary(self):         if self.n != self.m:             raise NotSquareError()         return Matrix([[int(i==j) for j in range(self.m)] for i in range(self.n)])     def __pow__(self, n):         if self.n != self.m:             raise NotSquareError()         if n == 0:             return self.primary()         elif n == 1:             return self         if len(self.degrees) == 0:             self.degrees.append(self*self)         for i in range(n.bit_length() - len(self.degrees) - 1):             self.degrees.append(self.degrees[-1] * self.degrees[-1])         s = [(n>>i)&1 for i in range(1,n.bit_length())]         res = functools.reduce(lambda x,y:x*y, itertools.compress(self.degrees, s))         return res*self if n%2 else res      def drop_degrees(self):         self.degrees.clear()  class Remainder(int):     def __new__(self, n, p):         obj = int.__new__(self, n%p)         obj.p = p         return obj     def __mul__(self, m): return Remainder(int.__mul__(self, m), self.p)     def __add__(self, m): return Remainder(int.__add__(self, m), self.p)     def __sub__(self, m): return Remainder(int.__sub__(self, m), self.p)     def __rmul__(self, m): return Remainder(int.__rmul__(self, m), self.p)     def __radd__(self, m): return Remainder(int.__radd__(self, m), self.p)     def __rsub__(self, m): return Remainder(int.__rsub__(self, m), self.p)     def __neg__(self): return Remainder(int.__neg__(self), self.p)     def __pow__(self, m): return Remainder(int.__pow__(self, m, self.p), self.p)  def solve(n, sx, sy, dx, dy, t):     o, l, j = Remainder(0, n), Remainder(1, n), Remainder(2, n)     N = [[j, l, l, o, l, o],          [l, j, o, l, l, o],          [l, l, l, o, l, o],          [l, l, o, l, l, o],          [o, o, o, o, l, l],          [o, o, o, o, o, l]]     M = Matrix(N)     sx, sy, dx, dy = [Remainder(x, n) for x in [sx, sy, dx, dy]]     v = Matrix([[sx], [sy], [dx], [dy], [o], [l]])     return M ** t * v  n, sx, sy, dx, dy, t = [int(x) for x in input().split()] ans = solve(n, sx, sy, dx, dy, t) print(int(ans[0][0] - 1) + 1, int(ans[1][0] - 1) + 1) 
# You lost the game. s = str(input()) n = len(s) A = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if n < 26:     print(-1) else:     for i in range(n-25):         ok = 1         F = [0 for _ in range(26)]         for j in range(26):             if s[i:i+26].count(A[j]) > 1:                 ok = 0                 break             elif s[i:i+26].count(A[j]) == 0:                 F[j] = 1         if ok:             break     if ok == 0:         print(-1)     else:         j = 0         for k in range(n):             if s[k] == "?":                 if k >= i and k < i+26:                     while F[j] == 0:                         j += 1                     print(A[j],end="")                     F[j] = 0                 else:                     print("A",end="")             else:                 print(s[k],end="")              
""" Codeforces Round 248 Div 2 Problem A  Author  : chaotic_iak Language: Python 3.3.4 """  class InputHandlerObject(object):     inputs = []      def getInput(self, n = 0):         res = ""         inputs = self.inputs         if not inputs: inputs.extend(input().split(" "))         if n == 0:             res = inputs[:]             inputs[:] = []         while n > len(inputs):             inputs.extend(input().split(" "))         if n > 0:             res = inputs[:n]             inputs[:n] = []         return res InputHandler = InputHandlerObject() g = InputHandler.getInput  ############################## SOLUTION ############################## n = int(input()) a = [int(x) for x in g()] c100 = a.count(100) if sum(a) % 200:     print("NO") elif n % 2 and not c100:     print("NO") else:     print("YES")
n, m = list(map(int, input().split())) m += 2 l = [] do = False for i in range(n): s = input().strip() if s.find('1') != -1 or do: do = True l.append(s) n = len(l) if n == 0: print(0) return   dp = [] for i in range(n): dp.append([None] * 2)  for i in range(n): R = 0 for j in range(m): if l[i][j] == '1': R = j L = m - 1 for j in range(m - 1, -1, -1): if l[i][j] == '1': L = j if i == 0: dp[0][0] = R dp[0][1] = (m - 1 - L) else: dp[i][0] = min(dp[i - 1][0] + 2 * R, dp[i - 1][1] + (m - 1)) + 1 dp[i][1] = min(dp[i - 1][0] + (m - 1), dp[i - 1][1] + 2 * (m - 1 - L)) + 1 # print(dp) print(dp[-1][0]) 
import sys  rd = lambda : sys.stdin.readline().rstrip()  n = int(rd()) c = list(map(int, rd().split())) a = list([int(x)-1 for x in rd().split()])  visited = [-1] * (n) res = 0  for i in range(n):     trace = []          t = i     mn = 1e9     while visited[t] == -1:         visited[t] = i         trace.append(t)         t = a[t]              if visited[t] != i:         continue              while len(trace) > 0:         v = trace.pop()         mn = min(mn, c[v])                   if t == v: break          res += mn      print(res) 
n, a, b = list(map(int, input().split())) ans = a + b while ans < 0:     ans += n ans %= n if ans == 0:     print(n) else:     print(ans) 
import sys import math  n = int(sys.stdin.readline()) if n <= 2:   print(1)   return  a = [int(s) for s in sys.stdin.readline().split()]  st = -1 # index of first positive number in current subset of a ed = -1 # index last positive number in current subset of a          # differation is (a[ed] - a[st])/(ed - st) leading_zeros = 0 # -1 before a[st] seg_count = 1  for (i, v) in enumerate(a):   if v == -1:     if st == -1:       leading_zeros += 1     else:       if ed != -1:         # check if v should be a non-positive number         if a[ed] + (i-ed) * (a[ed] - a[st])/(ed-st) <= 0:           st = -1           ed = -1           leading_zeros = 1           seg_count += 1         else:           pass       else:         pass   else:     if st == -1:       st = i # find first positive number     else:       if ed == -1:         ed = i         #print(i)         if (v - a[st]) % (i-st) != 0 or a[st] - (v-a[st])/(i-st) * leading_zeros <= 0:           # a[st..i] can't be an arithmetic progression           st = i           ed = -1           seg_count += 1           leading_zeros = 0         else:           ed = i       else:         if (v-a[ed])%(i-ed) != 0 or (v-a[ed]) * (ed - st) != (a[ed] - a[st]) * (i-ed):           st = i           ed = -1           seg_count += 1           leading_zeros = 0         else:           ed = i #leave ed the first positive number after a[st] is also ok   #print( "[" +str(st) + " " + str(ed) + "] " + str(seg_count) + " " + str(leading_zeros) )  print(seg_count)
n, k = map(int,input().split()) s = input() maxi = 0 a = 0 b = 0 st = 0 for i in range(0, n):     if s[i] == 'a': a += 1     else: b+=1     if min(a, b) > k:         if s[st] == 'a': a-=1         else: b-=1         st += 1     else: maxi += 1 print(maxi)
n = int(input()) a = list(map(int, input().split())) b = [0] for i in range(1, n): if a[i]*2 <= a[0]: b += [i] u=0 v=0 for i in range(n): if i in b: u += a[i] else: v += a[i] if u > v: print(len(b)) for x in b: print(x+1, end=' ') else: print('0')
n=int(input()) tot=0 for i in range(n):     tot+=1/(i+1) print(tot) 
n = int(input()) ans = [] nxt = 1 while n > 0:   x = nxt   n -= nxt   nxt += 1   if n < nxt:     x += n     n = 0   ans.append(str(x)) print(len(ans)) print(" ".join(ans)) 
n = int(input()) m = int(input())  print(m % (1 << n))
n = int(input()) s = input() t = [] vowels = 'aeiouy' for c in s:     if t and t[-1] in vowels and c in vowels:         continue     else:         t.append(c) print(''.join(t)) 
n, a, b = list(map(int, input().split())) s = input() s += '*' n += 1 m = [] i = 0 i1 = -1 while i < len(s):     if s[i] == '*':         if i - i1 > 1:             m.append(i - i1 - 1)         i1 = i     i += 1 sm = a + b for c in m:     if c % 2 == 0:         a = max(0, a - c // 2)         b = max(0, b - c // 2)     else:         if a > b:             a = max(0, a - (c + 1) // 2)             b = max(0, b - c // 2)         else:             b = max(0, b - (c + 1) // 2)             a = max(0, a - c // 2) print(sm - a - b) 
r=int(input()) if r<=4:     print("NO") elif r%2==0:     print("NO") else :     print(1, (r-3)//2)
  n = int(input())  tab = [int(x) for x in input().split()]  if n < 2 or (n == 2 and tab[0] == tab[1]):     print(-1) else:     print(1)     print(tab.index(min(tab)) + 1)  
import getpass import sys   def ria():     return [int(i) for i in input().split()]   if getpass.getuser() != 'frohenk':     filename = 'half'     # sys.stdin = open('input.txt')     # sys.stdout = open('output.txt', 'w') else:     sys.stdin = open('input.txt')     # sys.stdin.close()  n = ria()[0] print(n) print('1 '*n)
def main():     n = int(input())     l = list(map(int, input().split()))     seive = [False, True] * max(l)     a = len(seive)     for i in range(3, int(a ** .5) + 1, 2):         if seive[i]:             for j in range(i * i, a, i):                 seive[j] = False     i = l.count(1)     if i:         res = [1] * i         for a in l:             if a > 1 and seive[a + 1]:                 res.append(a)                 break         if len(res) > 1:             print(len(res))             print(*res)             return     l0, l1 = [], []     for a in l:         if a != 1:             if a & 1:                 for b in l0:                     if seive[a + b]:                         print(2)                         print(a, b)                         return                 l1.append(a)             else:                 for b in l1:                     if seive[a + b]:                         print(2)                         print(a, b)                         return                 l0.append(a)     print(1)     print(l[0])   def __starting_point():     main()  __starting_point()
from collections import Counter, defaultdict import itertools import sys  def main():     n = int(input())     ans = 1     for k in range(1, 10):         v = ((1 << k) - 1) * (1 << (k - 1))         if n % v == 0:             ans = v      print(ans)  main() 
#!/usr/bin/env python3    def addmod(left, right, modulo=1000000007):     res = left + right     if res >= modulo:         res -= modulo     return res  def counter(a, m, d):     res = [0, ] * (2*m)     res[0] = 1     shift = 1     for pos in range(len(a), 0, -1):         ptype = pos & 1         cur = int(a[pos-1])         tres = [0, ] * (2*m)         for i in range(10):             if ptype==1 and i == d:                 continue             if ptype==0 and i != d:                 continue             k = (i * shift) % m             for j in range(m):                 k2 = k*2                 j2 = j*2                 if i < cur:                     tres[k2+0] = addmod(tres[k2+0], addmod(res[j2+0], res[j2+1]))                 elif i == cur:                     tres[k2+0] = addmod(tres[k2+0], res[j2+0])                     tres[k2+1] = addmod(tres[k2+1], res[j2+1])                 else:                     tres[k2+1] = addmod(tres[k2+1], addmod(res[j2+0], res[j2+1]))                 k = k+1 if k+1<m else 0         res = tres         shift = (shift * 10) % m     return res[0]   def solver(ifs):     m, d = list(map(int, ifs.readline().split()))     a = ifs.readline().strip()     b = ifs.readline().strip()     res = counter(b, m, d)     if a != '0':         a = str(int(a) - 1)         if len(a) < len(b):             a = '0' + a         modulo = 1000000007         res = addmod(res, modulo - counter(a, m, d))     print(res)  def main():     import sys     if sys.version_info.major == 3:         from io import StringIO as StreamIO     else:          from io import BytesIO as StreamIO          with StreamIO(sys.stdin.read()) as ifs, StreamIO() as ofs:         _stdout = sys.stdout         sys.stdout = ofs         solver(ifs)         sys.stdout = _stdout         sys.stdout.write(ofs.getvalue())     return 0  def __starting_point():     main()  __starting_point()
def main():     from collections import deque          n, m = [int(i) for i in input().split()]     children = deque([0, int(v), i + 1] for i, v in enumerate(input().split()))          while len(children) > 1:         tmp = children.popleft()         tmp[0] += m         if tmp[1] > tmp[0]:             children.append(tmp)          print(children.popleft()[2])   main() 
n=int(input()) ans=0 ans+=n//100 n%=100 ans+=n//20 n%=20 ans+=n//10 n%=10 ans+=n//5 n%=5 ans+=n print(ans) 
mod=10**9+7 n,k=list(map(int,input().split()))  A=[0]*(n+1) B=[0]*(n+1) C=[0]*(n+1) F=[0]*(n+1) G=[0]*(n+1)  F[0]=G[0]=1 for i in range(1,n+1): G[i]=F[i]=F[i-1]*i%mod G[i]=pow(F[i],(mod-2),mod)  for i in range(0,n): if i*2>n: break B[i]=(F[n-i]*G[i]*G[n-i*2])%mod for i in range(0,n//2+1): for j in range(0,n//2+1): A[i+j]=(A[i+j]+B[i]*B[j])%mod for i in range(0,n+1): A[i]=A[i]*F[n-i]%mod for i in range(0,n+1): for j in range(0,i+1): C[j]=(C[j]+A[i]*F[i]*G[j]*G[i-j]*(1-(i-j)%2*2))%mod print(C[k]%mod) 
n,k = list(map(int, input().split())) b = list(map(int,input().split()))  SSSSSSSSSS = input()  INF = 1000*1000*1000+123 RRRR = []; WWWWWWW = []; OOOOOOOOO = [];  for i in range(n):     if SSSSSSSSSS[i] == 'R':         RRRR.append(b[i])     elif SSSSSSSSSS[i] == 'W':         WWWWWWW.append(b[i])     else:         OOOOOOOOO.append(b[i])    WWWWWWW.sort()  RRRR.sort() WWWWWWW.reverse() RRRR.reverse() OOOOOOOOO.sort() OOOOOOOOO.reverse()  if k == 1:     print(-1)     return   def cccmcmc(A, B):     qanakA = len(A);     qanakB = len(B);      pA = [0 for i in range(qanakA)]     pB = [0 for i in range(qanakB)]     pB[0] = B[0]     pA[0] = A[0]      for i in range(1,qanakA):         pA[i] = pA[i-1] + A[i];     for i in range(1,qanakB):         pB[i] = pB[i-1] + B[i];      res = -1      for i in range(1,min(qanakA+1,k)):         aic = pA[i-1]         bepetk = k-i         if bepetk <= 0 or bepetk > qanakB: continue         bic = pB[bepetk-1]         res = max(res,aic+bic)     return res   res = -1  if len(WWWWWWW) > 0 and len(OOOOOOOOO)> 0:     res = max(res, cccmcmc(WWWWWWW, OOOOOOOOO)) if len(RRRR) > 0 and len(OOOOOOOOO)> 0:     res = max(res, cccmcmc(RRRR, OOOOOOOOO))  print(res) 
#!/usr/bin/env python3  from fractions import Fraction  def __starting_point():     p, q = list(map(int, input().split()))     n = int(input())     l = list(map(int, input().split()))      f = Fraction(l[-1], 1)      for x in l[-2::-1]:         f = 1 / f         f += x      print(["NO", "YES"][f == Fraction(p, q)])    __starting_point()
t = input() k = t.find('=') n = 2 * k - len(t) if n == 2:     if t[1] != '+': t = t[1: ] + '|'     else: t = t[: k - 1] + t[k: ] + '|' elif n == -2: t = '|' + t[: -1] elif n != 0: t = 'Impossible' print(t)
import numpy as np   def solve(n, k):     if k % 2 == 1:         return 0     k //= 2      MOD = 10 ** 9 + 7      dp = np.zeros((1, k + 1), dtype=np.int64)     dp[0, 0] = 1     for i in range(1, n + 1):         max_d = min(i + 1, n - i + 1, k + 1)         ndp = np.zeros((max_d, k + 1), dtype=np.int64)         for d, ks in enumerate(dp):             base = ks[:k - d + 1]             if d > 0:                 ndp[d - 1, d:] += base * d ** 2             if max_d > d:                 ndp[d, d:] += base * (2 * d + 1)             if max_d > d + 1:                 ndp[d + 1, d:] += base         dp = ndp % MOD      return dp[0, k]   n, k = list(map(int, input().split())) print((solve(n, k))) 
N = int(input()) P = [tuple(map(int, input().split())) for _ in range(N)]  odd = [] for (x, y) in P:     dist = abs(x) + abs(y)     odd.append(dist % 2 != 0)  valid = True even = False if all(odd):     pass elif not any(odd):     even = True else:     valid =False  if valid:      M = 31     if even:         print((M+1))         print((*([1 << m for m in range(M)] + [1])))     else:         print(M)         print((*[1 << m for m in range(M)]))      for (x, y) in P:         u = x + y         v = x - y         if even:             u += 1             v += 1         if u >= 0 and v >= 0:             A = 'R'             B = 'U'             C = 'D'             D = 'L'         elif u >= 0 and v < 0:             v *= -1             A = 'U'             B = 'R'             C = 'L'             D = 'D'         elif u < 0 and v >= 0:             u *= -1             A = 'D'             B = 'L'             C = 'R'             D = 'U'         elif u < 0 and v < 0:             u *= -1             v *= -1             A = 'L'             B = 'D'             C = 'U'             D = 'R'          ans = ''         wa = ((1 << M) - 1 - u) // 2         sa = ((1 << M) - 1 - v) // 2         for i in range(M):             check = str(wa >> i & 1) + str(sa >> i & 1)             if check == '00':                 ans += A             elif check == '01':                 ans += B             elif check == '10':                 ans += C             elif check == '11':                 ans += D         if even:             ans += 'L'         print(ans) else:     print((-1)) 
from sys import * n = int(input()) a = input() s = 0 i = 0 while i <= n-1:     if s == 0:         if a[i:i+3] == 'ogo':             s = 1             print('***', end = '')             i+=3         else:             print(a[i], end = '')             i += 1                  else:         if a[i:i+2] == 'go':             i += 2         else:             s = 0
x, n = list(map(int, input().split()))  def primeFactor(N):     i, n, ret, d, sq = 2, N, {}, 2, 99     while i <= sq:         k = 0         while n % i == 0: n, k, ret[i] = n//i, k+1, k+1         if k > 0 or i == 97: sq = int(n**(1/2)+0.5)         if i < 4: i = i * 2 - 1         else: i, d = i+d, d^6     if n > 1: ret[n] = 1     return ret  pf = primeFactor(x) mod = 10 ** 9 + 7 def calc(p):     s = 0     a = n//p     while a:         s += a         a //= p     return pow(p, s, mod)  ans = 1 for p in pf:     ans = ans * calc(p) % mod print(ans)   
a, b, c = list(map(int, input().split())) ans = [] for sum in range(1, 200):     x = b * sum ** a + c     if x <= 0 or x >= 10 ** 9:         continue     summ = 0     for aa in str(x):         summ += int(aa)     if sum == summ:         ans.append(x) print(len(ans)) print(*ans) 
l=list(map(int,input().split())) l.insert(0,0) c1=[1,6,3,8,5,10,7,12,9,23,11,21,13,14,15,16,17,18,19,20,4,22,2,24] c2=[1,23,3,21,5,2,7,4,9,6,11,8,13,14,15,16,17,18,19,20,12,22,10,24] c3=[1,2,3,4,5,6,15,16,9,10,11,12,13,14,23,24,17,18,7,8,21,22,19,20] c4=[1,2,3,4,5,6,19,20,9,10,11,12,13,14,7,8,17,18,23,24,21,22,15,16] c5=[1,2,16,14,5,6,7,8,19,17,11,12,13,9,15,10,3,18,4,20,21,22,23,24] c6=[1,2,17,19,5,6,7,8,14,16,11,12,13,4,15,3,10,18,9,20,21,22,23,24] flag=0 mark=0 for i in range(6): if(l[c1[4*i]] == l[c1[4*i+1]] == l[c1[4*i+2]] == l[c1[4*i+3]]): mark=1 else: mark=0 break if(mark): flag=1  mark=0 for i in range(6): if(l[c2[4*i]] == l[c2[4*i+1]] == l[c2[4*i+2]] == l[c2[4*i+3]]): mark=1 else: mark=0 break if(mark): flag=1  mark=0 for i in range(6): if(l[c3[4*i]] == l[c3[4*i+1]] == l[c3[4*i+2]] == l[c3[4*i+3]]): mark=1 else: mark=0 break if(mark): flag=1  mark=0 for i in range(6): if(l[c4[4*i]] == l[c4[4*i+1]] == l[c4[4*i+2]] == l[c4[4*i+3]]): mark=1 else: mark=0 break if(mark): flag=1  mark=0 for i in range(6): if(l[c5[4*i]] == l[c5[4*i+1]] == l[c5[4*i+2]] == l[c5[4*i+3]]): mark=1 else: mark=0 break if(mark): flag=1  mark=0 for i in range(6): if(l[c6[4*i]] == l[c6[4*i+1]] == l[c6[4*i+2]] == l[c6[4*i+3]]): mark=1 else: mark=0 break if(mark): flag=1  if(flag): print("YES") else: print("NO") 
from math import ceil  p,x,y = map(int, input().split()) h = x while h >=y:     h-=50 h+=50 for i in range(h, 10000000000, 50):     u = (i//50)%475     d = []     for j in range(25):         u = (u * 96 + 42)%475         d.append(26 + u)     if p in d:         k = i         break if k-x>0:     print(ceil((k-x)/100)) else:     print(0)
'''input 1 2 3 5 ''' n = int(input()) a = int(input()) b = int(input()) c = int(input()) cur = 0 pos = 0 for i in range(n-1):     if pos == 0:         if a < b:             pos = 1             cur += a         else:             pos = 2             cur += b      elif pos == 1:         if a < c:              pos = 1             cur += a         else:             pos = 3             cur += c     else:         if b < c:              pos = 2             cur += b         else:             pos = 3             cur += c                      print(cur)            
l = list(map(int, input().split()))  print(max(l) - min(l))
n, x = list(map(int, input().split())) a = list(map(int, input().split())) b = [0] * 1000000 ans = 0 go = False  for i in a:     b[i] += 1     if b[i] > 1:         go = True  if go:     print(ans) else:     for i in a:         b[i] -= 1         if b[i & x] + 1 > 1:             go = True             ans = 1             break                  b[i] += 1          if go:         print(ans)     else:         c = [i & x for i in a]         b = [0] * 1000000         for i in c:             b[i] += 1             if (b[i] > 1):                 ans = 2                 go = True                 break         if go:             print(ans)         else:             print(-1) 
h,w = map(int,input().split()) s = [list(input()) for i in range(h)] hh = -1 tmp = -1 for k,i in enumerate(s):     a = i.count('*')     if tmp < a:         tmp = a         hh = k  t = [list(i) for i in list(zip(*s))] ww = -1 tmp = -1 for k,i in enumerate(t):     a = i.count('*')     if tmp < a:         tmp = a         ww = k  if s[hh][ww] != '*':     print('NO')     return  if hh in (0, h - 1) or ww in (0, w - 1):     print('NO')     return  if '.' in (s[hh-1][ww], s[hh+1][ww], s[hh][ww-1], s[hh][ww+1]):     print('NO')     return  cnt = 1 for i in range(hh - 1, -1, -1):     if s[i][ww] == '.':         break     cnt += 1 for i in range(ww - 1, -1, -1):     if s[hh][i] == '.':         break     cnt += 1 for i in range(hh + 1, h):     if s[i][ww] == '.':         break     cnt += 1 for i in range(ww + 1, w):     if s[hh][i] == '.':         break     cnt += 1  for i in range(h):     for j in range(w):         cnt -= (s[i][j] == '*')  if cnt != 0:     print('NO') else:     print('YES')
n, a, b = map(int,input().split()) if a>1 and b>1: print("NO"); return if 2<=n<=3 and a == b == 1: print("NO"); return print("YES")  if b == 1:     adj = [[0]*n for i in range(n)]     conn = n     for i in range(n):         if conn == a: break         adj[i][i+1] = adj[i+1][i] = 1         conn-= 1         if conn == a: break elif a == 1:     adj = [[1]*n for i in range(n)]     conn = n     for i in range(n): adj[i][i] = 0     for i in range(n):         if conn == b: break         adj[i][i+1] = adj[i+1][i] = 0         conn-= 1         if conn == b: break  for row in adj:     print(*row, sep='') 
c,d=list(map(int,input().split()))  n,m=list(map(int,input().split()))  k=int(input())  z=0 best=10**10 while(1):     x=n*m-k     x-=z*n     best=min(best,z*c+(max(x,0)*d))     if(x<0):         break     z+=1 print(best)      
3  s = input() n = len(s)  a, b = 0, 0 d = dict() for i in range(len(s)):     if s[i] in d:         a = d[s[i]]         b = i     d[s[i]] = i  if a == b - 1:     print("Impossible") else:     ans = [[' '] * 13 for i in range(2)]     if (b - a) % 2 == 1:         for i in range((b - a) // 2):             ans[0][-(b - a) // 2 + i + 1] = s[a + i + 1]             ans[1][-i - 1] = s[a + i + (b - a) // 2 + 1]         x = -(b - a) // 2         y = 0         for i in range(b, n):             ans[y][x] = s[i]             if y == 0:                 x -= 1             else:                 x += 1             if x == -14:                 y = 1                 x = 0         for i in range(a):             ans[y][x] = s[i]             if y == 0:                 x -= 1             else:                 x += 1             if x == -14:                 y = 1                 x = 0         print("".join(ans[0]))         print("".join(ans[1]))     else:         for i in range((b - a) // 2):             ans[0][-(b - a) // 2 + i + 1] = s[a + i + 1]             ans[1][-i - 1] = s[a + i + (b - a) // 2]         x = -(b - a) // 2         y = 0         for i in range(b, n):             ans[y][x] = s[i]             if y == 0:                 x -= 1             else:                 x += 1             if x == -14:                 y = 1                 x = 0         for i in range(a):             ans[y][x] = s[i]             if y == 0:                 x -= 1             else:                 x += 1             if x == -14:                 y = 1                 x = 0         print("".join(ans[0]))         print("".join(ans[1]))    
import math  x, y = [int(v) for v in input().split()]  xly = x * math.log(y) ylx = y * math.log(x)  if abs(xly - ylx) < 1e-8:     print('=') elif ylx < xly:     print('<') else:     print('>') 
from math import *  r, h = list(map(int, input().split())) d = h % r  if d * 2 < r:     print(h // r * 2 + 1) elif sqrt(3) * (r / 2) + r - 1e-6 <= d + r:     print(h // r * 2 + 3) else:     print(h // r * 2 + 2) 
cards = list(map(int, input().split()))  result = sum(cards)  for i in range(5):     cnt = cards.count(cards[i])     cnt = min(cnt, 3)     if cnt not in [2, 3]:         continue     result = min(result, sum(cards) - cnt * cards[i])  print(result) 
from math import * n, a = map(int, input().split()) A = list(map(int, input().split())) A.sort() if n == 1:     print(0)      else:     if a > A[-1]:         print(abs(a - A[1]))     elif a < A[0]:         print(abs(a - A[-2]))     else:         per1 = abs(A[0] - A[-2])         per2 = abs(A[1] - A[-1])         ans1 = abs(A[0] - a) + per1         ans2 = per1 + abs(A[-2] - a)         ans3 = per2 + abs(a - A[-1])         ans4 = per2 + abs(a - A[1])         print(min(ans1, ans2, ans3, ans4))
import re import itertools from collections import Counter, deque  class Task:     maxDigitSum = 18 * 9     n = 0     answer = ""       def getData(self):         self.n = int(input())         #inFile = open('input.txt', 'r')         #inFile.readline().rstrip()         #self.childs = inFile.readline().rstrip()      def solve(self):         if self.n == 1:             self.answer = '-1'             return          xL, xR = 0, self.n         while xL + self.maxDigitSum < xR:             xM = (xL + xR) // 2             if xM**2 + self.digitSum(xM) * xM < self.n:                 for x in range(xM - 1, max(xL, xM - self.maxDigitSum) - 1, -1):                     if x**2 + self.digitSum(x) * x == self.n:                         self.answer = x                         return                 xL = xM             else:                 for x in range(xM + 1, min(xR, xM + self.maxDigitSum) + 1):                     if x**2 + self.digitSum(x) * x == self.n:                         self.answer = x                         return                 xR = xM         for x in range(xL, xR + 1):             if x**2 + self.digitSum(x) * x == self.n:                 self.answer = x                 return         self.answer = -1      def digitSum(self, n):         return sum([int(x) for x in str(n)])      def printAnswer(self):         print(self.answer)         #outFile = open('output.txt', 'w')         #outFile.write(self.answer)  task = Task() task.getData() task.solve() task.printAnswer() 
s = input() t = input() a, b = int(s[:2]), int(s[3:]) c, d = int(t[:2]), int(t[3:]) a -= c b -= d if b < 0:     a -= 1     b = 60 + b if a < 0:     a = 24 + a if a < 10:     print(0, end = '') print(a, ':', end = '', sep = '') if b < 10:     print(0, end = '') print(b) 
n = int(input()) a = list(map(int,input().split())) m = max(a)  current = 0 longest = 0 for x in a:     if x == m:         current +=1     else:         longest = max(current,longest)         current = 0 longest = max(current,longest) print (longest)  
import math n,m,k=map(int,input().split()) out=1 for i in range(k):     out*=(m-1)     out%=998244353 out*=m out%=998244353 out*=(math.factorial(n-1)//math.factorial(k)//math.factorial(n-1-k)) out%=998244353 print(out)
n = input() good = True while n != '' and good:     if n.endswith('144'):         n = n[:-3]     elif n.endswith('14'):         n = n[:-2]     elif n.endswith('1'):         n = n[:-1]     else:         good = False print('YES' if good else 'NO') 
n,m,i,j,a,b=list(map(int,input().split()))  ans=100000000000  if((i,j)==(n,1) or (i,j)==(1,1) or (i,j)==(1,m) or (i,j)==(n,m)):     print(0)  else:     #Corner (1,1)      hor=i-1     ver=j-1      if(hor%a==0 and ver%b==0):         x=hor//a         y=ver//b         if(x%2==y%2 and a<=n-1 and b<=m-1):             ans=min(ans,max(x,y))      #Corner (n,m)      hor=abs(i-n)     ver=abs(j-m)      if(hor%a==0 and ver%b==0):         x=hor//a         y=ver//b         if(x%2==y%2 and a<=n-1 and b<=m-1):             ans=min(ans,max(x,y))      #Corner (1,m)      hor=i-1     ver=abs(j-m)      if(hor%a==0 and ver%b==0):         x=hor//a         y=ver//b         if(x%2==y%2 and a<=n-1 and b<=m-1):             ans=min(ans,max(x,y))      #Corner (n,1)      hor=abs(n-i)     ver=j-1      if(hor%a==0 and ver%b==0):         x=hor//a         y=ver//b         if(x%2==y%2 and a<=n-1 and b<=m-1):             ans=min(ans,max(x,y))     if(ans!=100000000000):         print(ans)     else:         print("Poor Inna and pony!")          
from sys import stdin input = stdin.readline  n = int(input()) s = list(input().strip())  for i in range(26):     char = chr(ord('z') - i)     prev = chr(ord('z') - i - 1)      updated = True     while updated:         updated = False         for idx in range(len(s)-1, -1, -1):             if s[idx] == char:                 if idx < len(s)-1 and s[idx+1] == prev:                     s.pop(idx)                     updated = True                 elif idx > 0 and s[idx-1] == prev:                     s.pop(idx)                     updated = True  print( n - len(s))  
n, k = map(int, input().split()) a = set(map(int, input().split())) q = int(input())  # def isIn(x, fm, to): # if fm >= to: # return a[fm] == x # t = a[(fm+to) // 2] # if t > x: # return isIn(x, fm, (fm+to) // 2 - 1) # elif t < x: # return isIn(x, (fm+to) // 2 + 1, to) # else: # return True  for _ in range(q): x = int(input()) if x in a: print(1) continue found = False for i in range(2, k + 1): for j in range(1, i // 2 + 1): for l in a: t = x - l * j if t % (i - j) != 0: continue # if isIn(t // (i - j), 0, n - 1): if t // (i - j) in a: print(i) found = True break if found: break if found: break if not found: print(-1)
#!/usr/bin/env python3  def main():     try:         while True:             s, x1, x2 = list(map(int, input().split()))             t1, t2 = list(map(int, input().split()))             p, d = list(map(int, input().split()))              def travel(src, trg):                 nonlocal d                 if src == trg:                     return 0                 if src < trg:                     if d > 0:                         return trg - src                     else:                         d = 1                         return trg + src                 else:                     if d < 0:                         return src - trg                     else:                         d = -1                         return s - src + s - trg              a = travel(p, x1)             b = travel(x1, x2)             print("%d" % min(abs(x1 - x2) * t2, (a + b) * t1))      except EOFError:         pass  main() 
n, x = map(int, input().split()) ans = 0 for i in range(n, 0, -1):     if x % i == 0 and x//i <= n:         ans += 1 print(ans)
n, k = map(int, input().split()) print(('abcdefghijklmnopqrstuvwxyz'[:k] * n)[:n])
import sys, math n=int(input()) s=input() z=list(map(int,input().split())) best = 10**9 for i in range(len(s)-1):     if s[i]=='R' and s[i+1]=='L':         best=min(best, z[i+1]-(z[i]+z[i+1])//2) if best != 10**9:     print(best) else:     print(-1) 
R=lambda:list(map(int,input().split())) n,a,b=R() xy = [R() for _ in range(n)] ans = 0 def f(xy1, xy2):     tans = 0     for _ in range(2):         for __ in range(2):             if (xy1[0]+xy2[0]<=a and max(xy1[1], xy2[1])<=b) or\                 (max(xy1[0], xy2[0])<=a and xy1[1]+xy2[1]<=b):                 tans=max(tans, xy1[0]*xy1[1] + xy2[0]*xy2[1])             xy2[0], xy2[1] = xy2[1], xy2[0]         xy1[0], xy1[1] = xy1[1], xy1[0]     return tans for i in range(n):     for j in range(i+1,n):         ans=max(ans, f(xy[i], xy[j])) print(ans) 
#!/usr/bin/env python import sys  n = int(input()) k = (n << 2) + 1  x, y = [], [] for i in range(k):     xi, yi = list(map(int, input().split()))     x.append(xi)     y.append(yi)  for lx in range(0, 50):     for ly in range(0, 50):         for side_len in range(1, 51):             ok, idx = True, -1             for i in range(k):                 if not (((x[i] == lx or x[i] == lx + side_len) and ly <= y[i] <= ly + side_len) or                     ((lx <= x[i] <= lx + side_len) and (y[i] == ly or y[i] == ly + side_len))):                     if idx != -1:                         ok = False                     else:                         idx = i             if ok:                 print(x[idx], y[idx])                 return 
n = int(input()) def p(x):     ans = 1     while x > 0:         ans *= x % 10         x //= 10     return ans ans = p(n) for i in range(len(str(n))):     cans = 9 ** i * p((n // 10 ** i) - 1)     ans = max(ans, cans) print(ans) 
n = int(input()) a = list(map(int,input().split())) s = sum(a) for k in range(max(a), 999999):     vote = sum(k-x for x in a)     if vote > s: print(k); break
s = input()  cur_len = 1 a = [] char = [] for i in range(1, len(s)):     if s[i] == s[i-1]: cur_len += 1     else:       a.append(cur_len)       char.append(s[i-1])       cur_len = 1        a.append(cur_len) char.append(s[len(s)-1])  ans = 0 while len(a) > 1:     n = len(a)     inner_min = 100000000     for i in range(1,n-1):         if a[i] < inner_min: inner_min = a[i]              k = min(a[0], a[n-1],(inner_min + 1)//2)     #print("a: ", a, "; k = ", k)     b = []     new_char = []     for i in range(n):         if i == 0 or i == n-1:             if a[i] > k:                 b.append(a[i]-k)                 new_char.append(char[i])         else:             if a[i] > 2*k:                 b.append(a[i] - 2*k)                 new_char.append(char[i]) ##    print(b)     ans += k     if len(b) > 1:         c = [0]*n         newnew_char = [new_char[0]]         count = 0              for i in range(0,len(b)-1):             c[count] += b[i]             if new_char[i] == new_char[i+1]: continue             else:                 count += 1                 newnew_char.append(new_char[i+1])         if new_char[len(b)-2] == new_char[len(b) - 1]: c[count] += b[len(b)-1]         else:             #count += 1             newnew_char.append(new_char[i+1])             c[count] = b[len(b)-1]         a = c[:count+1]         char = newnew_char[:]     else:         a = b[:]  print(ans)          
n=int(input()) inp=input().split() l=[] for val in inp: l.append(int(val)) l.sort() count=3 while(count<n and l[count]==l[count-1]): count+=1 if(l[2]!=l[1]): print(count-2) elif(l[2]!=l[0]): print(((count-1)*(count-2))//2) else: print((count*(count-1)*(count-2))//6)
n=int(input())+1 if n==1: print(0) else: print(n if n%2==1 else n//2) 
n = int(input()) if n >= 0:     print(n) else:     n = str(n)     print(max(int(n[:-1]), int(n[:-2] + n[-1]))) 
a, b = input().split(' ') n = int(input())  d = {'v': 0, '>': 1, '^': 2, '<': 3}  a, b = d[a], d[b]  ccw = bool((a + n) % 4 == b) cw = bool((a - n) % 4 == b)  if cw and not ccw: print('cw') elif ccw and not cw: print('ccw') else: print('undefined') 
n = int(input()) a = input().strip() nextl = [-1] * n lastr = [-1] * n ll = -1 for i in range(n):     if a[i] == "R":         ll = i     if a[i] == "L":         ll = -1     lastr[i] = ll nl = -1 for i in range(n - 1, -1, -1):     if a[i] == "L":         nl = i     if a[i] == "R":         nl = -1     nextl[i] = nl ans = 0 #print(lastr) #print(nextl) for i in range(n):     if nextl[i] == lastr[i] == -1:         ans += 1     if nextl[i] == -1 or lastr[i] == -1:         continue     d1 = nextl[i] - i     d2 = i - lastr[i]     if d1 == d2:         ans += 1 print(ans)
 import sys #sys.stdin=open("data.txt") input=sys.stdin.readline  n,m=map(int,input().split())  l=list(map(int,input().split())) for i in range(len(l)):     l[i]-=1  use=[0]*n a=[0]*n bad=0  for i in range(len(l)-1):     # transfer l[i] to l[i+1]     if a[l[i]] and a[l[i]]%n!=(l[i+1]-l[i])%n:         bad=1         break     use[(l[i+1]-l[i])%n]=1     a[l[i]]=(l[i+1]-l[i])%n     if a[l[i]]==0: a[l[i]]=n  if not bad:     # fill in gaps     for i in range(n):         if a[i]==0:             for j in range(1,n+1):                 if not use[j%n]:                     a[i]=j                     use[j%n]=1                     break     if sum(use)==n:         print(" ".join(map(str,a)))     else:         print("-1") else:     print("-1")
a, k = input().split() k = int(k) a = [i for i in a] i = 0 while k > 0 and i < len(a):     m = a[i : i + k + 1].index(max(a[i : i + k + 1]))     if a[i + m] > a[i]:         k -= m         for j in range(i + m, i, -1):             a[j], a[j - 1] = a[j - 1], a[j]     i += 1 print("".join(a))
def isZ(a):     return a == int(a) def geom(a,b,c,d):     if 0 in (a,b,c,d) and not (a==b==c==d==0):         return False     if(b/a==c/b==d/c):         nxt = d * (d/c)         if not isZ(nxt): return False         print(int(nxt))         return True     return False def ar(a,b,c,d):     if(b-a==c-b==d-c):         print(int(2*d-c))         return True     return False  a,b,c,d = map(float,input().split()) if not geom(a,b,c,d) and not ar(a,b,c,d):     print(42)
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools  sys.setrecursionlimit(10**7) inf = 10**20 eps = 1.0 / 10**10 mod = 10**9+7 dd = [(-1,0),(0,1),(1,0),(0,-1)] ddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]  def LI(): return tuple(map(int, sys.stdin.readline().split())) def LLI(): return [tuple(map(int, l.split())) for l in sys.stdin] def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()] def LF(): return [float(x) for x in sys.stdin.readline().split()] def LS(): return sys.stdin.readline().split() def I(): return int(sys.stdin.readline()) def F(): return float(sys.stdin.readline()) def S(): return input() def pf(s): return print(s, flush=True)  def main():     n = I()     a = LI()     b = a[0]     c = a[-1]     r = 0     for i in range(n-1,-1,-1):         if a[i] != b:             r = i             break      for i in range(n):         if a[i] != b:             t = n-1 - i             if r < t:                 r = t      return r  print(main())   
n, m, k = list(map(int, input().split())) print((k - 1) // (2 * m) + 1, end=" ") print((k - 1) % (2 * m) // 2 + 1, end=" ") if ((k - 1) % (2 * m) % 2 == 0):     print("L") else:     print("R") 
def main():     n = int(input())     s = input()          b, g, r = [s.count(i) for i in "BGR"]          if min(b, g, r) > 0:         print("BGR")         return     if max(b, g, r) == n:         if b == n: print("B")         if g == n: print("G")         if r == n: print("R")         return     if max(b, g, r) == 1:         if b == 0: print("B")         if g == 0: print("G")         if r == 0: print("R")         return     if max(b, g, r) == n - 1:         if b == n - 1: print("GR")         if g == n - 1: print("BR")         if r == n - 1: print("BG")         return           print("BGR")           main()
